ICE/VistA immunization forecasting prototype
GT.M 29-MAY-2015 14:21:06
C0IDDMAP
C0IDDMAP  ;
 ; Pull information re CPT and CVX codes from dEWDrop
 D CPTMAP^C0ITEST
 D CVXMAP^C0ITEST
 D CPTIMAP^C0ITEST
 N IMMCPT,IMMCVX,CVXTXT,X,IMMIEN,I
 S (IMMCPT,IMMCVX,CVXTXT,X,IMMIEN,I)=""
 F I=1:1:141 D
 .;if there is an entry in the CPT Mapping file that is for an Immunization
 .I $P(^PXD(811.1,I,0),U,2)["AUTTIMM" D
 ..;Pick the CPT code out of the file
 ..S IMMCPT=$P($P(^PXD(811.1,I,0),U,1),";",1)
 ..W I," CPT Code is ",IMMCPT,! 
 ..;If there is a match to an immunization
 ..I $D(CPTMAP(IMMCPT)) D
 ...S IMMCVX=CPTMAP(IMMCPT)
 ...W I," CVX Code is ",IMMCVX,!
 ...I $D(CVXMAP(IMMCVX)) D
 ...S CVXTXT=CVXMAP(IMMCVX)
 ...W I," CVX Text is ",CVXTXT,!
 ...S X=$P(^PXD(811.1,I,0),U,2)
 ...I $D(X) D
 ....S IMMIEN=$P($P(^PXD(811.1,I,0),U,2),";",1)
 ....W I," IEN of the Immunization is ",IMMIEN,! 
 ....;VOID-IEN of CPT Mapping File;CPT Code;Immunization file Name for the immunization; Short name from Immunization file;CVX Code;proper CVX code short description
 ....;S NANCY(I)=I_";"_$P($P(^PXD(811.1,I,0),U,1),";",1)_";"_$P(^AUTTIMM(IMMIEN,0),U,1)_";"_$P(^AUTTIMM(IMMIEN,0),U,2)_";"_IMMCVX_";"_CVXTXT_";"
 ....;IEN of CPT Mapping File;Immunization File IEN;Immunization file Name for the immunization; Short name from Immunization file;CPT Code;CVX Code;proper CVX code sho 
 ....S NANCY(I)=I_";"_IMMIEN_";"_$P(^AUTTIMM(IMMIEN,0),U,1)_";"_$P(^AUTTIMM(IMMIEN,0),U,2)_";"_$P($P(^PXD(811.1,I,0),U,1),";",1)_";"_IMMCVX_";"_CVXTXT
 ....W NANCY(I),!
 ....S NANCY1(I)=IMMIEN
 ....W NANCY1(I),!
 ; F I=1:1:131 D
 ;.; if there is an entry in the CPT mapping file corrensponding to this imminization, QUIT
 Q
 

C0IEWD
%zewdGTM        ;Enterprise Web Developer GT.M/ Virtual Appliance Functions
 ;
 ; Product: Enterprise Web Developer (Build 885)
 ; Build Date: Wed, 14 Sep 2011 16:02:37
        ;
 ; ----------------------------------------------------------------------------
 ; | Enterprise Web Developer for GT.M and m_apache                           |
 ; | Copyright (c) 2004-11 M/Gateway Developments Ltd,                        |
 ; | Reigate, Surrey UK.                                                      |
 ; | All rights reserved.                                                     |
 ; |                                                                          |
 ; | http://www.mgateway.com                                                  |
 ; | Email: rtweed@mgateway.com                                               |
 ; |                                                                          |
 ; | This program is free software: you can redistribute it and/or modify     |
 ; | it under the terms of the GNU Affero General Public License as           |
 ; | published by the Free Software Foundation, either version 3 of the       |
 ; | License, or (at your option) any later version.                          |
 ; |                                                                          |
 ; | This program is distributed in the hope that it will be useful,          |
 ; | but WITHOUT ANY WARRANTY; without even the implied warranty of           |
 ; | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            |
 ; | GNU Affero General Public License for more details.                      |
 ; |                                                                          |
 ; | You should have received a copy of the GNU Affero General Public License |
 ; | along with this program.  If not, see <http://www.gnu.org/licenses/>.    |
 ; ----------------------------------------------------------------------------
        ;
        ;
        QUIT
        ;
        ; EWD Virtual Appliance Version/Build
version()       
        QUIT "6.0"
        ;
buildDate()     
        QUIT "29 January 2009"
        ;
config  ;
        d setApplicationRootPath^%zewdAPI("/usr/ewd/apps")
        d setOutputRootPath^%zewdAPI("/usr/php","php")
        ;s ^%eXtc("system","license")="2vxuxs3qzqxuyuvtynezvm8yy5Wrz4i7wwwrzmsvqwwtr"
        QUIT
        ;
getMGWSIPid()   
        ;
        n io,ok,line,stop,temp
        s io=$io
        s temp="temp"_$p($h,",",2)_".txt"
        zsystem "ps -A|grep mgwsi > "_temp
        o temp:(readonly:exception="g nsFileNotExists") 
        u temp
        r line
        c temp
        u io
        s ok=$$deleteFile^%zewdAPI(temp)
        s line=$$stripSpaces^%zewdAPI(line)
        QUIT +line
startMGWSI      ;
        k ^%zewd("mgwsis")
        d START^%ZMGWSI(0)
        ;s ^%zewd("mgwsi","job")=$zjob
        QUIT
        ;
stopMGWSI       ;
        n pid
        ;s pid=$g(^%zewd("mgwsi","job"))
        ;s pid=$$getMGWSIPid()
        ;i pid'="" d
        ;. k ^%zewd("mgwsi","job")
        ;. i $$pidExists(pid) zsystem "kill -TERM "_pid
        s pid=""
        f  s pid=$o(^%zewd("mgwsis",pid)) q:pid=""  d
        . k ^%zewd("mgwsis",pid)
        . i $$pidExists(pid) zsystem "kill -TERM "_pid
        QUIT
        ;
restartMGWSI    
        d stopMGWSI
        d startMGWSI
        QUIT
        ;
closeMGWSI(server)
        ; eg server=the MGWSI "server" to be closed, eg ewd, LOCAL, etc
        n ok,html,url
        s url="http://127.0.0.1:7040/cgi-bin/nph-mgwsic?mgwsidef=Default_CloseDown_Server&mgwsiSYS=2&mgwsiCDN="_server_"&mgwsiSYSbOK=Close+Connections(s)"
        s ok=$$httpGET(url,.html)
        QUIT
        ;
closeMGWSIConnections   
        n pid
        s pid=""
        f  s pid=$o(^%zewd("mgwsis",pid)) q:pid=""  d
        . k ^%zewd("mgwsis",pid)
        . i $$pidExists(pid) zsystem "kill -TERM "_pid
        QUIT
        ;
shutdown        
        zsystem "shutdown -h now"
        QUIT
        ;
restart 
        zsystem "shutdown -r now"
        QUIT
        ;
pidExists(pid)  ;
        n io,line,ok,temp
        s io=$io
        s temp="temp"_$p($h,",",2)_".txt"
        zsystem "ps --no-heading "_pid_" > "_temp
        c temp
        o temp:(readonly:exception="g pidFileNotExists")
        u temp r line
        c temp
        u io
        s ok=$$deleteFile^%zewdAPI(temp)
        i line'[pid QUIT 0
        QUIT 1
pidFileNotExists        
        c temp
        s ok=$$deleteFile^%zewdAPI(temp)
        u io
        i $p($zs,",",1)=2 QUIT 0
        QUIT 0
        ;
validDomain(domain)     
        ;
        n exists,io,ok,line,stop,temp
        s io=$io
        s temp="temp"_$p($h,",",2)_".txt"
        zsystem "nslookup "_domain_" >"_temp
        o temp:(readonly:exception="g nsFileNotExists") 
        u temp
        s stop=0,exists=0
        f  r line d  q:stop 
        . i line["authoritative answer" s stop=1,exists=1 q
        . i line["server can't find" s stop=1,exists=0 q
        c temp
        u io
        s ok=$$deleteFile^%zewdAPI(temp)
        QUIT exists
nsFileNotExists 
        u io
        i $p($zs,",",1)=2 QUIT -1
        QUIT -1
        ;
getIP(info)     
        ;
        n exists,io,ip,ok,line,stop,temp,value
        s io=$io
        s temp="temp"_$p($h,",",2)_".txt"
        zsystem "ifconfig eth0 >"_temp
        o temp:(readonly:exception="g ipFileNotExists") 
        u temp
        s stop=0,ok=0,ip=""
        f  r line d  q:stop
        . i line["HWaddr" d
        . . s value=$p(line,"HWaddr ",2)
        . . s info("mac")=$$stripSpaces^%zewdAPI(value)
        . i line["inet addr:" d
        . . s value=$p(line,"inet addr:",2)
        . . s ip=$p(value," ",1)
        . . s info("ip")=ip
        . . i ip="127.0.0.1" s stop=1
        . i line["Bcast:" d
        . . s value=$p(line,"Bcast:",2)
        . . s value=$p(value," ",1)
        . . s info("broadcast")=value
        . i line["Mask:" d
        . . s value=$p(line,"Mask:",2)
        . . s value=$p(value," ",1)
        . . s info("mask")=value
        . i line["inet6 addr" s stop=1 q
        . i line["Local Lookback" s stop=1 q
        c temp
        u io
        s ok=$$deleteFile^%zewdAPI(temp)
        QUIT ip
ipFileNotExists 
        s $zt=""
        u io
        i $p($zs,",",1)=2 QUIT -1
        QUIT ""
        ;
openTCP(host,port,timeout)      
        n delim,dev
        i host'?1N.N1"."1N.N1"."1N.N1"."1N.N,'$$validDomain(host) QUIT 0
        i $g(host)="" QUIT 0
        i $g(port)="" QUIT 0
        i $g(timeout)="" s timeout=20
        s delim=$c(13)
        s dev="client$"_$p($h,",",2)
        ;o dev:(connect=host_":"_port_":TCP":attach="client":exception="g tcperr"):timeout:"SOCKET"
        o dev:(connect=host_":"_port_":TCP":attach="client":exception="g tcperr":nowrap):timeout:"SOCKET" 
        QUIT dev
        ;
tcperr  ;
        QUIT 0
        ;
resetSecurity   
        ;
        k ^%zewd("config","security","validSubnet")
        QUIT
        ;
resetVM 
        n files
        d resetSecurity
        k ^%zewdSession
        s ^%zewd("nextSessid")=1
        k ^%zewd("mgwsi")
        k ^%zewd("mgwsis")
        k ^%zewd("emailQueue")
        k ^%zewd("daemon","email")
        k ^%zewd("relink")
        k ^%eXtc
        k ^%zewdLog
        k ^%zewdError
        k ^CacheTempUserNode
        k ^CacheTempEWD
        k ^%zewdTrace
        k ^zewd("trace")
        k ^%MGW,^%MGWSI
        k ^rob,^robdata,^robcgi
        k ^CacheTempWLD
        k ^ewdDemo
        d removeDOMsByPrefix^%zewdAPI()
        ;d getFilesInPath^%zewdHTMLParser("/usr/local/gtm/ewd",".m",.files)
        ;f lineNo=1:1 s line=$t(leaveAsM+lineNo) q:line["***END***"  d
        ;. s leaveFiles($p(line,";;",2))=""
        ; s file=""
        ;f  s file=$o(files(file)) q:file=""  d
        ;. i $d(leaveFiles(file)) q
        ;. i file'["_zewd" q
        ;. s path="/usr/local/gtm/ewd/"_file
        ;   . s ok=$$deleteFile^%zewdAPI(path)
        ;   s ok=$$deleteFile^%zewdAPI("/usr/local/gtm/ewd/MDB.m")
        ;   s ok=$$deleteFile^%zewdAPI("/usr/local/gtm/ewd/MDBMgr.m")
       ;s ok=$$deleteFile^%zewdAPI("/usr/local/gtm/ewd/MDBConfig.m")
       s ok=$$deleteFile^%zewdAPI("/usr/MDB/MDB.conf")
        k ^MDB,^MDBUAF
        zsystem "rm -f ~/.bash_history"
        zsystem "history -c"
        ;echo " "> /var/log/apache2/access.log
        ;echo " "> /var/log/apache2/error.log
        ;echo " "> /var/log/apache2/access.log.1"
        ;echo " "> /var/log/apache2/error.log.1"
        ;zsystem "rm /usr/php/tutorial/*.*"
        ; Now clear down history for root
        ; Shutdown Apache and clear down Apache Log files - use above commented commands
        ; Delete all ewdapps directories and files
        ; Delete all PHP directories and files
        ; zero-space all empty content: cat /dev/zero > zero.fill;sync;sleep 1;sync;rm -f zero.fill
        ; Compress the virtual drives: 
        ; G:\virtual_machines\mdb_1_0_master>"C:\Program Files\VMware\VMware Server\vmware-vdiskmanager.exe" -k Ubuntu-cl1.vmdk
        QUIT
        ;
setClock        
        zsystem "ntpdate ntp.ubuntu.com"
        QUIT
        ;
startVM 
        ;
        n cr,ip
    s cr=$c(13)
        ;d startMGWSI
        w cr,!
        d setClock
        s ip=$$getIP()
        w cr,!
        w "======================================================="_cr,!
        w "  Welcome to the EWD Virtual Appliance       "_cr,!
        w "      -- Version "_$$version()_": "_$$buildDate()_" --"_cr,!
        ;
        i ip=""!(ip="127.0.0.1") g startVMFail
        w !
        w "   System clock set to "_$$inetDate^%zewdAPI($h)_cr,!!
        w "   The EWD Virtual Appliance is now ready for use!"_cr,!
        w " To run the EWD Management Portal, point your browser at http://"_ip_cr,!!
        g startVMFin
startVMFail     
        w "Unfortunately the Virtual Appliance was unable to acquire an IP"_cr,!
        w "address.  Please consult the readme file for what to do next"_cr,!
startVMFin      
        w "======================================================="_cr,!
        QUIT
        ;
startMDBVM      
        ;
        n cr,ip
        s cr=$c(13)
        ;d startMGWSI
        w cr,!
        d setClock
        s ip=$$getIP()
        w cr,!
        w "======================================================="_cr,!
        w "  Welcome to the M/DB Virtual Appliance       "_cr,!
        w "      -- Version "_$$version^MDB()_": "_$$buildDate^MDB()_" --"_cr,!
        ;
        i ip=""!(ip="127.0.0.1") g startVMFail
        w !
        w "   System clock set to "_$$inetDate^%zewdAPI($h)_cr,!!
        w "   The M/DB Virtual Appliance is now ready for use!"_cr,!
        w " To run the M/DB Management Portal, point your browser at http://"_ip_cr,!!
        g startVMFin
        ;
httpGET(url,html,headerArray,timeout,test,rawResponse,respHeaders,sslHost,sslPort)      
        ;
        n dev,host,HTTPVersion,io,port,rawURL,ssl,urllc
        ;
    k rawResponse
    i $g(html)'="global" k html
        s HTTPVersion="1.0"
        s rawURL=url
        s ssl=0
        s port=80
        s urllc=$$zcvt^%zewdAPI(url,"l")
        i $e(urllc,1,7)="http://" d
        . s url=$e(url,8,$l(url))
        . s sslHost=$p(url,"/",1)
        . s sslPort=80
        . i sslHost[":" d
        . . s sslPort=$p(sslHost,":",2)
        . . s sslHost=$p(sslHost,":",1)
        e  i $e(urllc,1,8)="https://" d
        . s url=$e(url,9,$l(url))
        . s ssl=1
        . s sslHost=$g(sslHost)
        . i sslHost="" s sslHost="127.0.0.1"
        . s sslPort=$g(sslPort)
        . i sslPort="" s sslPort=89
        e  QUIT "Invalid URL"
        s host=$p(url,"/",1)
        i host[":" d
        . s port=$p(host,":",2)
        . s host=$p(host,":",1)
        s url="/"_$p(url,"/",2,5000)
        i $g(timeout)="" s timeout=20
        ;
        s io=$io
        i $g(test)'=1 d
        . s dev=$$openTCP(sslHost,sslPort,timeout)
        . u dev
        i ssl d
        . w "GET "_rawURL_" HTTP/"_HTTPVersion_$c(13,10)
        e  d
        . w "GET "_url_" HTTP/"_HTTPVersion_$c(13,10)
        w "Host: "_host
        i port'=80 w ":"_port
        w $c(13,10)
        w "Accept: */*"_$c(13,10)
        ;
        i $d(headerArray) d
        . n n
        . s n=""
        . f  s n=$o(headerArray(n)) q:n=""  d
        . . w headerArray(n)_$c(13,10)
        ; 
        w $c(13,10),!
        ;
        ; That's the request sent !
        ;
httpResponse    ;
        ;
        i $g(test)=1 QUIT ""
        n c,dlim,header,i,lineNo,n,no,offset,pos,rlen,stop,str,toGlobal
        ;
        k respHeaders
        s stop=0,no=1
        f i=1:1 d  q:stop
        . i i=1
        . r c#1
        . i c=$c(13) q 
        . i c'=$c(10) s respHeaders(no)=$g(respHeaders(no))_c
        . i c=$c(10),$g(respHeaders(no))="" s stop=1 q
        . i c=$c(10) s no=no+1
        ;
        s rlen=9999
        f i=1:1:(no-1) d
        . s header=$$zcvt^%zewdAPI(respHeaders(i),"l")
        . i header["content-length" d
        . . s rlen=$p(header,":",2)
        . . s rlen=$$stripSpaces^%zewdAPI(rlen)
        ;
        i rlen<9999 d
        . r str#rlen
        e  d 
        . s str=""
        . f pos=1:1 u dev r str#10000:timeout g:'$t httpTimeout  q:str=""  s str(pos)=str q:($l(str)<10000)
        i $g(test)'=1 c dev
        s rawResponse=""
        s dlim=$c(10)
        f i=1:1:(no-1) s rawResponse=rawResponse_respHeaders(i)_dlim
        i $d(str)=1 s rawResponse=rawResponse_dlim_str
        i $d(str)=1 s str(1)=str
        s lineNo="",offset=0,n=0,toGlobal=0
        i $g(html)="global" k ^CacheTempEWD($j) s toGlobal=1
        f  s lineNo=$o(str(lineNo)) q:lineNo=""  d
        . s dlim=$c(10)
        . s str=str(lineNo)
        . i str[$c(13,10) s dlim=$c(13,10)
        . s rlen=$l(str,dlim)
        . i toGlobal d
        . . f i=1:1:rlen s n=n+1,^CacheTempEWD($j,n)=$p(str,dlim,i)
        . e  d
        . . f i=1:1:rlen s n=n+1,html(n)=$p(str,dlim,i)
        ;
        u io
        QUIT ""
        ;
httpTimeout     
        QUIT "Timed out waiting for response"
        ;
httpPOST(url,payload,mimeType,html,headerArray,timeout,test,rawResponse,respHeaders,sslHost,sslPort)    
        ;
        n contentLength,dev,host,HTTPVersion,io,port,rawURL,ssl,urllc
        ;
        k rawResponse,html
        s HTTPVersion="1.0"
        s rawURL=url
        s ssl=0
        s port=80
        s urllc=$$zcvt^%zewdAPI(url,"l")
        i $e(urllc,1,7)="http://" d
        . s url=$e(url,8,$l(url))
        . s sslHost=$p(url,"/",1)
        . s sslPort=80
        e  i $e(urllc,1,8)="https://" d
        . s url=$e(url,9,$l(url))
        . s ssl=1
        . s sslHost=$g(sslHost)
        . i sslHost="" s sslHost="127.0.0.1"
        . s sslPort=$g(sslPort)
        . i sslPort="" s sslPort=89
        e  QUIT "Invalid URL"
        s host=$p(url,"/",1)
        i host[":" d
        . s port=$p(host,":",2)
        . s host=$p(host,":",1)
        . ; added by gpl
        . s sslHost=host
        . s sslPort=port
        . ; end gpl addition
        s url="/"_$p(url,"/",2,5000)
        i $g(timeout)="" s timeout=20
        ;
        s io=$io
        i $g(test)'=1 d
        . s dev=$$openTCP(sslHost,sslPort,timeout)
        . u dev
        i ssl d
        . w "POST "_rawURL_" HTTP/"_HTTPVersion_$c(13,10)
        e  d
        . w "POST "_url_" HTTP/"_HTTPVersion_$c(13,10)
        w "Host: "_host
        i port'=80 w ":"_port
        w $c(13,10)
        w "Accept: */*"_$c(13,10)
        ;
        i $d(headerArray) d
        . n n
        . s n=""
        . f  s n=$o(headerArray(n)) q:n=""  d
        . . w headerArray(n)_$c(13,10)
        ;
        s mimeType=$g(mimeType)
        i mimeType="" s mimeType="application/x-www-form-urlencoded"
        s contentLength=0
        i $d(payload) d
        . n no
        . s no=""
        . f  s no=$O(payload(no)) q:no=""  D
        . . s contentLength=contentLength+$l(payload(no))
        . s contentLength=contentLength
        . w "Content-Type: ",mimeType
        . i $g(charset)'="" w "; charset=""",charset,""""
        . w $c(13,10)
        . w "Content-Length: ",contentLength,$c(13,10)
        ;
        w $c(13,10)
        i $D(payload) d
        . n no
        . s no=""
        . f  s no=$O(payload(no)) q:no=""  d
        . . w payload(no)
        ; 
        w $c(13,10),!
        ;
        ; That's the request sent !
        ;
        g httpResponse
        ;
parseURL(url,docName)   
        ;
        n getPath,ok,server
        ;
        i url["http://" s url=$p(url,"http://",2)
        s server=$p(url,"/",1)
        s getPath=$p(url,"/",2,1000)
        s ok=$$parseURL^%zewdHTMLParser(server,getPath,docName)
        QUIT ok
        ;
smtpSend(domain,from,displayFrom,to,displayTo,ccList,subject,message,dialog,authType,username,password,timeout,gmtOffset,port)  
        ;
        n attach,boundary,crlf,date,dev,error,io,mess,rcpt,resp,sent,toList
        ;
        s timeout=$g(timeout) i timeout="" s timeout=10
        s domain=$g(domain)
        s port=$g(port) i port="" s port=25
        s from=$g(from)
        s to=$g(to)
        s subject=$g(subject)
        s gmtOffset=$g(gmtOffset) i gmtOffset="" s gmtOffset="GMT"
        ;
        s error=""
        i domain="" QUIT "No SMTP Domain specified"
        i from="" QUIT "No sender's email address specified"
        i to="" QUIT "No recipient's email address specified"
        i '$d(message) QUIT "No Email content specified"
        ;
        s date=$$inetDate^%zewdAPI($h)_" "_gmtOffset
        s mess($increment(mess))="Date: "_date
        i $g(displayFrom)'="" d
        . s mess($increment(mess))="From: """_displayFrom_"""<"_from_">"
        e  d
        . s mess($increment(mess))="From: "_from
        i $g(displayTo)'="" d
        . s mess($increment(mess))="To: """_displayTo_"""<"_to_">"
        e  d
        . s mess($increment(mess))="To: "_to
        s toList(to)=""
        i $d(ccList) d
        . n name
        . s mess($increment(mess))="Cc: "
        . i $g(ccList)'="" d
        . . s toList(ccList)=""
        . . s mess(mess)=mess(mess)_ccList
        . s name=""
        . f  s name=$o(ccList(name)) q:name=""  d
        . . i mess(mess)'="Cc: " s mess(mess)=mess(mess)_", "
        . . s mess(mess)=mess(mess)_name
        . . s toList(name)=""
        s mess($increment(mess))="Subject: "_subject
        s mess($increment(mess))="X-Priority: 3 (Normal)"
        s mess($increment(mess))="X-MSMail-Priority: Normal"
        s mess($increment(mess))="X-Mailer: "_$$version^%zewdAPI()
        s mess($increment(mess))="MIME-Version: 1.0"
        s mess($increment(mess))="Content-Type: text/plain; charset=""us-ascii"""
        s mess($increment(mess))="Content-Transfer-Encoding: 7bit"
        s mess($increment(mess))=""
        ;
        s message=$g(message)
        i message'="" d
        . s mess($increment(mess))=message
        e  d
        . n mlno
        . s mlno=""
        . f  s mlno=$o(message(mlno)) q:mlno=""  d
        . . s mess($increment(mess))=message(mlno)
        ;
        k dialog
        s io=$io
        s crlf=$c(13,10)
        s dev=$$openTCP(server,port,timeout)
        i dev=0 QUIT "Unable to connect to SMTP server: "_server
        u dev
        r resp:timeout e  d close QUIT "Unable to initiate connection with SMTP server"
        s resp=$p(resp,crlf,1)
        s dialog($increment(dialog))=resp
        s error=""
        s authType=$g(authType)
        i authType="LOGIN PLAIN"!(authType="LOGIN") d  i error'="" d close QUIT error
        . n context,decode,passB64,str,userB64
        . s context=1
        . i $d(^zewd("config","MGWSI")) s context=0
        . u dev w "EHLO "_domain_crlf,! s resp=$$read(.dialog)
        . i resp'["250",resp'["AUTH",resp'["LOGIN" s error="Authentication type LOGIN/LOGIN PLAIN not supported on this server" q
        . u dev w "AUTH LOGIN"_crlf,! s resp=$$read(.dialog)
        . i resp'["334" s error="No username authentication challenge from server" q
        . s str=$p(resp," ",2,1000)
        . s decode=$$DB64^%ZMGWSIS(str,context)
        . s resp="(decoded as : "_decode_")"
        . s dialog($increment(dialog))=resp
        . s userB64=$$B64^%ZMGWSIS(username,context)
        . u dev w userB64_crlf,! s resp=$$read(.dialog)
        . i resp'["334" s error="No password authentication challenge from server" q
        . s str=$p(resp," ",2,1000)
        . s decode=$$DB64^%ZMGWSIS(str,context)
        . s resp="(decoded as : "_decode_")"
        . s dialog($increment(dialog))=resp
        . s passB64=$$B64^%ZMGWSIS(password,context)
        . u dev w passB64_crlf,! s resp=$$read(.dialog)
        . i resp'["235 " s error=resp q
        e  d  i error'="" d close QUIT error
        . u dev w "HELO "_domain_crlf,! s resp=$$read(.dialog)
        . i resp'["250" s error=resp
        ;
        u dev w "MAIL FROM: "_from_crlf,! s resp=$$read(.dialog)
        i resp'["250" d close QUIT resp
        ;
        s rcpt=""
        f  s rcpt=$o(toList(rcpt)) q:rcpt=""  d  i resp'[250 q
        . u dev w "RCPT TO: <"_rcpt_">"_$c(13,10),! 
        . s resp=$$read(.dialog)
        i resp'[250 d close QUIT resp
        ;
        u dev w "DATA",crlf,! s resp=$$read(.dialog)
        i resp'["250",resp'["354" d close QUIT resp
        ;
        s message=$g(message)
        i message'="" d message(message,dev)
        e  d
        . n line,lineNo
        . s lineNo=""
        . f  s lineNo=$o(mess(lineNo)) q:lineNo=""  d
        . . s line=mess(lineNo)
        . . d message(line,dev)
        u dev w crlf,".",crlf,! s resp=$$read(.dialog)
        i resp'["250" d close QUIT resp
        u dev w "QUIT",crlf,! s resp=$$read(.dialog)
        d close
        QUIT ""
        ;
read(dialog)    
        n resp
        r resp
        s resp=$p(resp,$c(13,10),1)
        s dialog($increment(dialog))=resp
        QUIT resp
close   ;
        c dev
        u io
        QUIT
        ;
message(line,dev)       
        n buf,p1
        s buf=$g(line)
        i buf="" u dev w $c(13,10),! QUIT
        f  q:buf=""  d
        . s p1=$e(buf,1,254),buf=$e(buf,255,$l(buf))
        . i $e(p1)="." s p1="."_p1
        . i $l(p1) u dev w p1,!
        u dev w $c(13,10),!
        QUIT
        ;
smtpTest        
        s server="relay.xxxx.net"
        s from="rtweed@xxxxx.com"
        s displayFrom="Rob Tweed"
        s displayTo=displayFrom
        s to="rtweed@xxxx.co.uk"
        s ccList("rtweed@yyyy.co.uk")=""
        s ccList("rtweed@zzzz.com")=""
        s message(1)="Test Message"
        s message(2)="This is line 2"
        s message(3)="And here is line 3"
        s authType="LOGIN PLAIN"
        s user="xxxxxxxxx"
        s pass="yyyyyyyyy"
        s subject="Test email 2"
        s ok=$$smtpSend(server,from,displayFrom,to,displayTo,.ccList,subject,.message,.dialog,authType,user,pass)
        QUIT
        ;
getFileInfo(path,ext,info)      ; Get list of files with specified extension
        ;
        n date,dlim,%file,%io,lineNo,ok,os,%p1,result,time,%x,%y
        ;
        k info
        s dlim="/"
        i $e(ext,1)'="." s ext="."_ext
        i $e(path,$l(path))=dlim s path=$e(path,1,$l(path)-1)
        ;
        d shellCommand("ls -l """_path_"""",.result)
        ;
        ; we now have directory listing in result array
        s lineNo=""
        f  s lineNo=$o(result(lineNo)) q:lineNo=""  d
        . s %file=result(lineNo)
        . s %p1=$P(%file," ",1)
        . i $e(%p1,1)'="d" d
        . . n %e1,%e2,%rfile,%p9,%len,%name,size
        . . s %rfile=$re(%file)
        . . s %rfile=$$replaceAll^%zewdAPI(%rfile,"  "," ")
        . . s %p9=$p(%rfile," ",1)
        . . s time=$p(%rfile," ",2)
        . . s date=$p(%rfile," ",3,4)
        . . s size=$p(%rfile," ",5)
        . . s %p9=$re(%p9)
        . . s time=$re(time)
        . . s date=$re(date)
        . . ;i $$zcvt^%zewdAPI(%p9,"l")=$$zcvt^%zewdAPI(%tofile,"l") q  ; ignore temp file
        . . i ext=".*" s info(%p9)=date_$c(1)_time_$c(1)_size q
        . . s %e1="."_$$getFileExtension^%zewdHTMLParser(%p9)
        . . i %e1'=ext q
        . . s info(%p9)=date_$c(1)_time_$c(1)_size
        QUIT
        ;
shellPipe       ; Pipe output from shell commands to scratch global
        ;
        n i,x
        ;
        k ^%mgwPipe
        ;f i=1:1:200 r x q:((i>20)&(x=""))  s ^%mgwPipe(i)=x
        f i=1:1 r x q:$zeof  s ^%mgwPipe(i)=x
        QUIT
        ;
deletePipe      
        k ^%mgwPipe
        QUIT
        ;
lockPipe        
        l +^%mgwPipe
        QUIT
        ;
unlockPipe      
        l -^%mgwPipe
        QUIT
        ;
shellCommand(command,result)    ;
        n lineNo
        s lineNo=$$shell(command,.result) QUIT
        k result
        d lockPipe
        zsystem command_" |mumps -run shellPipe^%zewdGTM"
        m result=^%mgwPipe
        d deletePipe
        d unlockPipe
        s lineNo=""
        f  s lineNo=$o(result(lineNo),-1) q:lineNo=""  q:result(lineNo)'=""  k result(lineNo)
        QUIT
        ;
fileInfo(path,info)     
        n line,temp
        k info
        s temp="temp"_$p($h,",",2)_".txt"
        i '$$fileExists^%zewdAPI(path) QUIT
        zsystem "ls -l "_path_">"_temp
        o temp:(readonly:exception="g fileDateNotExists") 
        u temp
        r line
        s info("date")=$p(line," ",6,8)
        s info("size")=$p(line," ",5)
        c temp
        s ok=$$deleteFile^%zewdAPI(temp)
        QUIT
fileDateNotExists       
        s $zt=""
        i $p($zs,",",1)=2 QUIT
        QUIT
shell(command,result)   
        n i,io,temp
        k result
        s io=$io
        s temp="temp"_$p($h,",",2)_".txt"
        zsystem command_">"_temp
        o temp:(readonly) 
        u temp:exception="g eoshell"
        f i=1:1 r result(i)
eoshell ;
        c temp
        u io
        s ok=$$deleteFile^%zewdAPI(temp)
        QUIT i-1
        ;
testGlobal()    
        s start=$h
        f i=1:1:1000 d fileInfo^%zewdAPI("/usr/php/ewdMgr/user.php",.info)
        s end=$h
        s dur=$p(end,",",2)-$p(start,",",2)
        QUIT dur
        ;
testFile()      
        s start=$h
        f i=1:1:1000 d fileInfo^%zewdGTM("/usr/php/ewdMgr/user.php",.info)
        s end=$h
        s dur=$p(end,",",2)-$p(start,",",2)
        QUIT dur
        ;
mySQL(sql,resultArray,username,password,database)
        n nlines,str
        ;
        i $g(username)="" s username="root"
        i $g(password)="" s password="1234567"
        i $g(database)="" s database="test"
        s str="mysql --xml -u "_username_" -p"_password_" "_database_" -e """_sql_""""
        s nlines=$$shell(str,.resultArray)
        QUIT nlines
        ;
encodeDate(dateString)
        n %DN,%DS
        s %DS=dateString
        d INT^%DATE
        QUIT $g(%DN)
        ;
relink ;
 s ^%zewd("relink")=1 k ^%zewd("relink","process")
 QUIT
 ;
pwd() ;
 n line,temp
 k info
 s temp="temp"_$p($h,",",2)_".txt"
 zsystem "pwd>"_temp
 o temp:(readonly:exception="g filepwdNotExists")
 u temp
 r line
 c temp
 s ok=$$deleteFile^%zewdAPI(temp)
 QUIT line
filepwdNotExists
 s $zt=""
 QUIT ""
 ;
goq(global,file,gzip)
 ;
 n io,ok,stop,q,v,x
 s global=$g(global)
 i $e(global,1)'="^" s global="^"_global
 s file=$g(file)
 i file'="" d  QUIT:'ok
 . s io=$io
 . s ok=$$openNewFile^%zewdAPI(file)
 . i ok u file
 s q="s x=$q("_global_"(""""))"
 x q
 i x="" QUIT
 s v=@x
 w x,!,v,!
 s stop=0
 f  d  q:stop
 . s q="s x=$q(@x)"
 . x q i x="" s stop=1 q
 . s v=@x
 . w x,!,v,!
 i file'="" d
 . w "***EOF***",!
 . c file u io
 . i $g(gzip)=1 d gzip(file)
 QUIT
 ;
giq(file,clearDown)
 ;
 i '$$fileExists^%zewdAPI(file) QUIT 0
 s $zt="g giqError"
 n data,global,gloRef,io,killed,ok,stop,x
 ;
 i $e(file,$l(file)-2,$l(file))=".gz" d
 . d gunzip(file)
 . s file=$p(file,".gz",1)
 s io=$io
 s ok=$$openFile^%zewdAPI(file)
 i 'ok QUIT 0
 u file
 s stop=0,killed=0
 f i=1:1 d  q:stop
 . r gloRef i gloRef="***EOF***" s stop=1 q
 . i 'killed,$g(clearDown)=1 d
 . . s global=$p(gloRef,"(",1)
 . . s x="k "_global x x
 . . s killed=1
 . r data i $ZEOF s stop=1 q
 . s @gloRef=data
 c file u io
 s $zt=""
 QUIT 1
 ;
giqError
 c file u io
 QUIT 0
 ;
openFileNotExists
 QUIT 0
 ;
uuid()
 n c,chars,chars2,i,uuid
 s uuid=""
 s chars="0123456789abcdef"
 s chars2="89ab"
 f i=1:1:36 d
 . i i=15 s uuid=uuid_4 q
 . i (i=9)!(i=14)!(i=19)!(i=24) s uuid=uuid_"-" q
 . i i=20 s c=$r(4)+1,uuid=uuid_$e(chars2,c) q
 . s c=$r(16)+1,uuid=uuid_$e(chars,c) q
 QUIT uuid
 ;
tar(infile,outfile)
 zsystem "tar -cf "_outfile_" "_infile
 QUIT
 ;
gzip(file)
 zsystem "gzip "_file
 QUIT
 ;
gunzip(file)
 zsystem "gunzip "_file
 QUIT
 ;
createTarGz(infile,outfileRootName)
 ;
 n gzname,ok,tarname
 ;
 s tarname=outfileRootName_".tar"
 s gzname=tarname_".gz"
 i $$fileExists^%zewdAPI(tarname) s ok=$$deleteFile^%zewdAPI(tarname)
 i $$fileExists^%zewdAPI(gzname) s ok=$$deleteFile^%zewdAPI(gzname)
 d tar(infile,tarname)
 d gzip(tarname)
 QUIT
 ;
zts()
 n io,line,ms,p
 s io=$io
 s p="time"
 o p:(COMMAND="echo $(date +%s.%N)":READONLY)::"PIPE"
 u p
 s ms=""
 f  r line q:$ZEOF  s ms=line
 c p
 u io
 QUIT ms
 ;
getLinuxBuild()
 n build,i,io,line,p,resp
 s io=$io
 s p="lsb"
 o p:(COMMAND="lsb_release -d":READONLY)::"PIPE"
 u p
 f i=1:1 r line q:$ZEOF  s resp(i)=line
 c p
 u io
 s build=$g(resp(1))
 s build=$p(build,":",2,100)
 s build=$tr(build,$c(9),"")
 s build=$$stripSpaces^%zewdAPI(build)
 QUIT build
 ;
install
 n default,x
 ;
 w !,"Installing/Configuring "_$$version^%zewdAPI(),!!
 w "Note: hit Esc to go back at any point",!!
install1 ;
 s default=$g(^zewd("config","applicationRootPath"))
 i default="" s default="/usr/ewdapps"
 w !,"Application Root Path ("_default_"): " r x
 i $zb=$c(27) w !," Installation aborted",!! QUIT
 i x="" s x=default w x
 s ^zewd("config","applicationRootPath")=x
 ;
install2 ;
 s default=$g(^zewd("config","routinePath","gtm"))
 i default="" s default="/usr/local/gtm/ewd/"
 w !,"Routine Path ("_default_"): " r x
 i $zb=$c(27) w ! g install1
 i x="" s x=default w x
 s ^zewd("config","routinePath","gtm")=x
 ;
install3 ; 
 s default=$g(^zewd("config","jsScriptPath","gtm","outputPath"))
 i default="" s default="/var/www/resources/"
 w !,"Javascript and CSS File Output Path ("_default_"): " r x
 i $zb=$c(27) w ! g install2
 i x="" s x=default w x
 i $e(x,$l(x))'="/" s x=x_"/"
 s ^zewd("config","jsScriptPath","gtm","outputPath")=x
 ;
install4 ; 
 s default=$g(^zewd("config","jsScriptPath","gtm","path"))
 i default="" s default="/resources/"
 w !,"Javascript and CSS File URL Path ("_default_"): " r x
 i $zb=$c(27) w ! g install3
 i x="" s x=default w x
 i $e(x,$l(x))'="/" s x=x_"/"
 s ^zewd("config","jsScriptPath","gtm","path")=x
 ;
 s ^zewd("config","backEndTechnology")="m"
 i '$d(^zewd("config","defaultFormat"))  s ^zewd("config","defaultFormat")="pretty"
 s ^zewd("config","defaultTechnology")="gtm"
 s ^zewd("config","frontEndTechnology")="gtm"
 i '$d(^zewd("config","jsScriptPath","gtm","mode")) s ^zewd("config","jsScriptPath","gtm","mode")="fixed"
 s ^zewd("config","sessionDatabase")="gtm"
 w !!,$$version^%zewdAPI()_" is configured and ready for use",!!
 QUIT
 ;
leaveAsM        ;
 ;;_zewdCompiler11.m
 ;;_zewdCompiler12.m
 ;;_zewdCompiler14.m
 ;;_zewdCompiler15.m
 ;;_zewdCompiler17.m
 ;;_zewdCompiler18.m
 ;;_zewdCompiler21.m
 ;;_zewdCompiler2.m
 ;;_zewdCompiler9.m
 ;;_zewdDemo.m
 ;;_zewdDocumentation1.m
 ;;_zewdDocumentation2.m
 ;;_zewdDocumentation3.m
 ;;_zewdDocumentation4.m
 ;;_zewdEJSCData.m
 ;;_zewdExtJSCode.m
 ;;_zewdExtJSData.m
 ;;_zewdExtJSDat2.m
 ;;_zewdExtJSData3.m
 ;;_zewdGTM.m
 ;;_zewdGTMRuntime.m
 ;;_zewdHTTP.m
 ;;_zewdLAMP1.m
 ;;_zewdMgr.m
 ;;_zewdMgr2.m
 ;;_zewdMgr3.m
 ;;_zewdMgrAjax.m
 ;;_zewdMgrAjax2.m
 ;;_zewdSlideshow.m
 ;;_zewdYUI1.m
 ;;_zewdYUI2.m
 ;;_zewdvaMgr.m
 ;;***END***

C0IEXTR
C0IEXTR ; GPL - Patient extract and  DOM PROCESSING ROUTINES ;8/29/13  17:05
 ;;0.1;Immunizations Forcasting;nopatch;noreleasedate;
 ;
 ; License Apache 2
 ; 
 ; This software was funded in part by Oroville Hospital, and was
 ; created with help from Oroville's doctors and staff.
 ;
 Q
 ;
 ; here are the types that are supported:
 ;demographics;reactions;problems;vitals;labs;meds;immunizations;observation;
 ;visits;appointments;documents;procedures;consults;flags;factors;skinTests;
 ;exams;education;insurance
 ;
GETPAT(RTN,ZPATID,ZTYP,START,STOP) ; get patient data
 N JJOHARY
 S START=$G(START) 
 S STOP=$G(STOP)
 D GET^VPRD(.JJOHARY,ZPATID,ZTYP,START,STOP)
 ;K ^TMP("MXMLDOM",$J,1)
 S JJOHDID=$$PARSE(JJOHARY,ZPATID_"-"_ZTYP)
 k RTN
 N ZDOM S ZDOM=$NA(^TMP("MXMLDOM",$J,JJOHDID))
 d domo3("RTN",,,ZDOM)
 ;D DOMO(1,"/","RTN","GIDX","GARY",,"/results/"_ZTYP_"/")
 K GIDX,GARY,@JJOHARY
 ;
 Q
 ;
GETNHIN(RTN,ZPATID,ZTYP) ; get patient data
 N JJOHARY
 D GET^JJOHPPCN(.JJOHARY,ZPATID,ZTYP)
 K ^TMP("MXMLDOM",$J,1)
 S JJOHDID=$$PARSE(JJOHARY,ZPATID_"-"_ZTYP)
 k RTN
 N ZDOM S ZDOM=$NA(^TMP("MXMLDOM",$J,JJOHDID))
 ;d domo2("RTN",ZDOM)
 d domo3("RTN",,,ZDOM)
 ;D DOMO(1,"/","RTN","GIDX","GARY",,"/results/")
 ;K GIDX,GARY,@JJOHARY
 ;
 Q
 ;
tree(where,prefix,docid,zout,zary) ; show a tree starting at a node in MXML. 
 ; node is passed by name
 ; 
 i '$d(zary) s zary="GARY"
 i '$d(@zary) s @zary=""
 i $g(prefix)="" s prefix="/" ; starting prefix
 i '$d(KBAIJOB) s KBAIJOB=$J
 n node s node=$na(^TMP("MXMLDOM",KBAIJOB,docid,where))
 n txt s txt=$$CLEAN($$ALLTXT(node))
 n g s g=prefix
 n gt s gt=prefix_"/"_@node
 n gt1 s gt1=1
 i $d(@zary@(gt)) d  ;
 . s gt1=$o(@zary@(gt,""),-1)+1
 ;i txt'="",txt'=" " d  ;
 s @zary@(gt1,gt)=txt
 s @zary@(gt,gt1)=txt
 w !,gt_" "_txt
 d oneout(zout,prefix_@node_" "_txt)
 n zi s zi=""
 f  s zi=$o(@node@("A",zi)) q:zi=""  d  ;
 . s @zary@(gt1,g,@node_"@"_zi)=$g(@node@("A",zi))
 . w !,prefix_"/"_@node_"@"_zi_"="_$g(@node@("A",zi))
 . d oneout(zout,prefix_"/"_@node_"@"_zi_"="_$g(@node@("A",zi)))
 f  s zi=$o(@node@("C",zi)) q:zi=""  d  ;
 . d tree(zi,prefix_"/"_@node,docid,zout)
 q
 ;
domo3(zary,what,where,zdom,lvl) ; simplified domo
 ; zary is the return array
 ; what is the tag to begin with starting at where, a node in the zdom
 ; multiple is the index to be used for a muliple entry 0 is a singleton
 ; 
 i '$d(zdom) s zdom=$na(^TMP("MXMLDOM",$J,$o(^TMP("MXMLDOM",$J,"AAAAA"),-1)))
 i '$d(where) s where=1
 i $g(what)="" s what=@zdom@(where)
 i '$d(lvl) s lvl=0 n znum s znum=0 ; first time
 ;
 n txt s txt=$$CLEAN($$ALLTXT($NA(@zdom@(where))))
 i txt'="" i txt'=" " d  ;
 . s @zary@(@zdom@(where))=txt
 ;
 n zi s zi=""
 f  s zi=$o(@zdom@(where,"A",zi)) q:zi=""  d  ;
 . s @zary@(what_"@"_zi)=@zdom@(where,"A",zi)
 f  s zi=$o(@zdom@(where,"C",zi)) q:zi=""  d  ;
 . n mult s mult=$$ismult(where,zdom)
 . ;i '$d(znum) n znum s znum(where)=0
 . i mult>0 s znum(where)=$g(znum(where))+1
 . i $g(C0DEBUG) i mult>0 D  ;
 . . w !,"where ",where," what ",what," zi ",zi," lvl ",lvl,!
 . . zwr znum
 . i mult=0 d domo3($na(@zary@(what)),@zdom@(where,"C",zi),zi,zdom,lvl+1)
 . i mult>0 d domo3($na(@zary@(what,znum(where))),@zdom@(where,"C",zi),zi,zdom,lvl+1)
 q
 ;
ismult(zidx,zdom) ; extrinsic which returns one if the node contains multiple
 ; children with the same tag
 n ztags,zzi,zj,rtn s zzi="" s rtn=0
 f  s zzi=$o(@zdom@(zidx,"C",zzi)) q:rtn=1  q:zzi=""  d  ;
 . s zj=@zdom@(zidx,"C",zzi)
 . i $d(ztags(zj)) s rtn=1
 . s ztags(zj)=""
 q rtn
 ;
testmult ;
 n zdom
 s zdom=$na(^TMP("MXMLDOM",$J,1))
 n gi,gj s gi=""
 f  s gi=$o(@zdom@(gi)) q:gi=""  d  ;
 . i $$ismult(gi,zdom) b  ;
 q
 ;
findnxt(tag,znd) ; private extrinsic which returns a node id of tag
 i '$d(zdom) s zdom=$na(^TMP("MXMLDOM",$J,$o(^TMP("MXMLDOM",$J,"AAAAA"),-1)))
 ;i @zdom@(znd)=tag q znd ; easy case
 n gi,done,rslt s gi="" s done=0
 f  s gi=$o(@zdom@(znd,"C",gi)) q:done  q:gi=""  d  ;
 . i @zdom@(znd,"C",gi)=tag s done=1 s rslt=gi
 q:done rslt
 f  s gi=$o(@zdom@(znd,"C",gi)) q:done  q:gi=""  d  ;
 . s rslt=$$findnxt(tag,gi)
 . i rslt'="" s done=1
 q:done rslt
 ;i $d(@zdom@(znd,"P")) d  ;
 ;. s rslt=$$findnxt(tag,@zdom@(znd,"P")) ; check the parent if any
 q rslt
 ;
oneout(zbuf,ztxt) ; adds a line to zbuf
 n zi s zi=$o(@zbuf@(""),-1)+1
 s @zbuf@(zi)=ztxt
 q
 ;
ALLTXT(where)   ; extrinsic which returns all text lines from the node .. concatinated 
 ; together
 n zti s zti=""
 n ztr s ztr=""
 f  s zti=$o(@where@("T",zti)) q:zti=""  d  ;
 . s ztr=ztr_$g(@where@("T",zti))
 q ztr
 ;
CLEAN(STR)      ; extrinsic function; returns string - gpl borrowed from the CCR package
 ;; Removes all non printable characters from a string.
 ;; STR by Value
 N TR,I
 F I=0:1:31 S TR=$G(TR)_$C(I)
 S TR=TR_$C(127)
 N ZR S ZR=$TR(STR,TR)
 S ZR=$$LDBLNKS(ZR) ; get rid of leading blanks
 QUIT ZR
 ;
LDBLNKS(st)     ; extrinsic which removes leading blanks from a string
 n pos f pos=1:1:$l(st)  q:$e(st,pos)'=" "
 q $e(st,pos,$l(st))
 ;
TEST ;
 S GDOM=$NA(^KBAI("TOOBIG","DOM"))
 K ^TMP("MXMLDOM",$J)
 M ^TMP("MXMLDOM",$J,1)=@GDOM
 K GARY,GIDX,GNARY
 S JJOHDID=1
 ;D DOMO(1,"/","GNARY","GIDX","GARY",,"/results/")
 K G,GARY
 ;d domo2("GARY",,"..results.")
 d domo3("GARY")
 Q
 ;
ADDNARY(ZXP,ZVALUE) ; ADD AN NHIN ARRAY VALUE TO ZNARY
 ;
 ; IF ZATT=1 THE ARRAY IS ADDED AS ATTRIBUTES
 ;
 N ZZI,ZZJ,ZZN
 S ZZI=$P(ZXP,"/",1) ; FIRST PIECE OF XPATH ARRAY
 I ZZI="" Q  ; DON'T ADD THIS ONE .. PROBABLY THE //results NODE
 S ZZJ=$P(ZXP,ZZI_"/",2) ; REST OF XPATH ARRAY
 S ZZJ=$TR(ZZJ,"/",".") ; REPLACE / WITH .
 I ZZI'["]" D  ; A SINGLETON
 . S ZZN=1
 E  D  ; THERE IS AN [x] OCCURANCE
 . S ZZN=$P($P(ZZI,"[",2),"]",1) ; PULL OUT THE OCCURANCE
 . S ZZI=$P(ZZI,"[",1) ; TAKE OUT THE [X]
 I ZZJ'="" D  ; TIME TO ADD THE VALUE
 . S @ZNARY@(ZZI,ZZN,ZZJ)=ZVALUE
 Q
 ;
PARSE(INXML,INDOC) ;CALL THE MXML PARSER ON INXML, PASSED BY NAME
 ; INDOC IS PASSED AS THE DOCUMENT NAME - DON'T KNOW WHERE TO STORE THIS NOW
 ; EXTRINSIC WHICH RETURNS THE DOCID ASSIGNED BY MXML
 ;Q $$EN^MXMLDOM(INXML)
 Q $$EN^MXMLDOM(INXML,"W")
 ;
ISMULT(ZOID) ; RETURN TRUE IF ZOID IS ONE OF A MULTIPLE
 N ZN
 ;I $$TAG(ZOID)["entry" B
 S ZN=$$NXTSIB(ZOID)
 I ZN'="" Q $$TAG(ZOID)=$$TAG(ZN) ; IF TAG IS THE SAME AS NEXT SIB TAG
 Q 0
 ;
FIRST(ZOID) ;RETURNS THE OID OF THE FIRST CHILD OF ZOID
 Q $$CHILD^MXMLDOM(JJOHDID,ZOID)
 ;
PARENT(ZOID) ;RETURNS THE OID OF THE PARENT OF ZOID
 Q $$PARENT^MXMLDOM(JJOHDID,ZOID)
 ;
ATT(RTN,NODE) ;GET ATTRIBUTES FOR ZOID
 S HANDLE=JJOHDID
 K @RTN
 D GETTXT^MXMLDOM("A")
 Q
 ;
TAG(ZOID) ; RETURNS THE XML TAG FOR THE NODE
 ;
 N X,Y
 S Y=""
 S X=$G(JJOHCBK("TAG")) ;IS THERE A CALLBACK FOR THIS ROUTINE
 I X'="" X X ; EXECUTE THE CALLBACK, SHOULD SET Y
 I Y="" S Y=$$NAME^MXMLDOM(JJOHDID,ZOID)
 Q Y
 ;
NXTSIB(ZOID) ; RETURNS THE NEXT SIBLING
 Q $$SIBLING^MXMLDOM(JJOHDID,ZOID)
 ;
DATA(ZT,ZOID) ; RETURNS DATA FOR THE NODE
 ;N ZT,ZN S ZT=""
 ;S C0SDOM=$NA(^TMP("MXMLDOM",$J,JJOHDID))
 ;Q $G(@C0SDOM@(ZOID,"T",1))
 S ZN=$$TEXT^MXMLDOM(JJOHDID,ZOID,ZT)
 Q
 ;
DEMUX2(OARY,IARY,DEPTH) ;CONVERT AN XPATH ARRAY PASSED AS IARY TO
 ; FORMAT @OARY@(x,variablename) where x is the first multiple
 ; IF DEPTH=2, THE LAST 2 PARTS OF THE XPATH WILL BE USED
 N ZI,ZJ,ZK,ZL,ZM S ZI=""
 F  S ZI=$O(@IARY@(ZI)) Q:ZI=""  D  ;
 . D DEMUX^C0CMXP("ZJ",ZI)
 . S ZK=$P(ZJ,"^",3)
 . S ZM=$RE($P($RE(ZK),"/",1))
 . I $G(DEPTH)=2 D  ;LAST TWO PARTS OF XPATH USED FOR THE VARIABLE NAME
 . . S ZM=$RE($P($RE(ZK),"/",2))_"."_ZM
 . S ZL=$P(ZJ,"^",1)
 . I ZL="" S ZL=1
 . I $D(@OARY@(ZL,ZM)) D  ;IT'S A DUP
 . . S @OARY@(ZL,ZM_"[2]")=@IARY@(ZI)
 . E  S @OARY@(ZL,ZM)=@IARY@(ZI)
 Q
 ;

C0IICE
C0IICE  ; GPL/NEA - ICE main routines ; 4/24/14 6:03pm
 ;;0.1;C0I IMMUNIZATION FORECASTINE;nopatch;noreleasedate;
 ;Copyright 2013 George Lilly.  Licensed Apache 2
 ;
 Q
 ;
 ;EN(RTN,DFN,PARMS) ;
 ;K WRK
 ;D CPTMAP^C0ITEST
 ;D CVXMAP^C0ITEST
 ;D CPTIMAP^C0ITEST
 ;D CVXIMAP^C0ITEST
 ;D PAYOUTAV^C0ITEST
 ;D PAYOUTBV^C0ITEST
 ;D GET^C0IUTIL("WRK","TPAYOUTC^C0ITEST")
 ;D PAYOUTDV^C0ITEST
 ;D GET^C0IUTIL("WRK","TPAYOUTE^C0ITEST")
 ;K WRK(0)
EN(RETURN,DFN,PARMS,C0IEVAL) ;
 N WRK
 D EN^C0IVMR(.WRK,DFN,.PARMS,.C0IEVAL)
 N ICEIN
 S ICEIN=$NA(^TMP("C0IWRK",$J))
 K @ICEIN
 M @ICEIN=WRK
 N OK
 S OK=$$GTF^%ZISH($NA(^TMP("C0IWRK",$J,1)),3,"/home/vista/immu-log/",$$FMDTOUTC^JJOHPPCU($$NOW^XLFDT)_"ice-test.xml")
 ;N PARMS
 S PARMS("payload")=ICEIN
 D SOAP^C0ISOAP3(.RETURN,.PARMS)
 Q
 ;
ICE  ;
 N DFN
 S DFN=$$PAT()
 N PARMS
 S PARMS("format")="outline"
 D EN("RETURN",DFN,.PARMS)
 N GN S GN=$NA(^TMP("ICE",$J,"RETURN"))
 ;d listm^C0IUTIL(GN,"RETURN")
 M @GN=RETURN
 I $G(USEBROWSER) D BROWSE^DDBR(GN,"N","PATIENT "_DFN_" Immunization Forecast")
 Q
 ; 
PAT() ; extrinsic which returns a dfn from the patient selected
 S DIC=2,DIC(0)="AEMQ" D ^DIC
 I Y<1 Q  ; EXIT
 S DFN=$P(Y,U,1) ; SET THE PATIENT
 Q +Y
 ;
wsICE(OUT,FILTER) ; get from web service call
 I '$D(DT) N DIQUIET S DIQUIET=1 D DT^DICRW
 N DFN
 S DFN=$G(FILTER("patientId"))
 I DFN="" Q  ; 
 I $G(FILTER("format"))="" S FILTER("format")="report"
 S OUT=$NA(^TMP("ICEOUT",$J,"RETURN"))
 I $G(FILTER("format"))="xml" S HTTPRSP("mime")="text/xml"
 E   S HTTPRSP("mime")="text/html"
 ;W !,"<!DOCTYPE HTML><html><head></head><body><pre>"
 N C0IVMR ; reminder results brought forward to interpret ICE return
 D EN^C0IICE("GPL",DFN,.FILTER,.C0IVMR)
 I $G(FILTER("format"))="global" d listm^C0IUTIL(OUT,"GPL")
 I $G(FILTER("format"))="simple" d  ;
 . n RETURN
 . d peel^C0IUTIL("RETURN","GPL")
 . d listm^C0IUTIL(OUT,"RETURN")
 I $G(FILTER("format"))="report" D  ;
 . k HTTPRSP("header")
 . n RETURN
 . M RETURN=C0IVMR
 . d peel^C0IUTIL("RETURN","GPL")
 . D DEMHTML(OUT,"RETURN")
 . D ADDTO^C0IUTIL(OUT,"<hr>")
 . I $D(RETURN("observationResults"))!$D(RETURN("observationResult")) D  ;
 . . I '$D(RETURN("observationResults",1)) D  ;
 . . . M RETURN("observationResults",1)=RETURN("observationResult")
 . . D DISHTML(OUT,"RETURN")
 . . D ADDTO^C0IUTIL(OUT,"<hr>")
 . D HISHTML(OUT,"RETURN")
 . D ADDTO^C0IUTIL(OUT,"<hr>")
 . D PROHTML(OUT,"RETURN")
 . I $G(FILTER("debug"))=1 d  ;
 . . D ADDTO^C0IUTIL(OUT,"<pre>")
 . . d listm^C0IUTIL(OUT,"RETURN")
 . . D ADDTO^C0IUTIL(OUT,"</pre>")
 . K @OUT@(0)
 ;E  M @OUT=GPL
 I $G(FILTER("format"))="outline" M @OUT=GPL
 I $G(FILTER("format"))="xml" M @OUT=GPL
 I $G(FILTER("format"))'="xml" D  ;
 . N GTOP,GBOT
 . S GTOP="<!DOCTYPE HTML><html><head></head><body>"
 . I $G(FILTER("format"))="outline" S GTOP=GTOP_"<pre>"
 . I $G(FILTER("format"))="global" S GTOP=GTOP_"<pre>"
 . I $G(FILTER("format"))="simple" S GTOP=GTOP_"<pre>"
 . S @OUT=GTOP
 . S GBOT="</body></html>"
 . I $G(FILTER("format"))="outline" S GBOT="</pre>"_GBOT
 . I $G(FILTER("format"))="global" S GBOT="</pre>"_GBOT
 . I $G(FILTER("format"))="simple" S GBOT="</pre>"_GBOT
 . S @OUT@($O(@OUT@(""),-1)+1)=GBOT
 . D ADDCRLF^VPRJRUT(.OUT)
 ;W "</pre></body></html>"
 q
 ;
TEST ;
 S PARM("format")="xml"
 S PARM("patientId")=11
 d wsICE^C0IICE(.GG,.PARM)
 ZWR GG
 Q
 ;
DISHTML(RTN,ARY) ; generate an html file with tables from the return array. 
 ; both passed by name - disease documentation
 N GARY
 S GARY("TITLE")="ICE Return - Disease Documentation"
 S GARY("HEADER",1)="Date"
 S GARY("HEADER",2)="ICE Return Disease"
 S GARY("HEADER",3)="Interpretation"
 S GARY("HEADER",4)="VistA Recorded Disease"
 S GARY("HEADER",5)="VistA Recorded Date Of Onset"
 S GARY("HEADER",6)="Date of Entry"
 S GARY("HEADER",7)="Source"
 S GARY("HEADER",8)="Number"
 N GN S GN=$NA(@ARY@("observationResults"))
 N GF S GF=$NA(@ARY@("findings"))
 N ZI S ZI=""
 F  S ZI=$O(@GN@(ZI)) Q:ZI=""  D  ;
 . N RCODE S RCODE=$G(@GN@(ZI,"observationFocus@code"))
 . N FREF
 . S FREF=$O(@GF@("rubric",RCODE,""))
 . I +FREF>0 D  ;
 . . S GARY(ZI,4)=$G(@GF@(FREF,"ICD9Name"))_" ("_$G(@GF@(FREF,"ICD9Code"))_")"
 . . S GARY(ZI,5)=$$HTMLDT2^C0IUTIL($G(@GF@(FREF,"dateOfOnset")))
 . . S GARY(ZI,6)=$$HTMLDT2^C0IUTIL($G(@GF@(FREF,"date")))
 . . S GARY(ZI,7)=$G(@GF@(FREF,"primaryProviderName"))
 . . I GARY(ZI,7)="" I $G(@GF@(FREF,"FILE NUMBER"))=9000011 S GARY(ZI,7)="Problem List"
 . N C0IDATE S C0IDATE=$G(@GN@(ZI,"observationEventTime@high"))
 . I C0IDATE="" S C0IDATE=$G(@GN@(ZI,"observationEventTime@low"))
 . ;S GARY(ZI,1)=$$HTMLDT2^C0IUTIL(C0IDATE)
 . S GARY(ZI,1)=$E(C0IDATE,5,6)_"/"_$E(C0IDATE,7,8)_"/"_$E(C0IDATE,1,4)
 . ;S GARY(ZI,2)=$G(@GN@(ZI,"observationFocus@displayName"))
 . I $L(RCODE)=1 S RCODE="0"_CODE
 . S GARY(ZI,2)=$G(@GN@(ZI,"observationFocus@displayName"))_" ("_RCODE_")"
 . S GARY(ZI,3)=$G(@GN@(ZI,"interpretation@displayName"))
 . S GARY(ZI,8)=ZI
 D GENHTML^C0IUTIL(RTN,"GARY")
 K @RTN@(0)
 Q
 ;
HISHTML(RTN,ARY) ; generate an html file with tables from the return array. 
 ; both passed by name
 N GARY
 S GARY("TITLE")="ICE Return - Vaccination History"
 S GARY("HEADER",1)="Date"
 S GARY("HEADER",2)="VistA Vaccine Name"
 S GARY("HEADER",3)="Vaccine (CVX)"
 S GARY("HEADER",4)="Vaccine Group (Group Code)"
 S GARY("HEADER",5)="Dose Number"
 S GARY("HEADER",6)="Validity (isValid)"
 S GARY("HEADER",7)="Interpretation"
 S GARY("HEADER",8)="Number"
 N GN S GN=$NA(@ARY@("Events"))
 N ZI S ZI=""
 F  S ZI=$O(@GN@(ZI)) Q:ZI=""  D  ;
 . N C0IDATE S C0IDATE=$G(@GN@(ZI,"administrationTimeInterval@high"))
 . I C0IDATE="" S C0IDATE=$G(@GN@(ZI,"administrationTimeInterval@low"))
 . ;S GARY(ZI,1)=$$HTMLDT^C0IUTIL(C0IDATE)
 . S GARY(ZI,1)=$E(C0IDATE,5,6)_"/"_$E(C0IDATE,7,8)_"/"_$E(C0IDATE,1,4)
 . S GARY(ZI,2)=$G(@GN@(ZI,"substanceCode@originalText"))
 . N CODE S CODE=$G(@GN@(ZI,"substanceCode@code"))
 . I $L(CODE)=1 S CODE="0"_CODE
 . S CODE="<a href=""https://raw.githubusercontent.com/glilly/ice-testing/master/trunk/ice-config/Vaccines/"_CODE_".xml"" target=""_blank"">"_CODE_"</a>"
 . S GARY(ZI,3)=$G(@GN@(ZI,"substanceCode@displayName"))_" ("_CODE_")"
 . N GCODE S GCODE=$G(@GN@(ZI,"observationFocus@code"))
 . S GCODE="<a href=""https://raw.githubusercontent.com/glilly/ice-testing/master/trunk/ice-config/VaccineGroups/"_GCODE_".xml"" target=""_blank"">"_GCODE_"</a>"
 . N GGRP S GGRP=$G(@GN@(ZI,"observationFocus@displayName"))
 . S GGRP=$P($P(GGRP,"(",2),")",1)
 . S GARY(ZI,4)=GGRP_" ("_GCODE_")"
 . S GARY(ZI,5)=$G(@GN@(ZI,"doseNumber@value"))
 . N ISVALID S ISVALID=$G(@GN@(ZI,"isValid@value"))
 . S GARY(ZI,6)=$G(@GN@(ZI,"concept@displayName"))_" ("_ISVALID_")"
 . S GARY(ZI,7)=$G(@GN@(ZI,"interpretation@displayName"))
 . S GARY(ZI,8)=ZI
 D GENHTML^C0IUTIL(RTN,"GARY")
 K @RTN@(0)
 Q
 ;
PROHTML(RTN,ARY) ; generate a proposed vaccination html table from the return array. 
 ; both passed by name
 N GARY
 S GARY("TITLE")="ICE Return - Proposed Vaccinations"
 S GARY("HEADER",1)="Proposed Date"
 S GARY("HEADER",2)="Vaccine Group (Group Code)"
 S GARY("HEADER",3)="Recommendation"
 S GARY("HEADER",4)="Interpretation"
 S GARY("HEADER",5)="Number"
 N GN S GN=$NA(@ARY@("Proposals"))
 N ZI S ZI=""
 F  S ZI=$O(@GN@(ZI)) Q:ZI=""  D  ;
 . N C0IDATE S C0IDATE=$G(@GN@(ZI,"proposedAdministrationTimeInterval@high"))
 . I C0IDATE="" S C0IDATE=$G(@GN@(ZI,"proposedAdministrationTimeInterval@low"))
 . ;S GARY(ZI,1)=$$HTMLDT^C0IUTIL(C0IDATE)
 . S GARY(ZI,1)=$E(C0IDATE,5,6)_"/"_$E(C0IDATE,7,8)_"/"_$E(C0IDATE,1,4)
 . N CODE S CODE=$G(@GN@(ZI,"substanceCode@code"))
 . I $L(CODE)=1 S CODE="0"_CODE
 . N GGRP S GGRP=$G(@GN@(ZI,"substanceCode@displayName"))
 . S GGRP=$P($P(GGRP,"(",2),")",1)
 . S CODE="<a href=""https://raw.githubusercontent.com/glilly/ice-testing/master/trunk/ice-config/VaccineGroups/"_CODE_".xml"" target=""_blank"">"_CODE_"</a>"
 . S GARY(ZI,2)=GGRP_" ("_CODE_")"
 . S GARY(ZI,3)=$G(@GN@(ZI,"concept@displayName"))
 . N TERP S TERP=$G(@GN@(ZI,"interpretation@code"))
 . S GARY(ZI,4)=$G(@GN@(ZI,"interpretation@displayName"))_" ("_TERP_")"
 . S GARY(ZI,5)=ZI
 D GENHTML^C0IUTIL(RTN,"GARY")
 K @RTN@(0)
 Q
 ;
DEMHTML(RTN,ARY) ; generate an html demographics table from the return array. 
 ; both passed by name
 N GARY
 S GARY("TITLE")="ICE Return - Demographics"
 S GARY("HEADER",1)="Date of Birth"
 S GARY("HEADER",2)="Gender"
 S GARY("HEADER",3)="Patient ID"
 N C0IDATE S C0IDATE=$G(@ARY@("demographics","birthTime@value"))
 S GARY(1,1)=$E(C0IDATE,5,6)_"/"_$E(C0IDATE,7,8)_"/"_$E(C0IDATE,1,4)
 S GARY(2,1)=$G(@ARY@("demographics","gender@displayName"))
 S GARY(3,1)=$G(FILTER("patientId"))
 D GENVHTML^C0IUTIL(RTN,"GARY")
 K @RTN@(0)
 Q
 ;

C0IICE2
C0IICE  ; GPL/NEA - ICE main routines ; 4/24/14 6:03pm
 ;;0.1;C0I IMMUNIZATION FORECASTINE;nopatch;noreleasedate;
 ;Copyright 2013 George Lilly.  Licensed Apache 2
 ;
 Q
 ;
 ;EN(RTN,DFN,PARMS) ;
 ;K WRK
 ;D CPTMAP^C0ITEST
 ;D CVXMAP^C0ITEST
 ;D CPTIMAP^C0ITEST
 ;D CVXIMAP^C0ITEST
 ;D PAYOUTAV^C0ITEST
 ;D PAYOUTBV^C0ITEST
 ;D GET^C0IUTIL("WRK","TPAYOUTC^C0ITEST")
 ;D PAYOUTDV^C0ITEST
 ;D GET^C0IUTIL("WRK","TPAYOUTE^C0ITEST")
 ;K WRK(0)
EN(RTN,DFN,PARMS) ;
 N WRK
 D EN^C0ITEST(.WRK,DFN,.PARMS)
 N ICEIN
 S ICEIN=$NA(^TMP("C0IWRK",$J))
 K @ICEIN
 M @ICEIN=WRK
 N OK
 S OK=$$GTF^%ZISH($NA(^TMP("C0IWRK",$J,1)),3,"/home/vista/immu-log/",$$FMDTOUTC^JJOHPPCU($$NOW^XLFDT)_"ice-test.xml")
 ;N PARMS
 S PARMS("payload")=ICEIN
 D SOAP^C0ISOAP3(.RTN,.PARMS)
 Q
 ;
ICE  ;
 N DFN
 S DFN=$$PAT()
 N PARMS
 S PARMS("format")="outline"
 D EN("RETURN",DFN,.PARMS)
 N GN S GN=$NA(^TMP("ICE",$J,"RETURN"))
 ;d listm^C0IUTIL(GN,"RETURN")
 M @GN=RETURN
 I $G(USEBROWSER) D BROWSE^DDBR(GN,"N","PATIENT "_DFN_" Immunization Forecast")
 Q
 ; 
PAT() ; extrinsic which returns a dfn from the patient selected
 S DIC=2,DIC(0)="AEMQ" D ^DIC
 I Y<1 Q  ; EXIT
 S DFN=$P(Y,U,1) ; SET THE PATIENT
 Q +Y
 ;
wsICE(OUT,FILTER) ; get from web service call
 I '$D(DT) N DIQUIET S DIQUIET=1 D DT^DICRW
 N DFN
 S DFN=$G(FILTER("patientId"))
 I DFN="" Q  ; 
 I $G(FILTER("format"))="" S FILTER("format")="report"
 S OUT=$NA(^TMP("ICEOUT",$J,"RETURN"))
 I $G(FILTER("format"))="xml" S HTTPRSP("mime")="text/xml"
 E   S HTTPRSP("mime")="text/html"
 ;W !,"<!DOCTYPE HTML><html><head></head><body><pre>"
 D EN^C0IICE("GPL",DFN,.FILTER)
 I $G(FILTER("format"))="global" d listm^C0IUTIL(OUT,"GPL")
 I $G(FILTER("format"))="simple" d  ;
 . n RETURN
 . d peel^C0IUTIL("RETURN","GPL")
 . d listm^C0IUTIL(OUT,"RETURN")
 I $G(FILTER("format"))="report" D  ;
 . k HTTPRSP("header")
 . n RETURN
 . d peel^C0IUTIL("RETURN","GPL")
 . D DEMHTML(OUT,"RETURN")
 . D ADDTO^C0IUTIL(OUT,"<hr>")
 . I $D(RETURN("observationResults")) D  ;
 . . D DISHTML(OUT,"RETURN")
 . . D ADDTO^C0IUTIL(OUT,"<hr>")
 . D HISHTML(OUT,"RETURN")
 . D ADDTO^C0IUTIL(OUT,"<hr>")
 . D PROHTML(OUT,"RETURN")
 . I $G(FILTER("debug"))=1 d  ;
 . . D ADDTO^C0IUTIL(OUT,"<pre>")
 . . d listm^C0IUTIL(OUT,"RETURN")
 . . D ADDTO^C0IUTIL(OUT,"</pre>")
 . K @OUT@(0)
 ;E  M @OUT=GPL
 I $G(FILTER("format"))="outline" M @OUT=GPL
 I $G(FILTER("format"))="xml" M @OUT=GPL
 I $G(FILTER("format"))'="xml" D  ;
 . N GTOP,GBOT
 . S GTOP="<!DOCTYPE HTML><html><head></head><body>"
 . I $G(FILTER("format"))="outline" S GTOP=GTOP_"<pre>"
 . I $G(FILTER("format"))="global" S GTOP=GTOP_"<pre>"
 . I $G(FILTER("format"))="simple" S GTOP=GTOP_"<pre>"
 . S @OUT=GTOP
 . S GBOT="</body></html>"
 . I $G(FILTER("format"))="outline" S GBOT="</pre>"_GBOT
 . I $G(FILTER("format"))="global" S GBOT="</pre>"_GBOT
 . I $G(FILTER("format"))="simple" S GBOT="</pre>"_GBOT
 . S @OUT@($O(@OUT@(""),-1)+1)=GBOT
 . D ADDCRLF^VPRJRUT(.OUT)
 ;W "</pre></body></html>"
 q
 ;
TEST ;
 S PARM("format")="xml"
 S PARM("patientId")=11
 d wsICE^C0IICE(.GG,.PARM)
 ZWR GG
 Q
 ;
DISHTML(RTN,ARY) ; generate an html file with tables from the return array. 
 ; both passed by name - disease documentation
 N GARY
 S GARY("TITLE")="ICE Return - Disease Documentation"
 S GARY("HEADER",1)="Date"
 S GARY("HEADER",2)="Disease"
 S GARY("HEADER",3)="Interpretation"
 S GARY("HEADER",4)="Number"
 N GN S GN=$NA(@ARY@("observationResults"))
 N ZI S ZI=""
 F  S ZI=$O(@GN@(ZI)) Q:ZI=""  D  ;
 . N C0IDATE S C0IDATE=$G(@GN@(ZI,"observationEventTime@high"))
 . I C0IDATE="" S C0IDATE=$G(@GN@(ZI,"observationEventTime@low"))
 . ;S GARY(ZI,1)=$$HTMLDT^C0IUTIL(C0IDATE)
 . S GARY(ZI,1)=$E(C0IDATE,5,6)_"/"_$E(C0IDATE,7,8)_"/"_$E(C0IDATE,1,4)
 . ;S GARY(ZI,2)=$G(@GN@(ZI,"observationFocus@displayName"))
 . N CODE S CODE=$G(@GN@(ZI,"observationFocus@code"))
 . I $L(CODE)=1 S CODE="0"_CODE
 . S GARY(ZI,2)=$G(@GN@(ZI,"observationFocus@displayName"))_" ("_CODE_")"
 . S GARY(ZI,3)=$G(@GN@(ZI,"interpretation@displayName"))
 . S GARY(ZI,4)=ZI
 D GENHTML^C0IUTIL(RTN,"GARY")
 K @RTN@(0)
 Q
 ;
HISHTML(RTN,ARY) ; generate an html file with tables from the return array. 
 ; both passed by name
 N GARY
 S GARY("TITLE")="ICE Return - Vaccination History"
 S GARY("HEADER",1)="Date"
 S GARY("HEADER",2)="VistA Vaccine Name"
 S GARY("HEADER",3)="Vaccine (CVX)"
 S GARY("HEADER",4)="Vaccine Group (Group Code)"
 S GARY("HEADER",5)="Dose Number"
 S GARY("HEADER",6)="Validity (isValid)"
 S GARY("HEADER",7)="Interpretation"
 S GARY("HEADER",8)="Number"
 N GN S GN=$NA(@ARY@("Events"))
 N ZI S ZI=""
 F  S ZI=$O(@GN@(ZI)) Q:ZI=""  D  ;
 . N C0IDATE S C0IDATE=$G(@GN@(ZI,"administrationTimeInterval@high"))
 . I C0IDATE="" S C0IDATE=$G(@GN@(ZI,"administrationTimeInterval@low"))
 . ;S GARY(ZI,1)=$$HTMLDT^C0IUTIL(C0IDATE)
 . S GARY(ZI,1)=$E(C0IDATE,5,6)_"/"_$E(C0IDATE,7,8)_"/"_$E(C0IDATE,1,4)
 . S GARY(ZI,2)=$G(@GN@(ZI,"substanceCode@originalText"))
 . N CODE S CODE=$G(@GN@(ZI,"substanceCode@code"))
 . I $L(CODE)=1 S CODE="0"_CODE
 . S CODE="<a href=""https://raw.githubusercontent.com/glilly/ice-testing/master/trunk/ice-config/Vaccines/"_CODE_".xml"" target=""_blank"">"_CODE_"</a>"
 . S GARY(ZI,3)=$G(@GN@(ZI,"substanceCode@displayName"))_" ("_CODE_")"
 . N GCODE S GCODE=$G(@GN@(ZI,"observationFocus@code"))
 . S GCODE="<a href=""https://raw.githubusercontent.com/glilly/ice-testing/master/trunk/ice-config/VaccineGroups/"_GCODE_".xml"" target=""_blank"">"_GCODE_"</a>"
 . N GGRP S GGRP=$G(@GN@(ZI,"observationFocus@displayName"))
 . S GGRP=$P($P(GGRP,"(",2),")",1)
 . S GARY(ZI,4)=GGRP_" ("_GCODE_")"
 . S GARY(ZI,5)=$G(@GN@(ZI,"doseNumber@value"))
 . N ISVALID S ISVALID=$G(@GN@(ZI,"isValid@value"))
 . S GARY(ZI,6)=$G(@GN@(ZI,"concept@displayName"))_" ("_ISVALID_")"
 . S GARY(ZI,7)=$G(@GN@(ZI,"interpretation@displayName"))
 . S GARY(ZI,8)=ZI
 D GENHTML^C0IUTIL(RTN,"GARY")
 K @RTN@(0)
 Q
 ;
PROHTML(RTN,ARY) ; generate a proposed vaccination html table from the return array. 
 ; both passed by name
 N GARY
 S GARY("TITLE")="ICE Return - Proposed Vaccinations"
 S GARY("HEADER",1)="Proposed Date"
 S GARY("HEADER",2)="Vaccine Group (Group Code)"
 S GARY("HEADER",3)="Recommendation"
 S GARY("HEADER",4)="Interpretation"
 S GARY("HEADER",5)="Number"
 N GN S GN=$NA(@ARY@("Proposals"))
 N ZI S ZI=""
 F  S ZI=$O(@GN@(ZI)) Q:ZI=""  D  ;
 . N C0IDATE S C0IDATE=$G(@GN@(ZI,"proposedAdministrationTimeInterval@high"))
 . I C0IDATE="" S C0IDATE=$G(@GN@(ZI,"proposedAdministrationTimeInterval@low"))
 . ;S GARY(ZI,1)=$$HTMLDT^C0IUTIL(C0IDATE)
 . S GARY(ZI,1)=$E(C0IDATE,5,6)_"/"_$E(C0IDATE,7,8)_"/"_$E(C0IDATE,1,4)
 . N CODE S CODE=$G(@GN@(ZI,"substanceCode@code"))
 . I $L(CODE)=1 S CODE="0"_CODE
 . N GGRP S GGRP=$G(@GN@(ZI,"substanceCode@displayName"))
 . S GGRP=$P($P(GGRP,"(",2),")",1)
 . S CODE="<a href=""https://raw.githubusercontent.com/glilly/ice-testing/master/trunk/ice-config/VaccineGroups/"_CODE_".xml"" target=""_blank"">"_CODE_"</a>"
 . S GARY(ZI,2)=GGRP_" ("_CODE_")"
 . S GARY(ZI,3)=$G(@GN@(ZI,"concept@displayName"))
 . N TERP S TERP=$G(@GN@(ZI,"interpretation@code"))
 . S GARY(ZI,4)=$G(@GN@(ZI,"interpretation@displayName"))_" ("_TERP_")"
 . S GARY(ZI,5)=ZI
 D GENHTML^C0IUTIL(RTN,"GARY")
 K @RTN@(0)
 Q
 ;
DEMHTML(RTN,ARY) ; generate an html demographics table from the return array. 
 ; both passed by name
 N GARY
 S GARY("TITLE")="ICE Return - Demographics"
 S GARY("HEADER",1)="Date of Birth"
 S GARY("HEADER",2)="Gender"
 S GARY("HEADER",3)="Patient ID"
 N C0IDATE S C0IDATE=$G(@ARY@("demographics","birthTime@value"))
 S GARY(1,1)=$E(C0IDATE,5,6)_"/"_$E(C0IDATE,7,8)_"/"_$E(C0IDATE,1,4)
 S GARY(2,1)=$G(@ARY@("demographics","gender@displayName"))
 S GARY(3,1)=$G(FILTER("patientId"))
 D GENVHTML^C0IUTIL(RTN,"GARY")
 K @RTN@(0)
 Q
 ;

C0IMAP
C0IMAP ; GPL&NEA - Immunizations Forecasting Routine ;05/03/14  17:05
 ;;0.1;Immunizations Forecasting;nopatch;noreleasedate;
 ;
 ; License Apache 2
 ; 
 Q
 ;
SETMAP ;
 N G S G=$NA(^C0CodeMap("immunizations"))
 S @G@(1,"CPT")=90701
 S @G@(1,"CVXcode")=1
 S @G@(1,"altName",1)="DIP,PERT,TET (DPT)"
 S @G@(1,"altName",2)="DIP.,PERT.,TET. (DPT)"
 S @G@(1,"preferredName")="DTP"
 S @G@(2,"CPT")=90712
 S @G@(2,"CVXcode")=2
 S @G@(2,"altName",1)="ORAL POLIOVIRUS"
 S @G@(2,"preferredName")="OPV"
 S @G@(3,"CPT")=90707
 S @G@(3,"CVXcode")=3
 S @G@(3,"altName",1)="MMR1"
 S @G@(3,"altName",2)="MEASLES,MUMPS,RUBELLA (MMR)"
 S @G@(3,"altName",3)="MEASLES,MUMPS,RUBELLA PED #1"
 S @G@(3,"altName",4)="MEASLES,MUMPS,RUBELLA PED #2"
 S @G@(3,"preferredName")="MMR"
 S @G@(4,"CPT")=90708
 S @G@(4,"CVXcode")=4
 S @G@(4,"altName",1)="MEASLES,RUBELLA (MR)"
 S @G@(4,"preferredName")="M/R"
 S @G@(5,"CPT")=90705
 S @G@(5,"CVXcode")=5
 S @G@(5,"altName",1)="MEASLES"
 S @G@(5,"preferredName")="measles"
 S @G@(6,"CPT")=90706
 S @G@(6,"CVXcode")=6
 S @G@(6,"altName",1)="RUBELLA"
 S @G@(6,"preferredName")="rubella"
 S @G@(7,"CPT")=90704
 S @G@(7,"CVXcode")=7
 S @G@(7,"altName",1)="MUMPS"
 S @G@(7,"preferredName")="mumps"
 S @G@(8,"CPT")=90744
 S @G@(8,"CVXcode")=8
 S @G@(8,"altName",1)="HEP B PED/ADOL 3 DOSE"
 S @G@(8,"altName",2)="HEPB PED/ADOL-2"
 S @G@(8,"altName",3)="HEPB PED/ADOL-3"
 S @G@(8,"altName",4)="HEPB PED/ADOL-4"
 S @G@(8,"altName",5)="HEPB, PED/ADOL-1"
 S @G@(8,"preferredName")="Hep B, adolescent or pediatric"
 S @G@(9,"CPT")=90718
 S @G@(9,"CVXcode")=9
 S @G@(9,"altName",1)="TETANUS DIPTHERIA (TD-ADULT)"
 S @G@(9,"preferredName")="Td (adult), adsorbed"
 S @G@(10,"CPT")=90713
 S @G@(10,"CVXcode")=10
 S @G@(10,"altName",1)="IPV4"
 S @G@(10,"altName",2)="IPV1"
 S @G@(10,"altName",3)="IPV2"
 S @G@(10,"altName",4)="IPV3"
 S @G@(10,"altName",5)="POLIOVIRUS PED #1"
 S @G@(10,"altName",6)="POLIOVIRUS PED #2"
 S @G@(10,"altName",7)="POLIOVIRUS PED #3"
 S @G@(10,"altName",8)="POLIOVIRUS PED #4"
 S @G@(10,"preferredName")="IPV"
 S @G@(12,"CPT")=90296
 S @G@(12,"CVXcode")=12
 S @G@(12,"preferredName")="diphtheria antitoxin"
 S @G@(13,"CPT")=90389
 S @G@(13,"CVXcode")=13
 S @G@(13,"preferredName")="TIG"
 S @G@(14,"CPT")=90741
 S @G@(14,"CVXcode")=14
 S @G@(14,"altName",1)="GAMMA GLOBULIN"
 S @G@(14,"preferredName")="IG, unspecified formulation"
 S @G@(16,"CPT")=90659
 S @G@(16,"CVXcode")=16
 S @G@(16,"altName",1)="FLU,WHOLE"
 S @G@(16,"preferredName")="influenza, whole"
 S @G@(17,"CPT")=90737
 S @G@(17,"CVXcode")=17
 S @G@(17,"altName",1)="INFLUENZA B"
 S @G@(17,"preferredName")="Hib, unspecified formulation"
 S @G@(18,"CPT")=90675
 S @G@(18,"CVXcode")=18
 S @G@(18,"altName",1)="RABIES,IM"
 S @G@(18,"preferredName")="rabies, intramuscular injection"
 S @G@(19,"CPT")=90728
 S @G@(19,"CVXcode")=19
 S @G@(19,"altName",1)="BCG,PERCUT"
 S @G@(19,"preferredName")="BCG"
 S @G@(20,"CVXcode")=20
 S @G@(20,"altName",1)="DIP.,PERT.,TET. (DPT) PED 5"
 S @G@(20,"altName",2)="DIP.,PERT.,TET. (DPT) PED 1"
 S @G@(20,"altName",3)="DIP.,PERT.,TET. (DPT) PED 2"
 S @G@(20,"altName",4)="DIP.,PERT.,TET. (DPT) PED 3"
 S @G@(20,"altName",5)="DIP.,PERT.,TET. (DPT) PED 4"
 S @G@(20,"preferredName")="DTaP"
 S @G@(21,"CPT")=90716
 S @G@(21,"CVXcode")=21
 S @G@(21,"altName",1)="VZV2 INFANT"
 S @G@(21,"altName",2)="CHICKENPOX"
 S @G@(21,"altName",3)="VZV1 INFANT"
 S @G@(21,"preferredName")="varicella"
 S @G@(22,"CPT")=90720
 S @G@(22,"CVXcode")=22
 S @G@(22,"altName",1)="DTB/HIB"
 S @G@(22,"preferredName")="DTP-Hib"
 S @G@(23,"CPT")=90727
 S @G@(23,"CVXcode")=23
 S @G@(23,"altName",1)="PLAGUE"
 S @G@(23,"preferredName")="plague"
 S @G@(24,"CPT")=90581
 S @G@(24,"CVXcode")=24
 S @G@(24,"altName",1)="ANTHRAX,SC"
 S @G@(24,"preferredName")="anthrax"
 S @G@(25,"CPT")=90690
 S @G@(25,"CVXcode")=25
 S @G@(25,"altName",1)="TYPHOID,ORAL"
 S @G@(25,"preferredName")="typhoid, oral"
 S @G@(26,"CPT")=90725
 S @G@(26,"CVXcode")=26
 S @G@(26,"altName",1)="CHOLERA, ORAL"
 S @G@(26,"altName",2)="CHOLERA"
 S @G@(26,"preferredName")="cholera"
 S @G@(27,"CPT")=90287
 S @G@(27,"CVXcode")=27
 S @G@(27,"preferredName")="botulinum antitoxin"
 S @G@(28,"CPT")=90702
 S @G@(28,"CVXcode")=28
 S @G@(28,"altName",1)="DIPTHERIA-TETANUS (DT-PEDS)"
 S @G@(28,"preferredName")="DT (pediatric)"
 S @G@(29,"CPT")=90291
 S @G@(29,"CVXcode")=29
 S @G@(29,"preferredName")="CMVIG"
 S @G@(30,"CPT")=90371
 S @G@(30,"CVXcode")=30
 S @G@(30,"preferredName")="HBIG"
 S @G@(32,"CPT")=90733
 S @G@(32,"CVXcode")=32
 S @G@(32,"altName",1)="MENINGOCOCCAL"
 S @G@(32,"preferredName")="meningococcal MPSV4"
 S @G@(33,"CPT")=90732
 S @G@(33,"CVXcode")=33
 S @G@(33,"altName",1)="PNEUMOVAX"
 S @G@(33,"altName",2)="PNEUMOCOCCAL"
 S @G@(33,"preferredName")="pneumococcal polysaccharide PPV23"
 S @G@(34,"CPT")=90376
 S @G@(34,"CVXcode")=34
 S @G@(34,"preferredName")="RIG"
 S @G@(35,"CPT")=90703
 S @G@(35,"CVXcode")=35
 S @G@(35,"altName",1)="TETANUS TOXOID"
 S @G@(35,"preferredName")="tetanus toxoid, adsorbed"
 S @G@(36,"CPT")=90396
 S @G@(36,"CVXcode")=36
 S @G@(36,"preferredName")="VZIG"
 S @G@(37,"CPT")=90717
 S @G@(37,"CVXcode")=37
 S @G@(37,"altName",1)="YELLOW FEVER"
 S @G@(37,"preferredName")="yellow fever"
 S @G@(38,"altName",1)="RUBELLA, MUMPS"
 S @G@(39,"CPT")=90735
 S @G@(39,"CVXcode")=39
 S @G@(39,"altName",1)="ENCEPHALITIS"
 S @G@(39,"preferredName")="Japanese encephalitis SC"
 S @G@(40,"CPT")=90676
 S @G@(40,"CVXcode")=40
 S @G@(40,"altName",1)="RABIES,ID"
 S @G@(40,"preferredName")="rabies, intradermal injection"
 S @G@(41,"CPT")=90692
 S @G@(41,"CVXcode")=41
 S @G@(41,"altName",1)="TYPHOID,H-P,SC/ID"
 S @G@(41,"preferredName")="typhoid, parenteral"
 S @G@(42,"CPT")=90745
 S @G@(42,"CVXcode")=42
 S @G@(42,"altName",1)="HEP B4 INFANT"
 S @G@(42,"altName",2)="HEP B1 INFANT"
 S @G@(42,"altName",3)="HEP B2 INFANT"
 S @G@(42,"altName",4)="HEP B3 INFANT"
 S @G@(42,"preferredName")="Hep B, adolescent/high risk infant"
 S @G@(43,"CPT")=90746
 S @G@(43,"CVXcode")=43
 S @G@(43,"altName",1)="SWINE FLU BIVAL"
 S @G@(43,"preferredName")="Hep B, adult"
 S @G@(44,"CPT")=90747
 S @G@(44,"CVXcode")=44
 S @G@(44,"altName",1)="HEPB, ILL PAT"
 S @G@(44,"preferredName")="Hep B, dialysis"
 S @G@(45,"CPT")=90731
 S @G@(45,"CVXcode")=45
 S @G@(45,"altName",1)="HEPATITIS B"
 S @G@(45,"preferredName")="Hep B, unspecified formulation"
 S @G@(46,"CPT")=90646
 S @G@(46,"CVXcode")=46
 S @G@(46,"altName",1)="HIB,PRP-D"
 S @G@(46,"preferredName")="Hib (PRP-D)"
 S @G@(47,"CPT")=90645
 S @G@(47,"CVXcode")=47
 S @G@(47,"altName",1)="HIB PED 4"
 S @G@(47,"altName",2)="HIB PED 1"
 S @G@(47,"altName",3)="HIB PED 2"
 S @G@(47,"altName",4)="HIB PED 3"
 S @G@(47,"altName",5)="HIB,HBOC"
 S @G@(47,"preferredName")="Hib (HbOC)"
 S @G@(48,"CPT")=90648
 S @G@(48,"CVXcode")=48
 S @G@(48,"altName",1)="HIB,PRP-T"
 S @G@(48,"preferredName")="Hib (PRP-T)"
 S @G@(49,"CPT")=90647
 S @G@(49,"CVXcode")=49
 S @G@(49,"altName",1)="HiB3"
 S @G@(49,"altName",2)="HIB,PRP-OMP"
 S @G@(49,"altName",3)="HiB1"
 S @G@(49,"altName",4)="HiB2"
 S @G@(49,"preferredName")="Hib (PRP-OMP)"
 S @G@(50,"CPT")=90721
 S @G@(50,"CVXcode")=50
 S @G@(50,"preferredName")="DTaP-Hib"
 S @G@(51,"CPT")=90748
 S @G@(51,"CVXcode")=51
 S @G@(51,"altName",1)="HEPB/HIB"
 S @G@(51,"preferredName")="Hib-Hep B"
 S @G@(52,"CPT")=90632
 S @G@(52,"CVXcode")=52
 S @G@(52,"altName",1)="HEPA ADULT"
 S @G@(52,"preferredName")="Hep A, adult"
 S @G@(53,"CPT")=90693
 S @G@(53,"CVXcode")=53
 S @G@(53,"altName",1)="TYPHOID,AKD,SC"
 S @G@(53,"preferredName")="typhoid, parenteral, AKD (U.S. military)"
 S @G@(54,"CPT")=90476
 S @G@(54,"CVXcode")=54
 S @G@(54,"altName",1)="ADENOVIRUS,TYPE 4"
 S @G@(54,"preferredName")="adenovirus, type 4"
 S @G@(55,"CPT")=90477
 S @G@(55,"CVXcode")=55
 S @G@(55,"altName",1)="ADENOVIRUS,TYPE 7"
 S @G@(55,"preferredName")="adenovirus, type 7"
 S @G@(62,"CPT")=90649
 S @G@(62,"CVXcode")=62
 S @G@(62,"preferredName")="HPV, quadrivalent"
 S @G@(66,"CPT")=90665
 S @G@(66,"CVXcode")=66
 S @G@(66,"altName",1)="LYME DISEASE"
 S @G@(66,"preferredName")="Lyme disease"
 S @G@(71,"CPT")=90379
 S @G@(71,"CVXcode")=71
 S @G@(71,"preferredName")="RSV-IGIV"
 S @G@(75,"altName",1)="SMALLPOX"
 S @G@(79,"CPT")=90393
 S @G@(79,"CVXcode")=79
 S @G@(79,"preferredName")="vaccinia immune globulin"
 S @G@(83,"CPT")=90633
 S @G@(83,"CVXcode")=83
 S @G@(83,"altName",1)="HEP A2 PEDS"
 S @G@(83,"altName",2)="HEP A1 PEDS"
 S @G@(83,"altName",3)="HEPA,PED/ADOL-2"
 S @G@(83,"preferredName")="Hep A, ped/adol, 2 dose"
 S @G@(84,"CPT")=90634
 S @G@(84,"CVXcode")=84
 S @G@(84,"altName",1)="HEP A3 PEDS"
 S @G@(84,"altName",2)="HEPA,PED/ADOL-3 DOSE"
 S @G@(84,"preferredName")="Hep A, ped/adol, 3 dose"
 S @G@(85,"CPT")=90730
 S @G@(85,"CVXcode")=85
 S @G@(85,"altName",1)="HEPATITIS A"
 S @G@(85,"preferredName")="Hep A, unspecified formulation"
 S @G@(86,"CPT")=90281
 S @G@(86,"CVXcode")=86
 S @G@(86,"preferredName")="IG"
 S @G@(87,"CPT")=90283
 S @G@(87,"CVXcode")=87
 S @G@(87,"preferredName")="IGIV"
 S @G@(88,"CPT")=90724
 S @G@(88,"CVXcode")=88
 S @G@(88,"altName",1)="INFLUENZA"
 S @G@(88,"preferredName")="influenza, unspecified formulation"
 S @G@(90,"CPT")=90726
 S @G@(90,"CVXcode")=90
 S @G@(90,"altName",1)="RABIES"
 S @G@(90,"preferredName")="rabies, unspecified formulation"
 S @G@(91,"CPT")=90714
 S @G@(91,"CVXcode")=91
 S @G@(91,"altName",1)="TYPHOID"
 S @G@(91,"preferredName")="typhoid, unspecified formulation"
 S @G@(93,"CPT")=90378
 S @G@(93,"CVXcode")=93
 S @G@(93,"preferredName")="RSV-MAb"
 S @G@(94,"CPT")=90710
 S @G@(94,"CVXcode")=94
 S @G@(94,"altName",1)="MEA-MUMPS-RUB-VARCELLA"
 S @G@(94,"preferredName")="MMRV"
 S @G@(100,"CPT")=90669
 S @G@(100,"CVXcode")=100
 S @G@(100,"altName",1)="PNEUMOCOCCAL PED 4"
 S @G@(100,"altName",2)="PNEUMOCOCCAL PED 1"
 S @G@(100,"altName",3)="PNEUMOCOCCAL PED 2"
 S @G@(100,"altName",4)="PNEUMOCOCCAL PED 3"
 S @G@(100,"altName",5)="PNEUMOCOCCAL,PED"
 S @G@(100,"preferredName")="pneumococcal conjugate PCV 7"
 S @G@(101,"CPT")=90691
 S @G@(101,"CVXcode")=101
 S @G@(101,"altName",1)="TYPHOID"
 S @G@(101,"preferredName")="typhoid, ViCPs"
 S @G@(104,"CPT")=90636
 S @G@(104,"CVXcode")=104
 S @G@(104,"altName",1)="HEPA/HEPB ADULT"
 S @G@(104,"preferredName")="Hep A-Hep B"
 S @G@(106,"CPT")=90700
 S @G@(106,"CVXcode")=106
 S @G@(106,"altName",1)="DTaP5"
 S @G@(106,"altName",2)="DIP,PERT,TET (DPT) PED 1"
 S @G@(106,"altName",3)="DIP,PERT,TET (DPT) PED 2"
 S @G@(106,"altName",4)="DIP,PERT,TET (DPT) PED 3"
 S @G@(106,"altName",5)="DIP,PERT,TET (DPT) PED 4"
 S @G@(106,"altName",6)="DIP,PERT,TET (DPT) PED 5"
 S @G@(106,"altName",7)="DIP-TET-a/PERT"
 S @G@(106,"altName",8)="DTaP1"
 S @G@(106,"altName",9)="DTaP2"
 S @G@(106,"altName",10)="DTaP3"
 S @G@(106,"altName",11)="DTaP4"
 S @G@(106,"preferredName")="DTaP, 5 pertussis antigens"
 S @G@(110,"CPT")=90723
 S @G@(110,"CVXcode")=110
 S @G@(110,"preferredName")="DTaP-Hep B-IPV"
 S @G@(111,"CPT")=90660
 S @G@(111,"CVXcode")=111
 S @G@(111,"altName",1)="FLU,NASAL"
 S @G@(111,"preferredName")="influenza, live, intranasal"
 S @G@(113,"CVXcode")=113
 S @G@(113,"preferredName")="Td (adult) preservative free"
 S @G@(114,"CPT")=90734
 S @G@(114,"CVXcode")=114
 S @G@(114,"preferredName")="meningococcal MCV4P"
 S @G@(115,"CPT")=90715
 S @G@(115,"CVXcode")=115
 S @G@(115,"altName",1)="TETANUS, DIPTHERIA AND PERTUSSIS"
 S @G@(115,"preferredName")="Tdap"
 S @G@(116,"CPT")=90680
 S @G@(116,"CVXcode")=116
 S @G@(116,"altName",1)="RV 4 PEDS"
 S @G@(116,"altName",2)="ROTOVIRUS,ORAL"
 S @G@(116,"altName",3)="RV 1 PEDS"
 S @G@(116,"altName",4)="RV 2 PEDS"
 S @G@(116,"altName",5)="RV 3 PEDS"
 S @G@(116,"preferredName")="rotavirus, pentavalent"
 S @G@(118,"CPT")=90650
 S @G@(118,"CVXcode")=118
 S @G@(118,"preferredName")="HPV, bivalent"
 S @G@(119,"CPT")=90681
 S @G@(119,"CVXcode")=119
 S @G@(119,"preferredName")="rotavirus, monovalent"
 S @G@(120,"CPT")=90698
 S @G@(120,"CVXcode")=120
 S @G@(120,"preferredName")="DTaP-Hib-IPV"
 S @G@(121,"CPT")=90736
 S @G@(121,"CVXcode")=121
 S @G@(121,"preferredName")="zoster"
 S @G@(125,"CPT")=90664
 S @G@(125,"CVXcode")=125
 S @G@(125,"preferredName")="Novel Influenza-H1N1-09, nasal"
 S @G@(126,"CPT")=90666
 S @G@(126,"CVXcode")=126
 S @G@(126,"preferredName")="Novel influenza-H1N1-09, preservative-free"
 S @G@(127,"CPT")=90668
 S @G@(127,"CVXcode")=127
 S @G@(127,"preferredName")="Novel influenza-H1N1-09"
 S @G@(128,"CPT")=90663
 S @G@(128,"CVXcode")=128
 S @G@(128,"preferredName")="Novel Influenza-H1N1-09, all formulations"
 S @G@(130,"CPT")=90696
 S @G@(130,"CVXcode")=130
 S @G@(130,"preferredName")="DTaP-IPV"
 S @G@(131,"altName",1)="TYPHUS"
 S @G@(133,"CPT")=90670
 S @G@(133,"CVXcode")=133
 S @G@(133,"altName",1)="PCV5 PEDS"
 S @G@(133,"altName",2)="PCV1 PEDS"
 S @G@(133,"altName",3)="PCV2 PEDS"
 S @G@(133,"altName",4)="PCV3 PEDS"
 S @G@(133,"altName",5)="PCV4 PEDS"
 S @G@(133,"preferredName")="Pneumococcal conjugate PCV 13"
 S @G@(134,"CPT")=90738
 S @G@(134,"CVXcode")=134
 S @G@(134,"preferredName")="Japanese Encephalitis IM"
 S @G@(135,"CPT")=90662
 S @G@(135,"CVXcode")=135
 S @G@(135,"preferredName")="Influenza, high dose seasonal"
 S @G@(136,"CVXcode")=136
 S @G@(136,"preferredName")="Meningococcal MCV4O"
 S @G@(140,"CPT")=90656
 S @G@(140,"CVXcode")=140
 S @G@(140,"preferredName")="Influenza, seasonal, injectable, preservative free"
 S @G@(141,"CPT")=90658
 S @G@(141,"CVXcode")=141
 S @G@(141,"altName",1)="FLU,3 YRS"
 S @G@(141,"preferredName")="Influenza, seasonal, injectable"
 S @G@(144,"CPT")=90654
 S @G@(144,"CVXcode")=144
 S @G@(144,"preferredName")="influenza, seasonal, intradermal, preservative free"
 S @G@(148,"CPT")=90644
 S @G@(148,"CVXcode")=148
 S @G@(148,"preferredName")="Meningococcal C/Y-HIB PRP"
 S @G@(149,"CPT")=90672
 S @G@(149,"CVXcode")=149
 S @G@(149,"preferredName")="influenza, live, intranasal, quadrivalent"
 S @G@(150,"CPT")=90686
 S @G@(150,"CVXcode")=150
 S @G@(150,"preferredName")="influenza, injectable, quadrivalent, preservative free"
 S @G@(153,"CPT")=90661
 S @G@(153,"CVXcode")=153
 S @G@(153,"preferredName")="Influenza, injectable, MDCK, preservative free"
 S @G@(155,"CPT")=90673
 S @G@(155,"CVXcode")=155
 S @G@(155,"preferredName")="influenza, recombinant, injectable, preservative free"
 S @G@(158,"CPT")=90688
 S @G@(158,"CVXcode")=158
 S @G@(158,"preferredName")="influenza, injectable, quadrivalent"
 S @G@(999,"CPT")=90749
 S @G@(999,"CVXcode")=999
 S @G@(999,"preferredName")="unknown"
 S @G@("B","ADENOVIRUS,TYPE 4",54)=""
 S @G@("B","ADENOVIRUS,TYPE 7",55)=""
 S @G@("B","ANTHRAX,SC",24)=""
 S @G@("B","BCG",19)=""
 S @G@("B","BCG,PERCUT",19)=""
 S @G@("B","CHICKENPOX",21)=""
 S @G@("B","CHOLERA",26)=""
 S @G@("B","CHOLERA, ORAL",26)=""
 S @G@("B","CMVIG",29)=""
 S @G@("B","DIP,PERT,TET (DPT)",1)=""
 S @G@("B","DIP,PERT,TET (DPT) PED 1",106)=""
 S @G@("B","DIP,PERT,TET (DPT) PED 2",106)=""
 S @G@("B","DIP,PERT,TET (DPT) PED 3",106)=""
 S @G@("B","DIP,PERT,TET (DPT) PED 4",106)=""
 S @G@("B","DIP,PERT,TET (DPT) PED 5",106)=""
 S @G@("B","DIP-TET-a/PERT",106)=""
 S @G@("B","DIP.,PERT.,TET. (DPT)",1)=""
 S @G@("B","DIP.,PERT.,TET. (DPT) PED 1",20)=""
 S @G@("B","DIP.,PERT.,TET. (DPT) PED 2",20)=""
 S @G@("B","DIP.,PERT.,TET. (DPT) PED 3",20)=""
 S @G@("B","DIP.,PERT.,TET. (DPT) PED 4",20)=""
 S @G@("B","DIP.,PERT.,TET. (DPT) PED 5",20)=""
 S @G@("B","DIPTHERIA-TETANUS (DT-PEDS)",28)=""
 S @G@("B","DT (pediatric)",28)=""
 S @G@("B","DTB/HIB",22)=""
 S @G@("B","DTP",1)=""
 S @G@("B","DTP-Hib",22)=""
 S @G@("B","DTaP",20)=""
 S @G@("B","DTaP, 5 pertussis antigens",106)=""
 S @G@("B","DTaP-Hep B-IPV",110)=""
 S @G@("B","DTaP-Hib",50)=""
 S @G@("B","DTaP-Hib-IPV",120)=""
 S @G@("B","DTaP-IPV",130)=""
 S @G@("B","DTaP1",106)=""
 S @G@("B","DTaP2",106)=""
 S @G@("B","DTaP3",106)=""
 S @G@("B","DTaP4",106)=""
 S @G@("B","DTaP5",106)=""
 S @G@("B","ENCEPHALITIS",39)=""
 S @G@("B","FLU,3 YRS",141)=""
 S @G@("B","FLU,NASAL",111)=""
 S @G@("B","FLU,WHOLE",16)=""
 S @G@("B","GAMMA GLOBULIN",14)=""
 S @G@("B","HBIG",30)=""
 S @G@("B","HEP A1 PEDS",83)=""
 S @G@("B","HEP A2 PEDS",83)=""
 S @G@("B","HEP A3 PEDS",84)=""
 S @G@("B","HEP B PED/ADOL 3 DOSE",8)=""
 S @G@("B","HEP B1 INFANT",42)=""
 S @G@("B","HEP B2 INFANT",42)=""
 S @G@("B","HEP B3 INFANT",42)=""
 S @G@("B","HEP B4 INFANT",42)=""
 S @G@("B","HEPA ADULT",52)=""
 S @G@("B","HEPA,PED/ADOL-2",83)=""
 S @G@("B","HEPA,PED/ADOL-3 DOSE",84)=""
 S @G@("B","HEPA/HEPB ADULT",104)=""
 S @G@("B","HEPATITIS A",85)=""
 S @G@("B","HEPATITIS B",45)=""
 S @G@("B","HEPB PED/ADOL-2",8)=""
 S @G@("B","HEPB PED/ADOL-3",8)=""
 S @G@("B","HEPB PED/ADOL-4",8)=""
 S @G@("B","HEPB, ILL PAT",44)=""
 S @G@("B","HEPB, PED/ADOL-1",8)=""
 S @G@("B","HEPB/HIB",51)=""
 S @G@("B","HIB PED 1",47)=""
 S @G@("B","HIB PED 2",47)=""
 S @G@("B","HIB PED 3",47)=""
 S @G@("B","HIB PED 4",47)=""
 S @G@("B","HIB,HBOC",47)=""
 S @G@("B","HIB,PRP-D",46)=""
 S @G@("B","HIB,PRP-OMP",49)=""
 S @G@("B","HIB,PRP-T",48)=""
 S @G@("B","HPV, bivalent",118)=""
 S @G@("B","HPV, quadrivalent",62)=""
 S @G@("B","Hep A, adult",52)=""
 S @G@("B","Hep A, ped/adol, 2 dose",83)=""
 S @G@("B","Hep A, ped/adol, 3 dose",84)=""
 S @G@("B","Hep A, unspecified formulation",85)=""
 S @G@("B","Hep A-Hep B",104)=""
 S @G@("B","Hep B, adolescent or pediatric",8)=""
 S @G@("B","Hep B, adolescent/high risk infant",42)=""
 S @G@("B","Hep B, adult",43)=""
 S @G@("B","Hep B, dialysis",44)=""
 S @G@("B","Hep B, unspecified formulation",45)=""
 S @G@("B","HiB1",49)=""
 S @G@("B","HiB2",49)=""
 S @G@("B","HiB3",49)=""
 S @G@("B","Hib (HbOC)",47)=""
 S @G@("B","Hib (PRP-D)",46)=""
 S @G@("B","Hib (PRP-OMP)",49)=""
 S @G@("B","Hib (PRP-T)",48)=""
 S @G@("B","Hib, unspecified formulation",17)=""
 S @G@("B","Hib-Hep B",51)=""
 S @G@("B","IG",86)=""
 S @G@("B","IG, unspecified formulation",14)=""
 S @G@("B","IGIV",87)=""
 S @G@("B","INFLUENZA",88)=""
 S @G@("B","INFLUENZA B",17)=""
 S @G@("B","IPV",10)=""
 S @G@("B","IPV1",10)=""
 S @G@("B","IPV2",10)=""
 S @G@("B","IPV3",10)=""
 S @G@("B","IPV4",10)=""
 S @G@("B","Influenza, high dose seasonal",135)=""
 S @G@("B","Influenza, injectable, MDCK, preservative free",153)=""
 S @G@("B","Influenza, seasonal, injectable",141)=""
 S @G@("B","Influenza, seasonal, injectable, preservative free",140)=""
 S @G@("B","Japanese Encephalitis IM",134)=""
 S @G@("B","Japanese encephalitis SC",39)=""
 S @G@("B","LYME DISEASE",66)=""
 S @G@("B","Lyme disease",66)=""
 S @G@("B","M/R",4)=""
 S @G@("B","MEA-MUMPS-RUB-VARCELLA",94)=""
 S @G@("B","MEASLES",5)=""
 S @G@("B","MEASLES,MUMPS,RUBELLA (MMR)",3)=""
 S @G@("B","MEASLES,MUMPS,RUBELLA PED #1",3)=""
 S @G@("B","MEASLES,MUMPS,RUBELLA PED #2",3)=""
 S @G@("B","MEASLES,RUBELLA (MR)",4)=""
 S @G@("B","MENINGOCOCCAL",32)=""
 S @G@("B","MMR",3)=""
 S @G@("B","MMR1",3)=""
 S @G@("B","MMRV",94)=""
 S @G@("B","MUMPS",7)=""
 S @G@("B","Meningococcal C/Y-HIB PRP",148)=""
 S @G@("B","Meningococcal MCV4O",136)=""
 S @G@("B","Novel Influenza-H1N1-09, all formulations",128)=""
 S @G@("B","Novel Influenza-H1N1-09, nasal",125)=""
 S @G@("B","Novel influenza-H1N1-09",127)=""
 S @G@("B","Novel influenza-H1N1-09, preservative-free",126)=""
 S @G@("B","OPV",2)=""
 S @G@("B","ORAL POLIOVIRUS",2)=""
 S @G@("B","PCV1 PEDS",133)=""
 S @G@("B","PCV2 PEDS",133)=""
 S @G@("B","PCV3 PEDS",133)=""
 S @G@("B","PCV4 PEDS",133)=""
 S @G@("B","PCV5 PEDS",133)=""
 S @G@("B","PLAGUE",23)=""
 S @G@("B","PNEUMOCOCCAL",33)=""
 S @G@("B","PNEUMOCOCCAL PED 1",100)=""
 S @G@("B","PNEUMOCOCCAL PED 2",100)=""
 S @G@("B","PNEUMOCOCCAL PED 3",100)=""
 S @G@("B","PNEUMOCOCCAL PED 4",100)=""
 S @G@("B","PNEUMOCOCCAL,PED",100)=""
 S @G@("B","PNEUMOVAX",33)=""
 S @G@("B","POLIOVIRUS PED #1",10)=""
 S @G@("B","POLIOVIRUS PED #2",10)=""
 S @G@("B","POLIOVIRUS PED #3",10)=""
 S @G@("B","POLIOVIRUS PED #4",10)=""
 S @G@("B","Pneumococcal conjugate PCV 13",133)=""
 S @G@("B","RABIES",90)=""
 S @G@("B","RABIES,ID",40)=""
 S @G@("B","RABIES,IM",18)=""
 S @G@("B","RIG",34)=""
 S @G@("B","ROTOVIRUS,ORAL",116)=""
 S @G@("B","RSV-IGIV",71)=""
 S @G@("B","RSV-MAb",93)=""
 S @G@("B","RUBELLA",6)=""
 S @G@("B","RUBELLA, MUMPS",38)=""
 S @G@("B","RV 1 PEDS",116)=""
 S @G@("B","RV 2 PEDS",116)=""
 S @G@("B","RV 3 PEDS",116)=""
 S @G@("B","RV 4 PEDS",116)=""
 S @G@("B","SMALLPOX",75)=""
 S @G@("B","SWINE FLU BIVAL",43)=""
 S @G@("B","TETANUS DIPTHERIA (TD-ADULT)",9)=""
 S @G@("B","TETANUS TOXOID",35)=""
 S @G@("B","TETANUS, DIPTHERIA AND PERTUSSIS",115)=""
 S @G@("B","TIG",13)=""
 S @G@("B","TYPHOID",91)=""
 S @G@("B","TYPHOID",101)=""
 S @G@("B","TYPHOID,AKD,SC",53)=""
 S @G@("B","TYPHOID,H-P,SC/ID",41)=""
 S @G@("B","TYPHOID,ORAL",25)=""
 S @G@("B","TYPHUS",131)=""
 S @G@("B","Td (adult) preservative free",113)=""
 S @G@("B","Td (adult), adsorbed",9)=""
 S @G@("B","Tdap",115)=""
 S @G@("B","VZIG",36)=""
 S @G@("B","VZV1 INFANT",21)=""
 S @G@("B","VZV2 INFANT",21)=""
 S @G@("B","YELLOW FEVER",37)=""
 S @G@("B","adenovirus, type 4",54)=""
 S @G@("B","adenovirus, type 7",55)=""
 S @G@("B","anthrax",24)=""
 S @G@("B","botulinum antitoxin",27)=""
 S @G@("B","cholera",26)=""
 S @G@("B","diphtheria antitoxin",12)=""
 S @G@("B","influenza, injectable, quadrivalent",158)=""
 S @G@("B","influenza, injectable, quadrivalent, preservative free",150)=""
 S @G@("B","influenza, live, intranasal",111)=""
 S @G@("B","influenza, live, intranasal, quadrivalent",149)=""
 S @G@("B","influenza, recombinant, injectable, preservative free",155)=""
 S @G@("B","influenza, seasonal, intradermal, preservative free",144)=""
 S @G@("B","influenza, unspecified formulation",88)=""
 S @G@("B","influenza, whole",16)=""
 S @G@("B","measles",5)=""
 S @G@("B","meningococcal MCV4P",114)=""
 S @G@("B","meningococcal MPSV4",32)=""
 S @G@("B","mumps",7)=""
 S @G@("B","plague",23)=""
 S @G@("B","pneumococcal conjugate PCV 7",100)=""
 S @G@("B","pneumococcal polysaccharide PPV23",33)=""
 S @G@("B","rabies, intradermal injection",40)=""
 S @G@("B","rabies, intramuscular injection",18)=""
 S @G@("B","rabies, unspecified formulation",90)=""
 S @G@("B","rotavirus, monovalent",119)=""
 S @G@("B","rotavirus, pentavalent",116)=""
 S @G@("B","rubella",6)=""
 S @G@("B","tetanus toxoid, adsorbed",35)=""
 S @G@("B","typhoid, ViCPs",101)=""
 S @G@("B","typhoid, oral",25)=""
 S @G@("B","typhoid, parenteral",41)=""
 S @G@("B","typhoid, parenteral, AKD (U.S. military)",53)=""
 S @G@("B","typhoid, unspecified formulation",91)=""
 S @G@("B","unknown",999)=""
 S @G@("B","vaccinia immune globulin",79)=""
 S @G@("B","varicella",21)=""
 S @G@("B","yellow fever",37)=""
 S @G@("B","zoster",121)=""
 S @G@("CPT",90281,86)=""
 S @G@("CPT",90283,87)=""
 S @G@("CPT",90287,27)=""
 S @G@("CPT",90291,29)=""
 S @G@("CPT",90296,12)=""
 S @G@("CPT",90371,30)=""
 S @G@("CPT",90375,34)=""
 S @G@("CPT",90376,34)=""
 S @G@("CPT",90378,93)=""
 S @G@("CPT",90379,71)=""
 S @G@("CPT",90389,13)=""
 S @G@("CPT",90393,79)=""
 S @G@("CPT",90396,36)=""
 S @G@("CPT",90470,128)=""
 S @G@("CPT",90476,54)=""
 S @G@("CPT",90477,55)=""
 S @G@("CPT",90581,24)=""
 S @G@("CPT",90585,19)=""
 S @G@("CPT",90632,52)=""
 S @G@("CPT",90633,83)=""
 S @G@("CPT",90634,84)=""
 S @G@("CPT",90636,104)=""
 S @G@("CPT",90644,148)=""
 S @G@("CPT",90645,47)=""
 S @G@("CPT",90646,46)=""
 S @G@("CPT",90647,49)=""
 S @G@("CPT",90648,48)=""
 S @G@("CPT",90649,62)=""
 S @G@("CPT",90650,118)=""
 S @G@("CPT",90654,144)=""
 S @G@("CPT",90655,140)=""
 S @G@("CPT",90656,140)=""
 S @G@("CPT",90657,141)=""
 S @G@("CPT",90658,141)=""
 S @G@("CPT",90659,16)=""
 S @G@("CPT",90660,111)=""
 S @G@("CPT",90661,153)=""
 S @G@("CPT",90662,135)=""
 S @G@("CPT",90663,128)=""
 S @G@("CPT",90664,125)=""
 S @G@("CPT",90665,66)=""
 S @G@("CPT",90666,126)=""
 S @G@("CPT",90668,127)=""
 S @G@("CPT",90669,100)=""
 S @G@("CPT",90670,133)=""
 S @G@("CPT",90672,149)=""
 S @G@("CPT",90673,155)=""
 S @G@("CPT",90675,18)=""
 S @G@("CPT",90676,40)=""
 S @G@("CPT",90680,116)=""
 S @G@("CPT",90681,119)=""
 S @G@("CPT",90685,150)=""
 S @G@("CPT",90686,150)=""
 S @G@("CPT",90688,158)=""
 S @G@("CPT",90690,25)=""
 S @G@("CPT",90691,101)=""
 S @G@("CPT",90692,41)=""
 S @G@("CPT",90693,53)=""
 S @G@("CPT",90696,130)=""
 S @G@("CPT",90698,120)=""
 S @G@("CPT",90700,106)=""
 S @G@("CPT",90701,1)=""
 S @G@("CPT",90702,28)=""
 S @G@("CPT",90703,35)=""
 S @G@("CPT",90704,7)=""
 S @G@("CPT",90705,5)=""
 S @G@("CPT",90706,6)=""
 S @G@("CPT",90707,3)=""
 S @G@("CPT",90708,4)=""
 S @G@("CPT",90710,94)=""
 S @G@("CPT",90712,2)=""
 S @G@("CPT",90713,10)=""
 S @G@("CPT",90714,91)=""
 S @G@("CPT",90715,115)=""
 S @G@("CPT",90716,21)=""
 S @G@("CPT",90717,37)=""
 S @G@("CPT",90718,9)=""
 S @G@("CPT",90720,22)=""
 S @G@("CPT",90721,50)=""
 S @G@("CPT",90723,110)=""
 S @G@("CPT",90724,88)=""
 S @G@("CPT",90725,26)=""
 S @G@("CPT",90726,90)=""
 S @G@("CPT",90727,23)=""
 S @G@("CPT",90728,19)=""
 S @G@("CPT",90730,85)=""
 S @G@("CPT",90731,45)=""
 S @G@("CPT",90732,33)=""
 S @G@("CPT",90733,32)=""
 S @G@("CPT",90734,114)=""
 S @G@("CPT",90735,39)=""
 S @G@("CPT",90736,121)=""
 S @G@("CPT",90737,17)=""
 S @G@("CPT",90738,134)=""
 S @G@("CPT",90740,44)=""
 S @G@("CPT",90741,14)=""
 S @G@("CPT",90743,43)=""
 S @G@("CPT",90744,8)=""
 S @G@("CPT",90745,42)=""
 S @G@("CPT",90746,43)=""
 S @G@("CPT",90747,44)=""
 S @G@("CPT",90748,51)=""
 S @G@("CPT",90749,999)=""
 Q
 ;

C0IORMAP
C0IORMAP  ;
 ; Pull information re CPT and CVX codes from dEWDrop
 D CPTMAP
 D CVXMAP
 ;D CPTIMAP^C0ITEST
 N IMMCPT,IMMCVX,CVXTXT,X,IMMIEN,I
 S (IMMCPT,IMMCVX,CVXTXT,X,IMMIEN,I)=""
 F I=1:1:141 D
 .;if there is an entry in the CPT Mapping file that is for an Immunization
 .I $P(^PXD(811.1,I,0),U,2)["AUTTIMM" D
 ..;Pick the CPT code out of the file  
 ..S IMMCPT=$P($P(^PXD(811.1,I,0),U,1),";",1)
 ..W I," CPT Code is ",IMMCPT,!  
 ..;If there is a match to an immunization
 ..I $D(CPTMAP(IMMCPT)) D
 ...S IMMCVX=CPTMAP(IMMCPT)
 ...W I," CVX Code is ",IMMCVX,!
 ...I $D(CVXMAP(IMMCVX)) D
 ...S CVXTXT=CVXMAP(IMMCVX)
 ...W I," CVX Text is ",CVXTXT,!
 ...S X=$P(^PXD(811.1,I,0),U,2) 
 ...I $D(X) D
 ....S IMMIEN=$P($P(^PXD(811.1,I,0),U,2),";",1)
 ....W I," IEN of the Immunization is ",IMMIEN,! 
 ....;VOID-IEN of CPT Mapping File;CPT Code;Immunization file Name for the immunization; Short name from Immunization file;CVX Code;proper CVX code sho$
 ....;S NANCY(I)=I_";"_$P($P(^PXD(811.1,I,0),U,1),";",1)_";"_$P(^AUTTIMM(IMMIEN,0),U,1)_";"_$P(^AUTTIMM(IMMIEN,0),U,2)_";"_IMMCVX_";"_CVXTXT_";"
 ....;IEN of CPT Mapping File;Immunization File IEN;Immunization file Name for the immunization; Short name from Immunization file;CPT Code;CVX Code;pr$
 ....S NANCY(I)=I_";"_IMMIEN_";"_$P(^AUTTIMM(IMMIEN,0),U,1)_";"_$P(^AUTTIMM(IMMIEN,0),U,2)_";"_$P($P(^PXD(811.1,I,0),U,1),";",1)_";"_IMMCVX_";"_CVXTXT
 ....W NANCY(I),!
 ....S NANCY1(I)=IMMIEN
 ....W NANCY1(I),!
 ; F I=1:1:131 D  
 ;.; if there is an entry in the CPT mapping file corrensponding to this imminization, QUIT
 Q
 ;
COUNT ; count usage of immunizations
 N ZI,ZJ
 S (ZI,ZJ)=""
 K C0ITBL
 F  S ZI=$O(^AUPNVIMM("B",ZI)) Q:ZI=""  D  ;
 . S ZJ=""
 . F  S ZJ=$O(^AUPNVIMM("B",ZI,ZJ)) Q:ZJ=""  D  ;
 . . N IMM
 . . S IMM=$P(^AUTTIMM(ZI,0),"^",1)
 . . S C0ITBL(ZI,IMM)=$G(C0ITBL(ZI,IMM))+1
 ZWR C0ITBL
 F  S ZI=$O(C0ITBL(ZI)) Q:ZI=""  D  ;
 . S ZJ=$O(C0ITBL(ZI,""))
 . S CNT=C0ITBL(ZI,ZJ)
 . S C0ICNT(CNT,ZI)=ZJ
 ZWR C0ICNT
 Q
 ;
CPTMAP
 S CPTMAP(90281)=86
 S CPTMAP(90283)=87
 S CPTMAP(90287)=27
 S CPTMAP(90291)=29
 S CPTMAP(90296)=12
 S CPTMAP(90371)=30
 S CPTMAP(90375)=34
 S CPTMAP(90376)=34
 S CPTMAP(90378)=93
 S CPTMAP(90379)=71
 S CPTMAP(90389)=13
 S CPTMAP(90393)=79
 S CPTMAP(90396)=36
 S CPTMAP(90470)=128
 S CPTMAP(90476)=54
 S CPTMAP(90477)=55
 S CPTMAP(90581)=24
 S CPTMAP(90585)=19
 S CPTMAP(90632)=52
 S CPTMAP(90633)=83
 S CPTMAP(90634)=84
 S CPTMAP(90636)=104
 S CPTMAP(90644)=148
 S CPTMAP(90645)=47
 S CPTMAP(90646)=46
 S CPTMAP(90647)=49
 S CPTMAP(90648)=48
 S CPTMAP(90649)=62
 S CPTMAP(90650)=118
 S CPTMAP(90654)=144
 S CPTMAP(90655)=140
 S CPTMAP(90656)=140
 S CPTMAP(90657)=141
 S CPTMAP(90658)=141
 S CPTMAP(90659)=16
 S CPTMAP(90660)=111
 S CPTMAP(90661)=153
 S CPTMAP(90662)=135
 S CPTMAP(90663)=128
 S CPTMAP(90664)=125
 S CPTMAP(90665)=66
 S CPTMAP(90666)=126
 S CPTMAP(90668)=127
 S CPTMAP(90669)=100
 S CPTMAP(90670)=133
 S CPTMAP(90672)=149
 S CPTMAP(90673)=155
 S CPTMAP(90675)=18
 S CPTMAP(90676)=40
 S CPTMAP(90680)=116
 S CPTMAP(90681)=119
 S CPTMAP(90685)=150
 S CPTMAP(90686)=150
 S CPTMAP(90688)=158
 S CPTMAP(90690)=25
 S CPTMAP(90691)=101
 S CPTMAP(90692)=41
 S CPTMAP(90693)=53
 S CPTMAP(90696)=130
 S CPTMAP(90698)=120
 S CPTMAP(90700)=20
 S CPTMAP(90700)=106
 S CPTMAP(90701)=01
 S CPTMAP(90702)=28
 S CPTMAP(90703)=35
 S CPTMAP(90704)=07
 S CPTMAP(90705)=05
 S CPTMAP(90706)=06
 S CPTMAP(90707)=03
 S CPTMAP(90708)=04
 S CPTMAP(90710)=94
 S CPTMAP(90712)=02
 S CPTMAP(90713)=10
 S CPTMAP(90714)=113
 S CPTMAP(90714)=91
 S CPTMAP(90715)=115
 S CPTMAP(90716)=21
 S CPTMAP(90717)=37
 S CPTMAP(90718)=09
 S CPTMAP(90720)=22
 S CPTMAP(90721)=50
 S CPTMAP(90723)=110
 S CPTMAP(90724)=88
 S CPTMAP(90725)=26
 S CPTMAP(90726)=90
 S CPTMAP(90727)=23
 S CPTMAP(90728)=19
 S CPTMAP(90730)=85
 S CPTMAP(90731)=45
 S CPTMAP(90732)=33
 S CPTMAP(90733)=32
 S CPTMAP(90734)=136
 S CPTMAP(90734)=114
 S CPTMAP(90735)=39
 S CPTMAP(90736)=121
 S CPTMAP(90737)=17
 S CPTMAP(90738)=134
 S CPTMAP(90740)=44
 S CPTMAP(90741)=14
 S CPTMAP(90743)=43
 S CPTMAP(90744)=08
 S CPTMAP(90745)=42
 S CPTMAP(90746)=43
 S CPTMAP(90747)=44
 S CPTMAP(90748)=51  
 Q
CVXMAP
 S CVXMAP(86)="IG"
 S CVXMAP(87)="IGIV"
 S CVXMAP(27)="botulinum antitoxin"
 S CVXMAP(29)="CMVIG"
 S CVXMAP(12)="diphtheria antitoxin"
 S CVXMAP(30)="HBIG"
 S CVXMAP(34)="RIG"
 S CVXMAP(34)="RIG"
 S CVXMAP(93)="RSV-MAb"
 S CVXMAP(71)="RSV-IGIV"
 S CVXMAP(13)="TIG"
 S CVXMAP(79)="vaccinia immune globulin"
 S CVXMAP(36)="VZIG"
 S CVXMAP(128)="Novel Influenza-H1N1-09, all formulations"
 S CVXMAP(54)="adenovirus, type 4"
 S CVXMAP(55)="adenovirus, type 7"
 S CVXMAP(24)="anthrax"
 S CVXMAP(19)="BCG"
 S CVXMAP(52)="Hep A, adult"
 S CVXMAP(83)="Hep A, ped/adol, 2 dose"
 S CVXMAP(84)="Hep A, ped/adol, 3 dose"
 S CVXMAP(104)="Hep A-Hep B"
 S CVXMAP(148)="Meningococcal C/Y-HIB PRP"
 S CVXMAP(47)="Hib (HbOC)"
 S CVXMAP(46)="Hib (PRP-D)"
 S CVXMAP(49)="Hib (PRP-OMP)"
 S CVXMAP(48)="Hib (PRP-T)"
 S CVXMAP(62)="HPV, quadrivalent"
 S CVXMAP(118)="HPV, bivalent"
 S CVXMAP(144)="influenza, seasonal, intradermal, preservative free"
 S CVXMAP(140)="Influenza, seasonal, injectable, preservative free"
 S CVXMAP(140)="Influenza, seasonal, injectable, preservative free"
 S CVXMAP(141)="Influenza, seasonal, injectable"
 S CVXMAP(141)="Influenza, seasonal, injectable"
 S CVXMAP(16)="influenza, whole"
 S CVXMAP(111)="influenza, live, intranasal"
 S CVXMAP(153)="Influenza, injectable, MDCK, preservative free"
 S CVXMAP(135)="Influenza, high dose seasonal"
 S CVXMAP(128)="Novel Influenza-H1N1-09, all formulations"
 S CVXMAP(125)="Novel Influenza-H1N1-09, nasal"
 S CVXMAP(66)="Lyme disease"
 S CVXMAP(126)="Novel influenza-H1N1-09, preservative-free"
 S CVXMAP(127)="Novel influenza-H1N1-09"
 S CVXMAP(100)="pneumococcal conjugate PCV 7"
 S CVXMAP(133)="Pneumococcal conjugate PCV 13"
 S CVXMAP(149)="influenza, live, intranasal, quadrivalent"
 S CVXMAP(155)="influenza, recombinant, injectable, preservative free"
 S CVXMAP(18)="rabies, intramuscular injection"
 S CVXMAP(40)="rabies, intradermal injection"
 S CVXMAP(116)="rotavirus, pentavalent"
 S CVXMAP(119)="rotavirus, monovalent"
 S CVXMAP(150)="influenza, injectable, quadrivalent, preservative free"
 S CVXMAP(150)="influenza, injectable, quadrivalent, preservative free"
 S CVXMAP(158)="influenza, injectable, quadrivalent"
 S CVXMAP(25)="typhoid, oral"
 S CVXMAP(101)="typhoid, ViCPs"
 S CVXMAP(41)="typhoid, parenteral"
 S CVXMAP(53)="typhoid, parenteral, AKD (U.S. military)"
 S CVXMAP(130)="DTaP-IPV"
 S CVXMAP(120)="DTaP-Hib-IPV"
 S CVXMAP(20)="DTaP"
 S CVXMAP(106)="DTaP, 5 pertussis antigens"
 S CVXMAP(01)="DTP"
 S CVXMAP(28)="DT (pediatric)"
 S CVXMAP(35)="tetanus toxoid, adsorbed"
 S CVXMAP(07)="mumps"
 S CVXMAP(05)="measles"
 S CVXMAP(06)="rubella"
 S CVXMAP(03)="MMR"
 S CVXMAP(04)="M/R"
 S CVXMAP(94)="MMRV"
 S CVXMAP(02)="OPV"
 S CVXMAP(10)="IPV"
 S CVXMAP(113)="Td (adult) preservative free"
 S CVXMAP(91)="typhoid, unspecified formulation"
 S CVXMAP(115)="Tdap"
 S CVXMAP(21)="varicella"
 S CVXMAP(37)="yellow fever"
 S CVXMAP(09)="Td (adult), adsorbed"
 S CVXMAP(22)="DTP-Hib"
 S CVXMAP(50)="DTaP-Hib"
 S CVXMAP(110)="DTaP-Hep B-IPV"
 S CVXMAP(88)="influenza, unspecified formulation"
 S CVXMAP(26)="cholera"
 S CVXMAP(90)="rabies, unspecified formulation"
 S CVXMAP(23)="plague"
 S CVXMAP(19)="BCG"
 S CVXMAP(85)="Hep A, unspecified formulation"
 S CVXMAP(45)="Hep B, unspecified formulation"
 S CVXMAP(33)="pneumococcal polysaccharide PPV23"
 S CVXMAP(32)="meningococcal MPSV4"
 S CVXMAP(136)="Meningococcal MCV4O"
 S CVXMAP(114)="meningococcal MCV4P"
 S CVXMAP(39)="Japanese encephalitis SC"
 S CVXMAP(121)="zoster"
 S CVXMAP(17)="Hib, unspecified formulation"
 S CVXMAP(134)="Japanese Encephalitis IM"
 S CVXMAP(44)="Hep B, dialysis"
 S CVXMAP(14)="IG, unspecified formulation"
 S CVXMAP(43)="Hep B, adult"
 S CVXMAP(08)="Hep B, adolescent or pediatric"
 S CVXMAP(42)="Hep B, adolescent/high risk infant"
 S CVXMAP(43)="Hep B, adult"
 S CVXMAP(44)="Hep B, dialysis"
 S CVXMAP(51)="Hib-Hep B"
 S CVXMAP("B","IG",86)=""
 S CVXMAP("B","IGIV",87)=""
 S CVXMAP("B","botulinum antitoxin",27)=""
 S CVXMAP("B","CMVIG",29)=""
 S CVXMAP("B","diphtheria antitoxin",12)=""
 S CVXMAP("B","HBIG",30)=""
 S CVXMAP("B","RIG",34)=""
 S CVXMAP("B","RIG",34)=""
 S CVXMAP("B","RSV-MAb",93)=""
 S CVXMAP("B","RSV-IGIV",71)=""
 S CVXMAP("B","TIG",13)=""
 S CVXMAP("B","vaccinia immune globulin",79)=""
 S CVXMAP("B","VZIG",36)=""
 S CVXMAP("B","Novel Influenza-H1N1-09, all formulations",128)=""
 S CVXMAP("B","adenovirus, type 4",54)=""
 S CVXMAP("B","adenovirus, type 7",55)=""
 S CVXMAP("B","anthrax",24)=""
 S CVXMAP("B","BCG",19)=""
 S CVXMAP("B","Hep A, adult",52)=""
 S CVXMAP("B","Hep A, ped/adol, 2 dose",83)=""
 S CVXMAP("B","Hep A, ped/adol, 3 dose",84)=""
 S CVXMAP("B","Hep A-Hep B",104)=""
 S CVXMAP("B","Meningococcal C/Y-HIB PRP",148)=""
 S CVXMAP("B","Hib (HbOC)",47)=""
 S CVXMAP("B","Hib (PRP-D)",46)=""
 S CVXMAP("B","Hib (PRP-OMP)",49)=""
 S CVXMAP("B","Hib (PRP-T)",48)=""
 S CVXMAP("B","HPV, quadrivalent",62)=""
 S CVXMAP("B","HPV, bivalent",118)=""
 S CVXMAP("B","influenza, seasonal, intradermal, preservative free",144)=""
 S CVXMAP("B","Influenza, seasonal, injectable, preservative free",140)=""
 S CVXMAP("B","Influenza, seasonal, injectable, preservative free",140)=""
 S CVXMAP("B","Influenza, seasonal, injectable",141)=""
 S CVXMAP("B","Influenza, seasonal, injectable",141)=""
 S CVXMAP("B","influenza, whole",16)=""
 S CVXMAP("B","influenza, live, intranasal",111)=""
 S CVXMAP("B","Influenza, injectable, MDCK, preservative free",153)=""
 S CVXMAP("B","Influenza, high dose seasonal",135)=""
 S CVXMAP("B","Novel Influenza-H1N1-09, all formulations",128)=""
 S CVXMAP("B","Novel Influenza-H1N1-09, nasal",125)=""
 S CVXMAP("B","Lyme disease",66)=""
 S CVXMAP("B","Novel influenza-H1N1-09, preservative-free",126)=""
 S CVXMAP("B","Novel influenza-H1N1-09",127)=""
 S CVXMAP("B","pneumococcal conjugate PCV 7",100)=""
 S CVXMAP("B","Pneumococcal conjugate PCV 13",133)=""
 S CVXMAP("B","influenza, live, intranasal, quadrivalent",149)=""
 S CVXMAP("B","influenza, recombinant, injectable, preservative free",155)=""
 S CVXMAP("B","rabies, intramuscular injection",18)=""
 S CVXMAP("B","rabies, intradermal injection",40)=""
 S CVXMAP("B","rotavirus, pentavalent",116)=""
 S CVXMAP("B","rotavirus, monovalent",119)=""
 S CVXMAP("B","influenza, injectable, quadrivalent, preservative free",150)=""
 S CVXMAP("B","influenza, injectable, quadrivalent, preservative free",150)=""
 S CVXMAP("B","influenza, injectable, quadrivalent",158)=""
 S CVXMAP("B","typhoid, oral",25)=""
 S CVXMAP("B","typhoid, ViCPs",101)=""
 S CVXMAP("B","typhoid, parenteral",41)=""
 S CVXMAP("B","typhoid, parenteral, AKD (U.S. military)",53)=""
 S CVXMAP("B","DTaP-IPV",130)=""
 S CVXMAP("B","DTaP-Hib-IPV",120)=""
 S CVXMAP("B","DTaP",20)=""
 S CVXMAP("B","DTaP, 5 pertussis antigens",106)=""
 S CVXMAP("B","DTP",01)=""
 S CVXMAP("B","DT (pediatric)",28)=""
 S CVXMAP("B","tetanus toxoid, adsorbed",35)=""
 S CVXMAP("B","mumps",07)=""
 S CVXMAP("B","measles",05)=""
 S CVXMAP("B","rubella",06)=""
 S CVXMAP("B","MMR",03)=""
 S CVXMAP("B","M/R",04)=""
 S CVXMAP("B","MMRV",94)=""
 S CVXMAP("B","OPV",02)=""
 S CVXMAP("B","IPV",10)=""
 S CVXMAP("B","Td (adult) preservative free",113)=""
 S CVXMAP("B","typhoid, unspecified formulation",91)=""
 S CVXMAP("B","Tdap",115)=""
 S CVXMAP("B","varicella",21)=""
 S CVXMAP("B","yellow fever",37)=""
 S CVXMAP("B","Td (adult), adsorbed",09)=""
 S CVXMAP("B","DTP-Hib",22)=""
 S CVXMAP("B","DTaP-Hib",50)=""
 S CVXMAP("B","DTaP-Hep B-IPV",110)=""
 S CVXMAP("B","influenza, unspecified formulation",88)=""
 S CVXMAP("B","cholera",26)=""
 S CVXMAP("B","rabies, unspecified formulation",90)=""
 S CVXMAP("B","plague",23)=""
 S CVXMAP("B","BCG",19)=""
 S CVXMAP("B","Hep A, unspecified formulation",85)=""
 S CVXMAP("B","Hep B, unspecified formulation",45)=""
 S CVXMAP("B","pneumococcal polysaccharide PPV23",33)=""
 S CVXMAP("B","meningococcal MPSV4",32)=""
 S CVXMAP("B","Meningococcal MCV4O",136)=""
 S CVXMAP("B","meningococcal MCV4P",114)=""
 S CVXMAP("B","Japanese encephalitis SC",39)=""
 S CVXMAP("B","zoster",121)=""
 S CVXMAP("B","Hib, unspecified formulation",17)=""
 S CVXMAP("B","Japanese Encephalitis IM",134)=""
 S CVXMAP("B","Hep B, dialysis",44)=""
 S CVXMAP("B","IG, unspecified formulation",14)=""
 S CVXMAP("B","Hep B, adult",43)=""
 S CVXMAP("B","Hep B, adolescent or pediatric",08)=""
 S CVXMAP("B","Hep B, adolescent/high risk infant",42)=""
 S CVXMAP("B","Hep B, adult",43)=""
 S CVXMAP("B","Hep B, dialysis",44)=""
 S CVXMAP("B","Hib-Hep B",51)=""
 Q
 ;

C0IPXRM
C0IPXRM ; GPL&NEA - Immunizations Forecasting Utilities ;05/03/14  17:05
 ;;0.1;Immunizations Forecasting;nopatch;noreleasedate;
 ;
 ; License Apache 2
 ; 
 Q
 ;
 ; Routines for calling Reminders to see if the patients has had any deseases 
 ;   that make them immune and therefore not requiring a vaccination
 ; 
 ; Since we are not on the latest Reminder's patch (24) we do not have access to
 ;   entry point MAINDF^PXRM. Therefore we import MAIN^PXRM and modify it to act
 ;   as a workaround. When patch 24 is available, this routine should be changed
 ;   to detect it and use it.  gpl
 ;
EN(DFN,REMNDR,ARY,ATTR,RCODE,RNAME) ; extrinsic returns true if the reminder evaluates true
 ; also returns supporting values as "findings" in the array indexed by the attribute ATTR
 ; 
 ; DFN is the patient ien passed by value
 ; REMNDR is the reminder ien passed by value
 ; ARY is the return array passed by reference - results will be added to the end
 ;  of the array ie ARY("findings",4,....) if there is already an ARY("findings",3)
 ; ATTR is the attribute to be associated with this call ie "hadMumps" passed by value
 ; RCODE and RNAME are the Rubrics that will be used for this finding when calling
 ;  clinical decision support. 
 ;
 ; This routine calls the reminders package with the patient and reminder ien passed in.
 ;  if the reminder evaluates true, it then locates and finds the patient entry that
 ;  caused the true evaluation, and collects the source, the date of onset if possible,
 ;  and the date of entry. It will also return the other things retained by the reminders
 ;  package in case they might also be useful. It puts them in the array and indexes the
 ;  entry by the attribute that is passed in.. 
 ;
 ;D MAIN(11,264,0)
 D MAIN(DFN,REMNDR,0)
 I $G(FIEVAL(1))=0 Q 0 ; no positive findings
 ;
 ; first see if there's a problem list entry and give it preference
 ;   (this preference is because with a problem list entry we can get date of onset)
 ;
 N C0IUSE S C0IUSE=0 ; eval entry to use
 N C0I S C0I=""
 F  S C0I=$O(FIEVAL(1,C0I)) Q:((C0I="")!(C0IUSE'=0))  D  ;
 . I $G(FIEVAL(1,C0I,"FILE NUMBER"))=9000011 S C0IUSE=C0I
 I C0IUSE=0 S C0IUSE=1 ; if no problem entry, use the first entry
 ;
 N C0FIND
 S C0FIND=$O(ARY("findings"," "),-1)+1 ; index of this finding
 M ARY("findings",C0FIND)=FIEVAL(1,C0IUSE)
 N FIEN,FFILE
 S FIEN=$G(FIEVAL(1,C0IUSE,"DAS")) ; ien of problem 
 S FFILE=$G(FIEVAL(1,C0IUSE,"FILE NUMBER"))
 ;
 S ARY("findings",C0FIND,"ICD9Code")=$$GET1^DIQ(FFILE,FIEN_",",.01)
 S ARY("findings",C0FIND,"ICD9Name")=$$GET1^DIQ(FFILE,FIEN_",",.05)
 S ARY("findings",C0FIND,"dateOfOnset")=$G(FIEVAL(1,C0IUSE,"DATE ENTERED"))
 S ARY("findings",C0FIND,"date")=$G(FIEVAL(1,C0IUSE,"DATE"))
 N C0IDUZ S C0IDUZ=$G(FIEVAL(1,C0IUSE,"PRIMARY PROVIDER"))
 I +C0IDUZ=0 S C0IDUZ=$G(FIEVAL(1,"PRIMARY PROVIDER"))
 S ARY("findings",C0FIND,"primaryProviderDUZ")=C0IDUZ
 S ARY("findings",C0FIND,"primaryProviderName")=$$GET1^DIQ(200,C0IDUZ_",",.01)
 S ARY("findings",C0FIND,ATTR)=""
 S ARY("findings","B",ATTR,C0FIND)=""
 S ARY("findings",C0FIND,"rubricCode")=$E(RCODE,1,$L(RCODE))
 S ARY("findings",C0FIND,"rubricName")=RNAME
 S ARY("findings","rubric",RCODE,C0FIND)=""
 M ARY("FIEVAL",C0FIND)=FIEVAL ; for debugging
 Q 1
 ;
MAIN(DFN,PXRMITEM,OUTTYPE,DISC) ;Main driver for clinical reminders.
        ;INPUT  DFN - Pointer to Patient File (#2)
        ;       PXRMITEM - IEN of reminder to evaluate.
        ;       OUTTYPE - Flag to indicate type of output information.
        ;         0 - Reminders DUE NOW only (CLINICAL REMINDERS DUE
        ;             HS component)
        ;         1 - All Reminders with Next and Last Information
        ;             (CLINICAL REMINDERS SUMMARY HS component)
        ;         5 - Health Maintenance (CLINICAL REMINDERS MAINTENANCE
        ;              HS component)
        ;        10 - MyHealtheVet summary
        ;        11 - MyHealtheVet detailed
        ;        12 - MyHealtheVet combined
        ;        DISC - (optional) if this is true then the disclaimer will
        ;             be loaded in ^TMP("PXRM",$J,"DISC").
        ;
        ;OUTPUT  ^TMP("PXRHM",$J,PXRMITEM,PXRMRNAM)=
        ;              STATUS_U_DUE DATE_U_LAST DONE
        ;        where PXRMRNAM is the PRINT NAME or if it is undefined then
        ;        it is the NAME (.01).
        ;        For the Clinical Maintenance component, OUTTYPE=5, there is 
        ;        subsequent output of the form
        ;        ^TMP("PXRHM",$J,PXRMITEM,PXRMRNAM,"TXT",N)=TEXT
        ;        where N is a number and TEXT is a text string.
        ;
        ;        If DISC is true then the disclaimer will be loaded into
        ;        ^TMP("PXRM",$J,"DISC"). The calling application should
        ;        delete this when it is done.
        ;
        ;        The calling application can display the contents of these
        ;        two ^TMP arrays as it chooses. The caller should also make
        ;        sure the ^TMP globals are killed before it exits.
        ;
        N DEFARR ;,FIEVAL gpl don't new FIEVAL
        K FIEVAL ; gpl kill it instead
        ;Load the definition into DEFARR.
        D DEF^PXRMLDR(PXRMITEM,.DEFARR)
        ;
        I $G(NODISC)="" S NODISC=1
        I $D(GMFLAG) S NODISC=0
        D EVAL^PXRM(DFN,.DEFARR,OUTTYPE,NODISC,.FIEVAL) ; gpl fully qualify routine name
        Q
        ;
        ;==========================================================
TEST ; try out the above
 S DFN=$$PAT^C0IICE()
 Q:DFN=0
 N IENHEPA,IENHEPB,IENMEASL,IENVARIC,IENMUMPS,IENRUBEL 
 N RCODE,RNAME ; rubric code and name
 S (IENHEPA,IENHEPB,IENMEASL,IENVARIC,IENMUMPS,IENRUBEL)=""
 N FILE,IENS,FLAGS,REMNAME,INDEX,SCREEN,EMSG
 S FILE=811.9 
 S IENS=""
 S FLAGS="OQ"
 S INDEX="B"
 S SCREEN=""
 S EMSG=""
 ;N N,HEPA,HEPB,VARICEL,MUMPS,MEASLES,RUBELLA
 S (N,HEPA,HEPB,VARICEL,MUMPS,MEASLES,RUBELLA)=0
 K ^TMP("PXRHM",$J)
 N REMNAME S REMNAME="VIMM-HEPATITIS B DIAGNOSIS"
 S IENHEPB=$$FIND1^DIC(FILE,IENS,FLAGS,REMNAME,INDEX,SCREEN,EMSG)
 I IENHEPB="" Q  ; reminder not found, skip this part
 K REMNAME
 ;D MAIN^PXRM(DFN,IENHEPB,0)
 S RCODE="070.3"
 S RNAME="Hep B"
 I $$EN^C0IPXRM(DFN,IENHEPB,.RETURN,"hadHepB",RCODE,RNAME) S N=N+1 S HEPB=1
 ;I $G(^TMP("PXRHM",$J,IENHEPB,"VIMM-HEPATITIS B DIAGNOSIS"))["DUE NOW" S N=N+1 S HEPB=1
 ;W "HEPB=",HEPB,!
 K ^TMP("PXRHM",$J)
 N REMNAME S REMNAME="VIMM-HEPATITIS A DIAGNOSIS"
 S IENHEPA=$$FIND1^DIC(FILE,IENS,FLAGS,REMNAME,INDEX,SCREEN,EMSG) 
 K REMNAME
 ;D MAIN^PXRM(DFN,IENHEPA,0)
 S RCODE="070.1"
 S RNAME="Hep A"
 I $$EN^C0IPXRM(DFN,IENHEPA,.RETURN,"hadHepA",RCODE,RNAME) S N=N+1 S HEPA=1
 ;I $G(^TMP("PXRHM",$J,IENHEPA,"VIMM-HEPATITIS A DIAGNOSIS"))["DUE NOW" S N=N+1 S HEPA=1
 ;W "HEPA=",HEPA,!
 K ^TMP("PXRHM",$J)
 N REMNAME S REMNAME="VIMM-VARICELLA DIAGNOSIS"
 S IENVARIC=$$FIND1^DIC(FILE,IENS,FLAGS,REMNAME,INDEX,SCREEN,EMSG)
 K REMNAME
 ;D MAIN^PXRM(DFN,IENVARIC,0)
 S RCODE="052.9"
 S RNAME="Varicella"
 I $$EN^C0IPXRM(DFN,IENVARIC,.RETURN,"hadVaricella",RCODE,RNAME) S N=N+1 S VARICEL=1
 ;I $G(^TMP("PXRHM",$J,IENVARIC,"VIMM-VARICELLA DIAGNOSIS"))["DUE NOW" S N=N+1 S VARICEL=1
 ;W "VARICEL=",VARICEL,!
 K ^TMP("PXRHM",$J)
 N REMNAME S REMNAME="VIMM-MUMPS DIAGNOSIS" 
 S IENMUMPS=$$FIND1^DIC(FILE,IENS,FLAGS,REMNAME,INDEX,SCREEN,EMSG) D MAIN^PXRM(DFN,267,0)
 K REMNME
 ;D MAIN^PXRM(DFN,IENMUMPS,0)
 S RCODE="072.9"
 S RNAME="Mumps"
 I $$EN^C0IPXRM(DFN,IENMUMPS,.RETURN,"hadMumps",RCODE,RNAME) S N=N+1 S IENMUMPS=1
 ;I $G(^TMP("PXRHM",$J,IENMUMPS,"VIMM-MUMPS DIAGNOSIS"))["DUE NOW" S N=N+1 S MUMPS=1
 ;W "MUMPS=",MUMPS,!
 K ^TMP("PXRHM",$J)
 N REMNAME S REMNAME="VIMM-MEASLES DIAGNOSIS"
 S IENMEASL=$$FIND1^DIC(FILE,IENS,FLAGS,REMNAME,INDEX,SCREEN,EMSG)
 K REMNAME
 ;D MAIN^PXRM(DFN,IENMEASL,0)
 S RCODE="055.9"
 S RNAME="Measles"
 I $$EN^C0IPXRM(DFN,IENMEASL,.RETURN,"hadMeasles",RCODE,RNAME) S N=N+1 S MEASLES=1
 ;I $G(^TMP("PXRHM",$J,IENMEASL,"VIMM-MEASLES DIAGNOSIS"))["DUE NOW" S N=N+1 S MEASLES=1
 ;W "MEASLES=",MEASLES,!
 K ^TMP("PXRHM",$J)
 N REMNAME S REMNAME="VIMM-RUBELLA DIAGNOSIS"
 S IENRUBEL=$$FIND1^DIC(FILE,IENS,FLAGS,REMNAME,INDEX,SCREEN,EMSG)
 K REMNAME
 ;D MAIN^PXRM(DFN,IENRUBEL,0)
 S RCODE="056.9"
 S RNAME="Rubella"
 I $$EN^C0IPXRM(DFN,IENRUBEL,.RETURN,"hadRubella",RCODE,RNAME) S N=N+1 S RUBELLA=1
 ;I $G(^TMP("PXRHM",$J,IENRUBEL,"VIMM-RUBELLA DIAGNOSIS"))["DUE NOW" S N=N+1 S RUBELLA=1
 ;W "RUBELLA=",RUBELLA,!
 K ^TMP("PXRHM",$J)
 I N=0 Q
 Q
 ;

C0ISOAP
C0ISOAP   ; GPL/RCR - Web Service utilities; 8/31/09; 12/08/2010
 ;;0.1;IMMUNIZATIONS FORECASTING;nopatch;noreleasedate;Build 82
 ;Copyright 2009 George Lilly.  Licensed Apache 2
 ;
 ; Modified by Chris Richardson, November, 2010.  George's License is still in force.
 ; Code has been modified to accept very large XML documents and block them logically.
 ; 3101208 - RCR - Correct end of buffer condition, BF=">"
 ;
 QUIT
 ;
 ;  ==========
SOAP(C0RTN,C0PARMS,C0DETAIL) ; MAKES A SOAP CALL FOR BASED ON C0PARMS passed by reference
 ; C0PARMS("payload")=name of location of the xml payload
 ; C0PARMS("url")=url string for the SOAP call
 ; C0PARMS("envelop")=name of the location of the xml soap envelop
 ; C0PARMS("payloadVar")=variable in the envelop for the payload; defaults to "payload"
 ; C0PARMS("return")=format to return:  xml, outline, global -- default is global
 ;
 N C0URL,PAYLOAD,ENVELOP,PLVAR,C0RSLT,HEADER,C0RHDR,C0MIME,XML,C0MIME
 S C0URL=$G(C0PARMS("url"))
 ;I C0URL="" S C0URL="https://54.235.195.41:8443/opencds-decision-support-service-1.0.0-SNAPSHOT/evaluate"
 I C0URL="" S C0URL="https://54.235.195.41:8080/opencds-decision-support-service-1.0.0-SNAPSHOT/evaluate"
 S PAYLOAD=$G(C0PARMS("payload"))
 S ENVELOP=$G(C0PARMS("envelop"))
 S C0MIME="content-type: text/soap+xml; charset=utf-8"
 S HEADER(1)="User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; MS Web Services Client Protocol 2.0.50727.3074)"
 S HEADER(2)="Expect: 100-continue"
 S HEADER(3)="Connection: Keep-Alive"
 ;
 ; fudge for testing... get the complete xml from a file
 S XMLLOC=$NA(^TMP("ICE",$J,"XML",1))
 W $$FTG^%ZISH("/home/vista/","ice-test.xml",XMLLOC,4)
 S XMLLOC=$NA(^TMP("ICE",$J,"XML"))
 ;
 N C0IV
 S C0IV("outPayload")=$$ENCODE(XMLLOC)
 S C0IV("hl7OutTime")=$$FMDTOUTC^C0IUTIL(DT)
 D GETNMAP^C0IUTIL("XML","TENVOUT^C0ITEST","C0IV")
 I $G(DEBUG) B
 ;
 K C0RSLT,C0RHDR
 ;
 ; make the soap call
 ;
 S ok=$$httpPOST^%zewdGTM(C0URL,.XML,C0MIME,.C0RSLT,.HEADER,"",.PARM5,.C0RHDR)
 ;
 ; locate and decode the embedded xml
 ;
 K C0RXML
 I $D(C0RSLT(1)) D  ;
 . D CHUNK("C0RXML","C0RSLT",1000) ;RETURN IN AN ARRAY
 . I $G(C0RSLT("RELOC",1,1))'="" D  ; THERE WAS EMBEDED XML
 . . K C0RXML ; THROW AWAY WRAPPER
 . . M C0RXML=C0RSLT("RELOC",1) ; REPLACE WITH EMBEDDED DOCUMENT 
 ;
 I '$D(C0RXML(2)) D  Q  ;
 . ;W !,"ERROR DETECTED",!
 . ;ZWR C0RXML
 . M @C0RTN=C0RXML
 ;
 I $G(C0PARMS("return")="xml" D  Q  ;
 . M @C0RTN=C0RXML
 ;
 ; call the parser
 N C0IDOCID
 S C0IDOCID=$$PARSE^C0IEXTR("C0RXML","C0IDOC"_$J)
 ;
 I $G(C0PARMS("return")="outline" D  Q  ;
 . ;S GN=$NA(^TMP("SOAPOUT",$J))
 . D show^C0IUTIL(1,C0IDOCID,C0RTN)
 
 ;
 ; convert the MXML DOM into a mumps array to return
 ;
 D domo3^C0IEXTR("C0RTN")
 ;
 ; return all the artifacts here
 ;
 Q
 ;
ENCODE(ZXML) ; extrinsic which returns a base64 encoding of the XML, which 
 ; is passsed by name
 N ZI,ZS
 S ZI="" S ZS=""
 F  S ZI=$O(@ZXML@(ZI)) Q:ZI=""  D  ;
 . S ZS=ZS_@ZXML@(ZI)
 Q $$ENCODE^RGUTUU(ZS)
 ;
 ; begin old code
 ;
 ; TEMPLATE ID C0TID
 ; RETURNS THE XML RESULT IN C0RTN, PASSED BY NAME
 ; C0VOR IS THE NAME OF A VARIABLE OVERRIDE ARRAY, WHICH IS APPLIED 
 ; BEFORE MAPPING
 ;
 ; ARTIFACTS SECTION
 ; THE FOLLOWING WILL SET UP DEBUGGING ARTIFACTS FOR A POSSIBLE FUTURE
 ; ONLINE DEBUGGER. IF DEBUG=1, VARIABLES CONTAINING INTERMEDIATE RESULTS
 ; WILL NOT BE NEWED.
 I $G(DEBUG)="" N C0V ; CATALOG OF ARTIFACT VARIABLES AND ARRAYS
 S C0V(100,"C0XF","XML TEMPLATE FILE NUMBER")=""
 S C0V(200,"C0HEAD","SOAP HEADER VARIABLE NAME")=""
 S C0V(300,"header","SOAP HEADER")=""
 S C0V(400,"C0MIME","MIME TYPE")=""
 S C0V(500,"C0URL","WS URL")=""
 S C0V(550,"C0PURL","PROXY URL")=""
 S C0V(600,"C0XML","XML VARIABLE NAME")=""
 S C0V(700,"xml","OUTBOUND XML")=""
 S C0V(800,"C0RSLT","RAW XML RESULT RETURNED FROM WEB SERVICE")=""
 S C0V(900,"C0RHDR","RETURNED HEADER")=""
 S C0V(1000,"C0RXML","XML RESULT NORMALIZED")=""
 S C0V(1100,"C0R","REPLY TEMPLATE")=""
 S C0V(1200,"C0REDUX","REDUX STRING")=""
 S C0V(1300,"C0IDX","RESULT XPATH INDEX")=""
 S C0V(1400,"C0ARY","RESULT XPATH ARRAY")=""
 S C0V(1500,"C0NOM","RESULT DOM DOCUMENT NAME")=""
 S C0V(1600,"C0ID","RESULT DOM ID")=""
 N ZI,ZN,ZS
 S ZN=""
 D:$G(DEBUG)=""   ; G NOTNEW ; SKIP NEWING THE VARIABLES IF IN DEBUG
 . S ZI="",ZN="",ZS=""
 . F  S ZI=$O(COPV(ZI)) Q:ZI=""  D
 . . ; S ZJ=$O(C0V(ZI,"")) ; SET UP NEW COMMAND
 . . S ZN=ZN_ZS_$O(C0V(ZI,"")),ZS=","
 . .QUIT
 .QUIT
 I $L(ZN) N @ZN  ; Apply collected NEW Variables 1 time
 ;D INITXPF("C0F") ; SET FILE NUMBER AND PARAMATERS 
 S C0XF=C0F("XML FILE NUMBER") ; FILE NUMBER FOR THE C0 XML TEMPLATE FILE
 D
 . I +C0TID=0 D  Q  ; A STRING WAS PASSED FOR THE TEMPLATE NAME
 . . ;S C0UTID=$$RESTID(C0DUZ,C0TID) ;RESOLVE TEMPLATE IEN FROM NAME
 . .QUIT
 . ;
 . S C0UTID=C0TID ; AN IEN WAS PASSED
 .QUIT
 N xml,template,header
 S C0HEAD=$$GET1^DIQ(C0XF,C0UTID_",",2.2,,"header")
 S C0MIME=$$GET1^DIQ(C0XF,C0UTID_",","MIME TYPE")
 S C0PURL=$$GET1^DIQ(C0XF,C0UTID_",","PROXY SERVER")
 ;S C0URL=$$GET1^DIQ(C0XF,C0UTID_",","URL") ;GPL CHANGE TO USE PROD FLAG
 D SETUP^C0MAIN() ; INITIALIZE C0ACCT IEN OF WS ACCOUNT
 S C0URL=$$WSURL^C0MAIN(C0ACCT) ; RESOLVES PRODUCTION VS TEST
 S C0XML=$$GET1^DIQ(C0XF,C0UTID_",",2.1,,"xml")
 S C0TMPL=$$GET1^DIQ(C0XF,C0UTID_",",3,,"template")
 I C0TMPL="template" D  ; there is a template to process
 . K xml ; going to replace the xml array
 . D EN^C0MAIN("xml","url",C0DUZ,C0DFN,C0UTID,$G(C0VOR))
 . ;N ZZG M ZZG(1)=xml
 . ;S ZDIR=^TMP("C0CCCR","ODIR")
 . ;ZWR ZZG(1)
 . ;W $$OUTPUT^C0CXPATH("xml(1)","GPLTEST-"_ZDFN_".xml",ZDIR)
 .QUIT
 I $G(C0PROXY) S C0URL=C0PURL
 K C0RSLT,C0RHDR
 S ok=$$httpPOST^%zewdGTM(C0URL,.xml,C0MIME,.C0RSLT,.header,"",.gpl5,.C0RHDR)
 K C0RXML
 I $D(GPLTEST) D  ; WAY TO TEST WITH DATA FROM LIVE
 . K C0SRLT ; GPL HACK TO TEST XML FROM LIVE
 . I GPLTEST=1 M C0RSLT=^C0G ; THIS IS THE BIG STATUS EMBEDDED XML FROM LIVE
 . I GPLTEST=2 M C0RSLT=^C0G2 ; THIS IS THE BIG REFILL XML  FROM LIVE 
 . Q
 ;I DUZ=135 D  ; patch so others can use the pullback while i debug - gpl
 ;. ;I $D(C0RSLT(1)) D NORMAL("C0RXML","C0RSLT(1)") ;RETURN XML IN AN ARRAY
 ;. I $D(C0RSLT(1)) D CHUNK("C0RXML","C0RSLT",2000) ;RETURN IN AN ARRAY  
 ;. ; SWITCHED TO CHUNK TO HANDLE ARRAYS OF XML
 ;E  I $D(C0RSLT(1)) D NORMAL("C0RXML","C0RSLT(1)") ;RETURN XML IN AN ARRAY
 ; The following is a temporary fix to keep eRx working while a better 
 ; solution is developed. Template ID 6 is GETMEDS for eRx and it needs
 ; to handle xml files that are too big for NORMAL to handle. So, I wrote
 ; CHUNK which will allow us to handle any size xml file bound for the
 ; EWD parser. 
 ; However, all the other templates in eRx need NORMAL to find the 
 ; embedded XML file in their web service responses. So, we will use
 ; CHUNK for template 6 and continue to use NORMAL for all other templates
 ; we can handle big med lists, but not big web service calls.
 ; What is needed is a better NORMAL (see NORMAL2) or another routine
 ; to detect, extract, and decode embeded XML files of any size. gpl 10/8/10
 ;
 I $D(C0RSLT(1)) D  ;
 . D CHUNK("C0RXML","C0RSLT",1000) ;RETURN IN AN ARRAY
 . I $G(C0RSLT("RELOC",1,1))'="" D  ; THERE WAS EMBEDED XML
 . . K C0RXML ; THROW AWAY WRAPPER
 . . M C0RXML=C0RSLT("RELOC",1) ; REPLACE WITH EMBEDDED DOCUMENT 
 ; D:C0UTID=6 
 ;. I $D(C0RSLT(1)) D CHUNK("C0RXML","C0RSLT",2000) QUIT  ;RETURN IN AN ARRAY
 ;. ;
 ;. I $D(C0RSLT(1)) D NORMAL("C0RXML","C0RSLT(1)") ;RETURN XML IN AN ARRAY
 ;.QUIT
 S C0R=$$GET1^DIQ(C0XF,C0UTID_",",.03,"I") ; REPLY TEMPLATE
 ; reply templates are optional and are specified by populating a
 ; template pointer in field 2.5 of the request template
 ; if specified, the reply template is the source of the REDUX string
 ; used for XPath on the reply, and for UNBIND processing
 ; if no reply template is specified, REDUX is obtained from the request
 ; template and no UNBIND processing is performed. The XPath array is
 ; returned without variable bindings
 I C0R'="" D  ; REPLY TEMPLATE EXISTS
 . I +$G(DEBUG)'=0 W "REPLY TEMPLATE:"_C0R,!
 . S C0TID=C0R ;
 .QUIT
 S C0REDUX=$$GET1^DIQ(C0XF,C0UTID_",",2.5) ;XPATH REDUCTION STRING
 K C0IDX,C0ARY ; XPATH INDEX AND ARRAY VARS
 S C0NOM="C0MEDS"_$J ; DOCUMENT NAME FOR THE DOM
 N ZBIG S ZBIG=0
 ;I C0UTID'=6 D  ;
 ;. S ZBIG=$$TOOBIG("C0RXML") ; PATCH BY GPL WHICH ASSUMES ONLY
 ;. ; TEMPLATE 1 IS A REGULAR XML FILE.. EVERYTHING ELSE HAS EMBEDDED XML
 ;.QUIT
 ;D
 ;. I ZBIG>0 D    QUIT  ; PROBABLY AN EMBEDDED XML DOCUMENT
 ;. . S C0ID=$$UNWRAP("C0RXML",ZBIG,C0NOM) ; DECODE AND PARSE THE EMBEDED XML
 ;. .QUIT
 ;. ;
 ;. ; ELSE
 ;. S C0ID=$$PARSE^C0XEWD("C0RXML",C0NOM) ;CALL THE PARSER
 ;.QUIT
 I $D(GPLTEST) B  ; STOP TO LOOK AT C0RXML
 S C0ID=$$PARSE^C0XEWD("C0RXML",C0NOM) ;CALL THE PARSER
 S C0ID=$$FIRST^C0XEWD($$ID^C0XEWD(C0NOM)) ;ID OF FIRST NODE
 D XPATH^C0XEWD(C0ID,"/","C0IDX","C0ARY","",C0REDUX) ;XPATH GENERATOR
 S OK=$$DELETE^C0XEWD(C0NOM) ; REMOVE PARSED XML FROM THE EWD DOM
 ; Next, call UNBIND to map the reply XPath array to variables
 ; This is only done if a Reply Template is provided
 D DEMUXARY(C0RTN,"C0ARY")
 ; M @C0RTN=C0ARY
 QUIT
 ;
 ;  ===================
TOOBIG(ZXML) ; EXTRINSIC WHICH RETURNS TRUE IF ANY NODE IS OVER 2000 CHARS
 ; RETURNS THE INDEX OF THE LARGE NODE . IF NO LARGE NODE, RETURNS ZERO
 N ZI,ZR
 S ZI=""
 S ZR=0 ; DEFAULT FALSE
 ; First time we go over 1,000, we can stop.
 F  S ZI=$O(@ZXML@(ZI)) Q:ZI=""  I $L(@ZXML@(ZI))>1000 S ZR=ZI Q   ; First oversize stops
 QUIT ZR
 ;
 ; end old code
 ; ===================
NORMAL(OUTXML,INXML) ;NORMALIZES AN XML STRING PASSED BY NAME IN INXML
 ; INTO AN XML ARRAY RETURNED IN OUTXML, ALSO PASSED BY NAME
 ;
 N INBF,ZI,ZN,ZTMP
 S ZN=1,INBF=@INXML
 S @OUTXML@(ZN)=$P(INBF,"><",ZN)_">"
 ; S ZN=ZN+1
 ; F  S @OUTXML@(ZN)="<"_$P(@INXML,"><",ZN) Q:$P(@INXML,"><",ZN+1)=""  D  ;
 ; Should speed up, and not leave a dangling node, and doesn't stop at first NULL
 F ZN=2:1:$L(INBF,"><") S @OUTXML@(ZN)="<"_$P(INBF,"><",ZN)_">"
 ; . ; S ZN=ZN+1 
 ; .QUIT
 QUIT
 ;  ================
 ; The goal of this block has changed a little bit.  Most modern MUMPS engines can
 ; handle a 1,000,000 byte string.  We will use BF to hold hunks that big so that 
 ; we can logically suck up a big hunk of the input to supply the reblocking of the XML
 ; into more logical blocks less than 2000 bytes in length blocks.
 ; A series of signals will be needed, Source (INXML) is exhausted (INEND),
 ; BF is less than 2200 bytes (BFLD, BuFfer reLoaD)
 ; BF is Full (BF contains 998,000 bytes or more, BFULL)
 ; BF and Process is Complete (BFEND)
 ; ZSIZE defaults to 2,000 now, but can be set lower or higher
 ;
CHUNK(OUTXML,INXML,ZSIZE) ; BREAKS INXML INTO ZSIZE BLOCKS
 ; INXML IS AN ARRAY PASSED BY NAME OF STRINGS
 ; OUTXML IS ALSO PASSED BY NAME
 ; IF ZSIZE IS NOT PASSED, 2000 IS USED
 I '$D(ZSIZE) S ZSIZE=2000 ; DEFAULT BLOCK SIZE
 N BF,BFEND,BFLD,BFMAX,BFULL,INEND,ZB,ZI,ZJ,ZK,ZL,ZN
 ; S ZB=ZSIZE-1
 S ZN=1
 S BFMAX=998000
 S ZI=0 ; BEGINNING OF INDEX TO INXML
 S (BFLD,BFEND,BFULL,INEND)=0,BF=""
 ; Major loop loads the buffer, BF, and unloads it into the Output Array
 ;  in 
 F  D  Q:BFEND
 . ; Input LOADER
 . D:'INEND
 . . F  S ZI=$O(@INXML@(ZI)) S INEND=(ZI="")  Q:INEND!BFULL  D   ; LOAD EACH STRING IN INXML
 . . . S BF=BF_@INXML@(ZI)                                       ; ADD TO THE BF STRING
 . . . S BFULL=($L(BF)>BFMAX)
 . . .QUIT
 . .QUIT
 . ;  Full Buffer, BF, now check for Encryption and Unpack
 . D TEST4COD(.BF,"C0RSLT(""RELOC"")")
 . ; Output BREAKER
 . F  Q:BFLD  D   ; ZJ=1:ZSIZE:ZL D  ;
 . . ; ZK=$S(ZJ+ZB<ZL:ZJ+ZB,1:ZL) ; END FOR EXTRACT
 . . F ZK=ZSIZE:-1:0  Q:$E(BF,ZK)=">"
 . . I ZK=0 S ZK=ZSIZE
 . . S @OUTXML@(ZN)=$E(BF,1,ZK) ; PULL OUT THE PIECE
 . . S ZN=ZN+1 ; INCREMENT OUT ARRAY INDEX
 . . S BF=$E(BF,ZK+1,BFMAX)
 . . S BFLD=($L(BF)<(ZSIZE*2))
 . .QUIT
 . S BFEND=(INEND&BFLD)!(">"[BF)
 . I $L(BF)&BFEND S @OUTXML@(ZN)=BF,BF=""
 .QUIT
 QUIT
 ;  ==============
 ; Test for Encryption, extract it and decode it.
TEST4COD(INBF,RELOC) 
 N DBF,I,MSK,TBF,TRG,RCNT
 S RCNT=0
 ;  Segments expected <seg 1>DATA</seg 1><seg 2>DATA</seg 2>
 ;                           ^   ^
 S MSK=""   ; It turns out that some of the characters used were not reliable
 F I=32:1:42,44:1:47,62:1:64,91:1:96 S MSK=MSK_$C(I)
 F I=1:1:$L(INBF,"</")-1 D
 . S TBF=$RE($P($RE($P(INBF,"</",I)),">"))
 . ; Remove sample for testing
 . ; Set the trigger, mostly included to show intent and associated code
 . ;  this could be refined later if determined already obvious enough
 . S TRG=0
 . DO:$L(TBF)>20  ; If $TR doesn't remove anything, then these characters are not there
 . . I (TBF=$TR(TBF,MSK))   S TRG=1
 . . ; I (TBF=$TR(TBF," <->@*!?.,:;#$%&[/|\]={}~")) S TRG=1
 . . ;   <>!"#$%&'()*,-./67:;<>?@[\]^_`fqr{|}~  <<= Ignore 6,7,f,q, and r
 . . ; Now we set up for the DECODE and replacement in INBF
 . . DO:TRG
 . . . N A,C,CC,CV,CCX,K,XBF,T,V
 . . . DO
 . . . . N I
 . . . . S DBF=$$DECODER(TBF)
 . . . .QUIT
 . . . ;
 . . . S CCX=""
 . . . F K=1:1:$L(DBF) S CC=$E(DBF,K) S:CC?1C C=$A(CC),A(C)=$G(A(C))+1
 . . . S C="",V=""
 . . . F  S C=$O(A(C)) Q:C=""  S CCX=CCX_$C(C) S:A(C)>V V=A(C),CV=C
 . . . S CC=$C(CV)
 . . . ;  The "_$C(13,10)_" may need to be generalized, tested and set earlier
 . . . ;    Expand embedded XML in XBF
 . . . F K=1:1:$L(DBF,CC) S T=$P(DBF,CC,K),XBF(K)=$TR(T,CCX)
 . . . S RCNT=RCNT+1
 . . . M @RELOC@(RCNT)=XBF
 . . . ;   Curley braces and = makes it so it won't trigger a second time by retest.                                
 . . . S INBF=$P(INBF,TBF)_"<{REPLACED}="_RCNT_$P(INBF,TBF,2,999)
 . . .QUIT
 . .QUIT
 .QUIT
 ;  Now shorten the INBF so it gets smaller
 ;S INBF=$P(INBF,">",I+1,99999)
 QUIT
 ;  ===================
DECODER(BF) ; Decrypts the Encrypted Strings
 QUIT $$DECODE^RGUTUU(BF)
 ;  ===================
NORMAL2(OUTXML,INXML) ;NORMALIZES AN ARRAY OF XML STRINGS PASSED BY NAME INXML
 ; AS @INXML@(1) TO @INXML@(x) ALL NUMERIC
 ; INTO AN XML ARRAY RETURNED IN OUTXML, ALSO PASSED BY NAME
 ; this routine doesn't work unless the blocks are on xml tag boundaries - gpl
 ; which is hard to do... this routine is left here awaiting future development
 N ZI,ZN,ZJ
 S ZJ=0
 S ZN=1
 F  S ZJ=$O(@INXML@(ZJ)) Q:+ZJ=0  D  ; FOR EACH XML STRING IN ARRAY
 . S @OUTXML@(ZN)=$P(@INXML@(ZJ),"><",ZN)_">"
 . S ZN=ZN+1
 . F  S @OUTXML@(ZN)="<"_$P(@INXML@(ZJ),"><",ZN) Q:$P(@INXML@(ZJ),"><",ZN+1)=""  D  ;
 . . S @OUTXML@(ZN)=@OUTXML@(ZN)_">"
 . . S ZN=ZN+1
 . .QUIT
 .QUIT
 QUIT
 ;  ===============
 ;
UNWRAP(ZXML,ZI,ZNOM) ; EXTRINSIC TO LOCATE, DECODE AND PARSE AN EMBEDED XML DOC
 ; RETURNS THE DOCID OF THE DOM
 N ZS,ZX
 S ZS=$P($P(@ZXML@(ZI),">",2),"<",1) ; PULL OUT THE ENCODED STRING
 S ZX=$$DECODE^RGUTUU(ZS)
 N ZZ
 N ZY S ZY="<?xml version=""1.0"" encoding=""utf-8""?>"
 I $E(ZX,1,5)'="<?xml" S ZZ(1)=ZY_ZX
 E  S ZZ(1)=ZX
 N ZI
 ;F ZI=1:1 Q:$$REDUCE(.ZZ,ZI) ; CHOP THE STRING INTO 4000 CHAR ARRAY
 S ZI=$$REDUCRCR(.ZZ,1) ; RECURSIVE VERSION OF REDUCE
 S G=$$PARSE^C0XEWD("ZZ",C0NOM)
 ; GTM Specific
 ; I G=0 ZWR ^TMP("MXMLERR",$J,*) B
 QUIT G
 ;  =============
REDUCE(ZARY,ZN) ; WILL REDUCE ZARY(ZN) BY CHOPPING IT TO 4000 CHARS
 ; AND PUTTING THE REST IN ZARY(ZN+1)
 ; ZARY IS PASSED BY REFERENCE
 ; EXTRINSIC WHICH RETURNS FALSE IF THERE IS NOTHING TO REDUCE
 I $L(ZARY(ZN))<4001   QUIT 0 ;NOTHING TO REDUCE
 ;
 S ZARY(ZN+1)=$E(ZARY(ZN),4001,$L(ZZ(ZN))) ;BREAK IT UP
 S ZARY(ZN)=$E(ZARY(ZN),1,4000) ;  
 QUIT 1  ;ACTUALLY REDUCED
 ;  ===========
REDUCRCR(ZARY,ZN) ; RECURSIVE VERSION OF REDUCE ABOVE
 ; WILL REDUCE ZARY(ZN) BY CHOPPING IT TO 4000 CHARS
 ; AND PUTTING THE REST IN ZARY(ZN+1)
 ; ZARY IS PASSED BY REFERENCE
 ; EXTRINSIC WHICH RETURNS FALSE IF THERE IS NOTHING TO REDUCE
 I $L(ZARY(ZN))<4001 Q 0 ;NOTHING TO REDUCE
 ; 
 S ZARY(ZN+1)=$E(ZARY(ZN),4001,$L(ZZ(ZN))) ;BREAK IT UP
 S ZARY(ZN)=$E(ZARY(ZN),1,4000) ;  
 I '$$REDUCRCR(.ZARY,ZN+1) Q 1 ; CALL RECURSIVELY
 ;  
 QUIT 1  ;ACTUALLY REDUCED
 ;  ===========
DEMUXARY(OARY,IARY) ;CONVERT AN XPATH ARRAY PASSED AS IARY TO
 ; FORMAT @OARY@(x,xpath) where x is the first multiple
 N ZI,ZJ,ZK,ZL S ZI=""
 F  S ZI=$O(@IARY@(ZI)) Q:ZI=""  D  ;
 . D DEMUX^C0CMXP("ZJ",ZI)
 . S ZK=$P(ZJ,"^",3)
 . S ZK=$RE($P($RE(ZK),"/",1))
 . S ZL=$P(ZJ,"^",1)
 . I ZL="" S ZL=1
 . S @OARY@(ZL,ZK)=@IARY@(ZI)
 .QUIT
 QUIT
 ;
 ; BEGIN OLD CODE - REMOVE AFTER A WHILE WHEN "SOAP" SETTLES DOWN - GPL
 ;s URL="http://preproduction.newcropaccounts.com/InterfaceV7/Doctor.xml"
 ;D GETPOST1(URL) ;
 ;N I,J
 ;S J=$O(gpl(""),-1) ; count of things in gpl
 ;F I=1:1:J S gpl(I)=$$CLEAN^C0EWDU(gpl(I))
 ;I $$GET1^DIQ(113059001,"3,",2.1,,"gpl")'="gpl" D  Q  ; ERR GETTING TEMPLATE
 ;. W "ERROR RETRIEVING TEMPLATE",!
 ;S gpl(1)="RxInput="_gpl(1)
 ; S url="https://preproduction.newcropaccounts.com/InterfaceV7/RxEntry.aspx"
 ; S url="https://secure.newcropaccounts.com/V7/WebServices/Doctor.asmx"
 S url="http://76.110.202.22/v7/WebServices/Doctor.asmx" ;RICHARD'S SOAP PROXY SERVER
 ;S url="http://76.110.202.22/" ;RICHARD'S SOAP PROXY SERVER
 N header
 S ZH=$$GET1^DIQ(113059001,"3,",2.2,,"header")
 ;W $$OUTPUT^C0CXPATH("gpl(1)","NewCropV7-DOCTOR2.xml","/home/dev/CCR/"),!
 S ok=$$httpPOST^%zewdGTM(url,.gpl,"text/xml; charset=utf-8",.gpl6,.header,"",.gpl5,.gpl7)
 ;S ok=$$httpPOST2(.RTN,url,.gpl,"text/xml; charset=utf-8",.gpl6,.header,"",.gpl5,.gpl7)
 ;S ok=$$httpPOST2(.RTN,"https://preproduction.newcropaccounts.com/InterfaceV7/RxEntry.aspx",.gpl,"application/x-www-form-urlencoded",.gpl6,"","",.gpl5,.gpl7)
 zwr gpl6
 QUIT
 ;  ============
PARSE(INXML,INDOC) ;CALL THE EWD PARSER ON INXML, PASSED BY NAME
 ; INDOC IS PASSED AS THE DOCUMENT NAME TO EWD
 ; EXTRINSIC WHICH RETURNS THE DOCID ASSIGNED BY EWD
 N ZR
 M ^CacheTempEWD($j)=@INXML ;
 S ZR=$$parseDocument^%zewdHTMLParser(INDOC)
 K ^CacheTempEWD($j) ;clean up after
 QUIT ZR
 ;  ============
ADDWS(WSNAME,WSTNAM,WSURL) ; ADD A WEB SERVICE TEMPLATE GIVEN A WSDL URL
 ; WSNAME IS THE NAME OF THE WEB SERVICE.. WILL BE LAYGO
 ; WSTNAM IS THE TEMPLATE NAME TO BE ADDED TO BE CREATED AND IMPORTED
 ; WSURL IS THE URL TO THE WSDL DEFINITION OF THE TEMPLATE
 ; WILL FIRST TRY AND FETCH THE XML FROM THE INTERNET USING THE URL
 ; IF SUCCESSFUL, AND THE RETURN XML IS VALID, AN ENTRY IN THE XML TEMPLATE
 ; FILE WILL BE CREATED, WITH THE RAW XML AND DERIVED TEMPLATE XML.
 ; THEN ENTRIES IN THE BINDING SUBFILE WILL BE CREATED FOR EACH XPATH
 ; FINALLY, THE TEMPLATE WILL BE POINTED TO IN THE WEB SERVICE FILE TEMPLATE
 ; MULTIPLE
 N C0WSF S C0WSF=113059003 ; WEB SERVICE FILE
 N C0XTF S C0XTF=113059001 ; XML TEMPLATE FILE
 ; NEVER MIND... WRONG APPROACH
 QUIT
 ;  ===========
TBLD(INT) ; TEMPLATE BUILD OF TEMPLATE INT
 ; want to break this up into pieces -  gpl
 ; THE TEMPLATE NEEDS TO EXIST AND THE DEFINING XML URL MUST BE POPULATED
 ; THEN THE DEFINING XML WILL BE RETRIVED AND STORED INTO THE RAW XML FIELD
 ; IT WILL BE TRANSFORMED INTO A TEMPLATE AND STORED IN THE TEMPLATE FIELD
 ; ALL THE XPATHs WILL BE EXTRACTED AND A BINDING MULTIPLE CREATED FOR EACH
 ; ALL IN ONE SIMPLE ROUTINE
 ; WHAT REMAINS IS FOR MANUAL ENTRY OF THE OTHER FIELDS IN THE BINDINGS
 N C0XTF S C0XTF=113059001 ; XML TEMPLATE FILE
 N C0URL ; URL TO RETRIEVE THE DEFINING XML FOR THE TEMPLATE
 S C0URL=$$GET1^DIQ(C0XTF,INT,2)
 D GET1URL^C0EWD2(C0URL)
 D CLEAN^DILF
 ; D WP^DIE(ZF,ZIEN_",",1,,$NA(@ZOR@(ZD,ZI,"TX"))) ; WP OF ORDER TXT
 D WP^DIE(C0XTF,INT_",",2.1,,$NA(gpl))
 D WP^DIE(C0XTF,INT_",",3,,$NA(gplTEMP))
 ;N C0FDA ; DON'T NEW FOR TESTING
 D ADDXP("gpl2",INT)
 QUIT
 ;  ==========
COMPILE(INTID) ;COMPILE A XML TEMPLATE IN RECORD INTID
 D INITXPF("C0F") ;FILE ARRAY TO POINT TO C0 FILES
 D COMPILE^C0CMXP(INTID,"C0F") ;COMPILE THE TEMPLATE
 QUIT
 ;  ==========
CPBIND(INID,OUTID,FORCE) ; COPIES XPATH BINDINGS FROM TEMPLATE INID
 ; TO TEMPLATE OUTID - ONLY BINDINGS FOR MATCHING XPATHS ARE COPIED
 ; NOTE - REDO THIS TO USE FILEMAN CALLS GPL
 ; WILL NOT OVERWRITE UNLESS FORCE=1
 N FARY,ZI
 S FARY="C0F"
 D INITXPF("C0F")
 I +OUTID=0 S OUTID=$$RESTID^C0CSOAP(OUTID,FARY) ;RESOLVE TEMPLATE NAME
 I +INID=0 S INID=$$RESTID^C0CSOAP(INID,FARY) ;RESOLVE TEMPLATE NAME
 S ZI=0
 F  S ZI=$O(^C0X(OUTID,5,ZI)) Q:+ZI=0  D  ; FOR EACH XPATH IN OUTID
 . W !,ZI," ",^C0X(OUTID,5,ZI,0)
 . S ZN=^C0X(OUTID,5,ZI,0)
 . I $D(^C0X(OUTID,5,ZI,1)) D  ;Q  ;
 . . W !,"ERROR XPATH BINDING EXISTS ",ZI
 . .QUIT
 . D  ; LOOK FOR MATCHING XPATH IN SOURCE
 . . S ZJ=$O(^C0X(INID,5,"B",ZN,""))
 . . ;W " FOUND:",ZJ
 . . I ZJ'="" D  ;
 . . . ;W !,"SETTING ",$G(^C0X(INID,5,ZJ,1))
 . . . S ^C0X(OUTID,5,ZI,0)=^C0X(INID,5,ZJ,0) ;GET BOTH FIELDS
 . . . S ^C0X(OUTID,5,ZI,1)=$G(^C0X(INID,5,ZJ,1))
 . . .QUIT
 . .QUIT
 .QUIT
 QUIT
 ;  ===========
INITXPF(ARY) ;INITIAL XML/XPATH FILE ARRAY
 ;
 S @ARY@("XML FILE NUMBER")=113059001
 S @ARY@("BINDING SUBFILE NUMBER")=113059001.04
 S @ARY@("MIME TYPE")="2.3"
 S @ARY@("PROXY SERVER")="2.4"
 S @ARY@("REPLY TEMPLATE")=".03"
 S @ARY@("TEMPLATE NAME")=".01"
 S @ARY@("TEMPLATE XML")="3"
 S @ARY@("URL")="1"
 S @ARY@("WSDL URL")="2"
 S @ARY@("XML")="2.1"
 S @ARY@("XML HEADER")="2.2"
 S @ARY@("XPATH REDUCTION STRING")="2.5"
 S @ARY@("CCR VARIABLE")="4"
 S @ARY@("FILEMAN FIELD NAME")="1"
 S @ARY@("FILEMAN FIELD NUMBER")="1.2"
 S @ARY@("FILEMAN FILE POINTER")="1.1"
 S @ARY@("INDEXED BY")=".05"
 S @ARY@("SQLI FIELD NAME")="3"
 S @ARY@("VARIABLE NAME")="2"
 QUIT
 ;  =============
ADDXP(INARY,TID) ;ADD XPATH .01 FIELD TO BINDING SUBFILE OF TEMPLATE TID
 N FARY
 S FARY="C0FILES"
 D INITXPF(FARY)
 D ADDXP^C0CMXP(INARY,TID,FARY) ;
 QUIT
 ;  =============
ADDXML(INXML,TEMPID) ;ADD XML TO A TEMPLATE ID TEMPID
 ; INXML IS PASSED BY NAME
 N FARY S FARY="C0FILES"
 D INITXPF(FARY)
 D ADDXML^C0CMXP(INXML,TEMPID,FARY) ;CALL C0C ROUTINE TO ADD TO THE FILE
 QUIT
 ;  =============
ADDTEMP(INXML,TEMPID,FARY) ;ADD XML TEMPLATE TO TEMPLATE RECORD TEMPID FIELD 3
 ;
 N FARY
 S FARY="C0FILES"
 D INITXPF(FARY)
 D ADDTEMP^C0CMXP(INXML,TEMPID,FARY)
 QUIT
 ;  =============
GETXML(OUTXML,TEMPID,FARY) ;GET THE XML FROM TEMPLATE TEMPID
 ;
 N FARY
 S FARY="C0FILES"
 D INITXPF(FARY)
 N C0UTID ; TEMPLATE IEN TO USE
 D GETXML^C0CMXP(OUTXML,TEMPID,FARY)
 QUIT
 ;  =============
GETTEMP(OUTXML,TEMPID,FARY) ;GET THE TEMPLATE XML FROM TEMPLATE TEMPID
 ;
 N FARY
 S FARY="C0FILES"
 D INITXPF(FARY)
 N C0UTID ; TEMPLATE IEN TO USE
 D GETTEMP^C0CMXP(OUTXML,TEMPID,FARY)
 QUIT
 ;  =============
COPYHDR(ZS,ZD) ; COPY XML HEADER FROM RECORD ZS TO ZD
 ; ASSUMES C0 XML TEMPLATE FILE
 N FARY
 D INITXPF("FARY")
 D COPYWP^C0CMXP("XML HEADER",ZS,ZD,"FARY")
 QUIT
 ;  =============
UPDIE   ; INTERNAL ROUTINE TO CALL UPDATE^DIE AND CHECK FOR ERRORS
 K ZERR
 D CLEAN^DILF
 D UPDATE^DIE("","C0FDA","","ZERR")
 I $D(ZERR) D  ;
 . W "ERROR",!
 . ZWR ZERR
 . BREAK  ;  Not production
 .QUIT
 K C0FDA
 QUIT
 ;  =============C0UTID ; TEMPLATE IEN TO USE
 D GETTEMP^C0CMXP(OUTXML,TEMPID,FARY)
 QUIT
 ;  =============

C0ISOAP2
C0ISOAP   ; GPL/RCR - Web Service utilities; 8/31/09; 12/08/2010
 ;;0.1;IMMUNIZATIONS FORECASTING;nopatch;noreleasedate;Build 82
 ;Copyright 2009 George Lilly.  Licensed Apache 2
 ;
 ; Modified by Chris Richardson, November, 2010.  George's License is still in force.
 ; Code has been modified to accept very large XML documents and block them logically.
 ; 3101208 - RCR - Correct end of buffer condition, BF=">"
 ;
 QUIT
 ;
 ;  ==========
SOAP(C0RTN,C0PARMS,C0DETAIL) ; MAKES A SOAP CALL FOR BASED ON C0PARMS passed by reference
 ; C0PARMS("payload")=name of location of the xml payload
 ; C0PARMS("url")=url string for the SOAP call
 ; C0PARMS("envelop")=name of the location of the xml soap envelop
 ; C0PARMS("payloadVar")=variable in the envelop for the payload; defaults to "payload"
 ;
 N C0URL,PAYLOAD,ENVELOP,PLVAR,C0RSLT,HEADER,C0RHDR,C0MIME,XML,C0MIME
 S C0URL=$G(C0PARMS("url"))
 ;I C0URL="" S C0URL="https://54.235.195.41:8443/opencds-decision-support-service-1.0.0-SNAPSHOT/evaluate"
 I C0URL="" S C0URL="http://54.235.195.41:8080/opencds-decision-support-service-1.0.0-SNAPSHOT/evaluate"
 S PAYLOAD=$G(C0PARMS("payload"))
 S ENVELOP=$G(C0PARMS("envelop"))
 S C0MIME="content-type: text/soap+xml; charset=utf-8"
 S HEADER(1)="User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; MS Web Services Client Protocol 2.0.50727.3074)"
 S HEADER(2)="Expect: 100-continue"
 S HEADER(3)="Connection: Keep-Alive"
 ;
 ; fudge for testing... get the request xml from a file
 S XMLLOC=$NA(^TMP("ICE",$J,"XML",1))
 N ZOK
 ;S ZOK=$$FTG^%ZISH("/home/vista/","ice-test.xml",XMLLOC,4)
 S ZOK=$$FTG^%ZISH("/home/vista/","ICE-SOAP-NoImmunizationMessage.xml",XMLLOC,4)
 S XMLLOC=$NA(^TMP("ICE",$J,"XML"))
 ;
 ;M XML=@XMLLOC
 N ZI S ZI=""
 F  S ZI=$O(@XMLLOC@(ZI)) Q:ZI=""  D  ;
 . S XML(ZI)=@XMLLOC@(ZI)
 . I $D(@XMLLOC@(ZI,"OVF")) D  ;
 . . N ZJ S ZJ=""
 . . F  S ZJ=$O(@XMLLOC@(ZI,"OVF",ZJ)) Q:ZJ=""  D  ;
 . . . S XML(ZI)=XML(ZI)_@XMLLOC@(ZI,"OVF",ZJ)
 ;N C0IV
 ;S C0IV("outPayload")=$$ENCODE(XMLLOC)
 ;S C0IV("hl7OutTime")=$$FMDTOUTC^C0IUTIL(DT)
 ;D GETNMAP^C0IUTIL("XML","TENVOUT^C0ITEST","C0IV")
 ;K XML(0)
 I $G(DEBUG) D  B
 . N ZZI S ZZI=""
 . S XML2=""
 . F  S ZZI=$O(XML(ZZI)) Q:ZZI=""  D  ;
 . . S XML2=XML2_XML(ZZI)
 . D CHUNK("C0RXML","XML2",1000) ;RETURN IN AN ARRAY
 ;
 K C0RSLT,C0RHDR
 ;
 ; make the soap call
 ;
 S ok=$$httpPOST^C0IEWD(C0URL,.XML,C0MIME,.C0RXML,.HEADER) ; ,,1) for test
 ;S ok=$$httpPOST^%zewdGTM(C0URL,.XML,C0MIME,.C0RSLT,.HEADER,"",.PARM5,.C0RHDR)
 ;
 ; locate and decode the embedded xml
 ;
 N ALLXML S ALLXML=""
 S ZI=""
 F  S ZI=$O(C0RXML(ZI)) Q:ZI=""  D  ;
 . S ALLXML=ALLXML_C0RXML(ZI)
 N XMLBASE64
 S XMLBASE64=$P($P(ALLXML,"</base64EncodedPayload>",1),"<base64EncodedPayload>",2)
 N RTNXML
 S RTNXML(1)=$$DECODER(XMLBASE64)
 S OK=$$REDUCRCR(.RTNXML,1)
 N RXML S RXML=$NA(^TMP("ICE",$J,"RETURNXML"))
 M @RXML=RTNXML
 ;B
 ;K C0RSLT
 ;I $D(C0RXML(1)) D  ;
 ;. D CHUNK("C0RSLT","C0RXML",1000) ;RETURN IN AN ARRAY
 ;. I $G(C0RSLT("RELOC",1,1))'="" D  ; THERE WAS EMBEDED XML
 ;. . K C0RXML ; THROW AWAY WRAPPER
 ;. . M C0RXML=C0RSLT("RELOC",1) ; REPLACE WITH EMBEDDED DOCUMENT 
 ;
 I '$D(C0RXML(2)) D  Q  ;
 . W !,"ERROR DETECTED",!
 . ZWR C0RXML
 ;
 ; call the parser
 N OK
 S OK=$$PARSE^C0IEXTR(RXML,"C0IDOC"_$J)
 ;
 ; convert the MXML DOM into a mumps array to return
 ;
 D domo3^C0IEXTR(C0RTN)
 ;
 ; return all the artifacts here
 ;
 Q
 ;
ENCODE(ZXML) ; extrinsic which returns a base64 encoding of the XML, which 
 ; is passsed by name
 N ZI,ZS
 S ZI="" S ZS=""
 F  S ZI=$O(@ZXML@(ZI)) Q:ZI=""  D  ;
 . S ZS=ZS_@ZXML@(ZI)
 Q $$ENCODE^RGUTUU(ZS)
 ;
 ; ===================
NORMAL(OUTXML,INXML) ;NORMALIZES AN XML STRING PASSED BY NAME IN INXML
 ; INTO AN XML ARRAY RETURNED IN OUTXML, ALSO PASSED BY NAME
 ;
 N INBF,ZI,ZN,ZTMP
 S ZN=1,INBF=@INXML
 S @OUTXML@(ZN)=$P(INBF,"><",ZN)_">"
 ; S ZN=ZN+1
 ; F  S @OUTXML@(ZN)="<"_$P(@INXML,"><",ZN) Q:$P(@INXML,"><",ZN+1)=""  D  ;
 ; Should speed up, and not leave a dangling node, and doesn't stop at first NULL
 F ZN=2:1:$L(INBF,"><") S @OUTXML@(ZN)="<"_$P(INBF,"><",ZN)_">"
 ; . ; S ZN=ZN+1 
 ; .QUIT
 QUIT
 ;  ================
 ; The goal of this block has changed a little bit.  Most modern MUMPS engines can
 ; handle a 1,000,000 byte string.  We will use BF to hold hunks that big so that 
 ; we can logically suck up a big hunk of the input to supply the reblocking of the XML
 ; into more logical blocks less than 2000 bytes in length blocks.
 ; A series of signals will be needed, Source (INXML) is exhausted (INEND),
 ; BF is less than 2200 bytes (BFLD, BuFfer reLoaD)
 ; BF is Full (BF contains 998,000 bytes or more, BFULL)
 ; BF and Process is Complete (BFEND)
 ; ZSIZE defaults to 2,000 now, but can be set lower or higher
 ;
CHUNK(OUTXML,INXML,ZSIZE) ; BREAKS INXML INTO ZSIZE BLOCKS
 ; INXML IS AN ARRAY PASSED BY NAME OF STRINGS
 ; OUTXML IS ALSO PASSED BY NAME
 ; IF ZSIZE IS NOT PASSED, 2000 IS USED
 I '$D(ZSIZE) S ZSIZE=2000 ; DEFAULT BLOCK SIZE
 N BF,BFEND,BFLD,BFMAX,BFULL,INEND,ZB,ZI,ZJ,ZK,ZL,ZN
 ; S ZB=ZSIZE-1
 S ZN=1
 S BFMAX=998000
 S ZI=0 ; BEGINNING OF INDEX TO INXML
 S (BFLD,BFEND,BFULL,INEND)=0,BF=""
 ; Major loop loads the buffer, BF, and unloads it into the Output Array
 ;  in 
 F  D  Q:BFEND
 . ; Input LOADER
 . D:'INEND
 . . F  S ZI=$O(@INXML@(ZI)) S INEND=(ZI="")  Q:INEND!BFULL  D   ; LOAD EACH STRING IN INXML
 . . . S BF=BF_@INXML@(ZI)                                       ; ADD TO THE BF STRING
 . . . S BFULL=($L(BF)>BFMAX)
 . . .QUIT
 . .QUIT
 . ;  Full Buffer, BF, now check for Encryption and Unpack
 . D TEST4COD(.BF,"C0RSLT(""RELOC"")")
 . ; Output BREAKER
 . F  Q:BFLD  D   ; ZJ=1:ZSIZE:ZL D  ;
 . . ; ZK=$S(ZJ+ZB<ZL:ZJ+ZB,1:ZL) ; END FOR EXTRACT
 . . F ZK=ZSIZE:-1:0  Q:$E(BF,ZK)=">"
 . . I ZK=0 S ZK=ZSIZE
 . . S @OUTXML@(ZN)=$E(BF,1,ZK) ; PULL OUT THE PIECE
 . . S ZN=ZN+1 ; INCREMENT OUT ARRAY INDEX
 . . S BF=$E(BF,ZK+1,BFMAX)
 . . S BFLD=($L(BF)<(ZSIZE*2))
 . .QUIT
 . S BFEND=(INEND&BFLD)!(">"[BF)
 . I $L(BF)&BFEND S @OUTXML@(ZN)=BF,BF=""
 .QUIT
 QUIT
 ;  ==============
 ; Test for Encryption, extract it and decode it.
TEST4COD(INBF,RELOC) 
 N DBF,I,MSK,TBF,TRG,RCNT
 S RCNT=0
 ;  Segments expected <seg 1>DATA</seg 1><seg 2>DATA</seg 2>
 ;                           ^   ^
 S MSK=""   ; It turns out that some of the characters used were not reliable
 F I=32:1:42,44:1:47,62:1:64,91:1:96 S MSK=MSK_$C(I)
 F I=1:1:$L(INBF,"</")-1 D
 . S TBF=$RE($P($RE($P(INBF,"</",I)),">"))
 . ; Remove sample for testing
 . ; Set the trigger, mostly included to show intent and associated code
 . ;  this could be refined later if determined already obvious enough
 . S TRG=0
 . DO:$L(TBF)>20  ; If $TR doesn't remove anything, then these characters are not there
 . . I (TBF=$TR(TBF,MSK))   S TRG=1
 . . ; I (TBF=$TR(TBF," <->@*!?.,:;#$%&[/|\]={}~")) S TRG=1
 . . ;   <>!"#$%&'()*,-./67:;<>?@[\]^_`fqr{|}~  <<= Ignore 6,7,f,q, and r
 . . ; Now we set up for the DECODE and replacement in INBF
 . . DO:TRG
 . . . N A,C,CC,CV,CCX,K,XBF,T,V
 . . . DO
 . . . . N I
 . . . . S DBF=$$DECODER(TBF)
 . . . .QUIT
 . . . ;
 . . . S CCX=""
 . . . F K=1:1:$L(DBF) S CC=$E(DBF,K) S:CC?1C C=$A(CC),A(C)=$G(A(C))+1
 . . . S C="",V=""
 . . . F  S C=$O(A(C)) Q:C=""  S CCX=CCX_$C(C) S:A(C)>V V=A(C),CV=C
 . . . S CC=$C(CV)
 . . . ;  The "_$C(13,10)_" may need to be generalized, tested and set earlier
 . . . ;    Expand embedded XML in XBF
 . . . F K=1:1:$L(DBF,CC) S T=$P(DBF,CC,K),XBF(K)=$TR(T,CCX)
 . . . S RCNT=RCNT+1
 . . . M @RELOC@(RCNT)=XBF
 . . . ;   Curley braces and = makes it so it won't trigger a second time by retest.                                
 . . . S INBF=$P(INBF,TBF)_"<{REPLACED}="_RCNT_$P(INBF,TBF,2,999)
 . . .QUIT
 . .QUIT
 .QUIT
 ;  Now shorten the INBF so it gets smaller
 ;S INBF=$P(INBF,">",I+1,99999)
 QUIT
 ;  ===================
DECODER(BF) ; Decrypts the Encrypted Strings
 QUIT $$DECODE^RGUTUU(BF)
 ;  ===================
NORMAL2(OUTXML,INXML) ;NORMALIZES AN ARRAY OF XML STRINGS PASSED BY NAME INXML
 ; AS @INXML@(1) TO @INXML@(x) ALL NUMERIC
 ; INTO AN XML ARRAY RETURNED IN OUTXML, ALSO PASSED BY NAME
 ; this routine doesn't work unless the blocks are on xml tag boundaries - gpl
 ; which is hard to do... this routine is left here awaiting future development
 N ZI,ZN,ZJ
 S ZJ=0
 S ZN=1
 F  S ZJ=$O(@INXML@(ZJ)) Q:+ZJ=0  D  ; FOR EACH XML STRING IN ARRAY
 . S @OUTXML@(ZN)=$P(@INXML@(ZJ),"><",ZN)_">"
 . S ZN=ZN+1
 . F  S @OUTXML@(ZN)="<"_$P(@INXML@(ZJ),"><",ZN) Q:$P(@INXML@(ZJ),"><",ZN+1)=""  D  ;
 . . S @OUTXML@(ZN)=@OUTXML@(ZN)_">"
 . . S ZN=ZN+1
 . .QUIT
 .QUIT
 QUIT
 ;  ===============
 ;
UNWRAP(ZXML,ZI,ZNOM) ; EXTRINSIC TO LOCATE, DECODE AND PARSE AN EMBEDED XML DOC
 ; RETURNS THE DOCID OF THE DOM
 N ZS,ZX
 S ZS=$P($P(@ZXML@(ZI),">",2),"<",1) ; PULL OUT THE ENCODED STRING
 S ZX=$$DECODE^RGUTUU(ZS)
 N ZZ
 N ZY S ZY="<?xml version=""1.0"" encoding=""utf-8""?>"
 I $E(ZX,1,5)'="<?xml" S ZZ(1)=ZY_ZX
 E  S ZZ(1)=ZX
 N ZI
 ;F ZI=1:1 Q:$$REDUCE(.ZZ,ZI) ; CHOP THE STRING INTO 4000 CHAR ARRAY
 S ZI=$$REDUCRCR(.ZZ,1) ; RECURSIVE VERSION OF REDUCE
 S G=$$PARSE^C0XEWD("ZZ",C0NOM)
 ; GTM Specific
 ; I G=0 ZWR ^TMP("MXMLERR",$J,*) B
 QUIT G
 ;  =============
REDUCE(ZARY,ZN) ; WILL REDUCE ZARY(ZN) BY CHOPPING IT TO 4000 CHARS
 ; AND PUTTING THE REST IN ZARY(ZN+1)
 ; ZARY IS PASSED BY REFERENCE
 ; EXTRINSIC WHICH RETURNS FALSE IF THERE IS NOTHING TO REDUCE
 I $L(ZARY(ZN))<4001   QUIT 0 ;NOTHING TO REDUCE
 ;
 S ZARY(ZN+1)=$E(ZARY(ZN),4001,$L(ZZ(ZN))) ;BREAK IT UP
 S ZARY(ZN)=$E(ZARY(ZN),1,4000) ;  
 QUIT 1  ;ACTUALLY REDUCED
 ;  ===========
REDUCRCR(ZARY,ZN) ; RECURSIVE VERSION OF REDUCE ABOVE
 ; WILL REDUCE ZARY(ZN) BY CHOPPING IT TO 4000 CHARS
 ; AND PUTTING THE REST IN ZARY(ZN+1)
 ; ZARY IS PASSED BY REFERENCE
 ; EXTRINSIC WHICH RETURNS FALSE IF THERE IS NOTHING TO REDUCE
 I $L(ZARY(ZN))<4001 Q 0 ;NOTHING TO REDUCE
 ; 
 S ZARY(ZN+1)=$E(ZARY(ZN),4001,$L(ZARY(ZN))) ;BREAK IT UP
 S ZARY(ZN)=$E(ZARY(ZN),1,4000) ;  
 I '$$REDUCRCR(.ZARY,ZN+1) Q 1 ; CALL RECURSIVELY
 ;  
 QUIT 1  ;ACTUALLY REDUCED
 ;  ===========
DEMUXARY(OARY,IARY) ;CONVERT AN XPATH ARRAY PASSED AS IARY TO
 ; FORMAT @OARY@(x,xpath) where x is the first multiple
 N ZI,ZJ,ZK,ZL S ZI=""
 F  S ZI=$O(@IARY@(ZI)) Q:ZI=""  D  ;
 . D DEMUX^C0CMXP("ZJ",ZI)
 . S ZK=$P(ZJ,"^",3)
 . S ZK=$RE($P($RE(ZK),"/",1))
 . S ZL=$P(ZJ,"^",1)
 . I ZL="" S ZL=1
 . S @OARY@(ZL,ZK)=@IARY@(ZI)
 .QUIT
 QUIT
 ;

C0ISOAP3
C0ISOAP   ; GPL/RCR - Web Service utilities; 8/31/09; 12/08/2010
 ;;0.1;IMMUNIZATIONS FORECASTING;nopatch;noreleasedate;Build 82
 ;Copyright 2009 George Lilly.  Licensed Apache 2
 ;
 ; Modified by Chris Richardson, November, 2010.  George's License is still in force.
 ; Code has been modified to accept very large XML documents and block them logically.
 ; 3101208 - RCR - Correct end of buffer condition, BF=">"
 ;
 QUIT
 ;
 ;  ==========
SOAP(C0RTN,C0PARMS,C0DETAIL) ; MAKES A SOAP CALL FOR BASED ON C0PARMS passed by reference
 ; C0PARMS("xml")=location of ready to go xml (skip encoding and soap envelop buildling)
 ; C0PARMS("url")=url string for the SOAP call
 ; C0PARMS("payload")=name of location of the xml payload
 ; C0PARMS("envelop")=name of the location of the xml soap envelop
 ; C0PARMS("payloadVarOut")=variable for outgoing payload; default "outPayload"
 ; C0PARMS("payloadVarIn")=incoming tag for payload; default "base64EncodedPayload"
 ; C0PARMS("format")=format of the output: xml,outline,global - default global
 ;
 N C0URL,PAYLOAD,ENVELOP,PLVAR,C0RSLT,HEADER,C0RHDR,C0MIME,XML,XMLLOC,C0MIME
 ;K @C0RTN
 S C0URL=$G(C0PARMS("url"))
 ;I C0URL="" S C0URL="https://54.235.195.41:8443/opencds-decision-support-service-1.0.0-SNAPSHOT/evaluate"
 ;I C0URL="" S C0URL="http://54.235.195.41:8080/opencds-decision-support-service-1.0.0-SNAPSHOT/evaluate"
 I C0URL="" S C0URL="http://54.235.195.41:8080/opencds-decision-support-service-1.0.0-SNAPSHOT/evaluate"
 S PAYLOAD=$G(C0PARMS("payload"))
 S OUTPLV=$G(C0PARMS("payloadVarOut"),"outPayload") ; payload variable outgoing
 S INPLV=$G(C0PARMS("payloadVarIn"),"base64EncodedPayload") ; payload tag incoming
 S ENVELOP=$G(C0PARMS("envelop"))
 S C0MIME="content-type: text/soap+xml; charset=utf-8"
 S HEADER(1)="User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; MS Web Services Client Protocol 2.0.50727.3074)"
 S HEADER(2)="Expect: 100-continue"
 S HEADER(3)="Connection: Keep-Alive"
 S XMLLOC=$G(C0PARMS("xml")) ; only set as an override - means skipping payload building
 I XMLLOC'="" M XML=@XMLLOC
 ;
 I XMLLOC="" D  ; no complete xml supplied, build the payload
 . S XMLLOC=$NA(^TMP("ICE",$J,"XML"))
 . K @XMLLOC
 . N C0IV
 . S C0IV(OUTPLV)=$$ENCODE(PAYLOAD)
 . S C0IV("hl7OutTime")=$$FMDTOUTC^C0CUTIL(DT)
 . D GETNMAP^C0IUTIL("XML","TENVOUT^C0ITEST","C0IV")
 . K XML(0)
 . ;M @XMLLOC=XML
 . ;W $$GTF^%ZISH($NA(@XMLLOC@(1)),4,"/home/vista/immu-log/",$$FMDTOUTC^JJOHPPCU($$NOW^XLFDT)_"ice-sending.xml") 
 ;
 ;M XML=@XMLLOC
 K C0RSLT,C0RHDR
 N C0RXML
 ;
 ; make the soap call
 ;
 S ok=$$httpPOST^C0IEWD(C0URL,.XML,C0MIME,.C0RXML,.HEADER) ;,,1) ;for test
 ;S ok=$$httpPOST^%zewdGTM(C0URL,.XML,C0MIME,.C0RSLT,.HEADER,"",.PARM5,.C0RHDR)
 ;
 ;I $G(C0RXML(2))="" D  Q ;
 ;. K @C0RTN
 ;. M @C0RTN=C0RXML
 ;
 ; locate and decode the embedded xml
 ;
 N %BEG,%END
 S %BEG="<"_INPLV_">"
 S %END="</"_INPLV_">"
 N ALLXML S ALLXML=""
 N ZI
 S ZI=""
 F  S ZI=$O(C0RXML(ZI)) Q:ZI=""  D  ;
 . S ALLXML=ALLXML_C0RXML(ZI)
 . ;W !,ZI
 ;I ALLXML'[%BEG D  B  Q  ;
 I ALLXML'[%BEG D  Q  ;
 . ;W !,"ERROR DETECTED",!
 . ;ZWR C0RXML
 . N RXML S RXML=$NA(^TMP("ICE",$J,"RETURNXML"))
 . M @RXML=C0RXML
 . S @C0RTN=C0RXML
 ;
 N XMLBASE64
 S XMLBASE64=$P($P(ALLXML,%END,1),%BEG,2)
 N RTNXML
 S RTNXML(1)=$$DECODER(XMLBASE64)
 S OK=$$REDUCRCR(.RTNXML,1)
 N RXML S RXML=$NA(^TMP("ICE",$J,"RETURNXML"))
 K @RXML
 M @RXML=RTNXML
 W $$GTF^%ZISH($NA(@RXML@(1)),4,"/home/vista/immu-log/",$$FMDTOUTC^JJOHPPCU($$NOW^XLFDT)_"ice-return.xml") 
 ;
 ;B
 ;K C0RSLT
 ;I $D(C0RXML(1)) D  ;
 ;. D CHUNK("C0RSLT","C0RXML",1000) ;RETURN IN AN ARRAY
 ;. I $G(C0RSLT("RELOC",1,1))'="" D  ; THERE WAS EMBEDED XML
 ;. . K C0RXML ; THROW AWAY WRAPPER
 ;. . M C0RXML=C0RSLT("RELOC",1) ; REPLACE WITH EMBEDDED DOCUMENT 
 ;
 I '$D(C0RXML(2)) D  Q  ;
 . W !,"ERROR DETECTED",!
 . ZWR C0RXML
 ;
 I $G(C0PARMS("format"))="xml" D  Q  ;
 . M @C0RTN=RTNXML
 ;
 ; call the parser
 N C0IDOCID
 S C0IDOCID=$$PARSE^C0IEXTR(RXML,"C0IDOC"_$J)
 ;
 I $G(C0PARMS("format"))="outline" D  Q  ;
 . ;S GN=$NA(^TMP("SOAPOUT",$J))
 . D show^C0IUTIL(1,C0IDOCID,C0RTN)
 ;
 ; convert the MXML DOM into a mumps array to return
 ;
 D domo3^C0IEXTR(C0RTN)
 ;
 ; return all the artifacts here
 ;
 Q
 ;
EXTRACT(C0RXML)
 I $G(INPLV)="" S INPLV="base64EncodedPayload"
 N %BEG,%END
 S %BEG="<"_INPLV_">"
 S %END="</"_INPLV_">"
 N ALLXML S ALLXML=""
 N ZI
 S ZI=""
 F  S ZI=$O(C0RXML(ZI)) Q:ZI=""  D  ;
 . S ALLXML=ALLXML_C0RXML(ZI)
 . ;W !,ZI
 I ALLXML'[%BEG D  Q  ;
 . W !,"ERROR DETECTED",!
 . ZWR C0RXML
 ;
 N XMLBASE64
 S XMLBASE64=$P($P(ALLXML,%END,1),%BEG,2)
 N RTNXML
 S RTNXML(1)=$$DECODER(XMLBASE64)
 S OK=$$REDUCRCR(.RTNXML,1)
 N RXML S RXML=$NA(^TMP("ICE",$J,"RETURNXML"))
 K @RXML
 M @RXML=RTNXML
 W $$GTF^%ZISH($NA(@RXML@(1)),4,"/home/vista/immu-log/",$$FMDTOUTC^JJOHPPCU($$NOW^XLFDT)_"ice-unwrap.xml") 
 Q
 ;
TEST ;
 ; SOAP testing... get the override request xml from a file
 N TESTXML
 S TESTXML=$NA(^TMP("ICE",$J,"XML",1))
 N ZOK
 ;S ZOK=$$FTG^%ZISH("/home/vista/immu-log/","ice-test.xml",TESTXML,4)
 S ZOK=$$FTG^%ZISH("/home/vista/immu-log/","ICE-SOAP-NoImmunizationMessage.xml",TESTXML,4)
 S TESTXML=$NA(^TMP("ICE",$J,"XML")) ; name to pass as xml parameter
 ; correct for overflow produced by GTF^%ZISH
 N ZI S ZI=""
 N XML
 F  S ZI=$O(@TESTXML@(ZI)) Q:ZI=""  D  ;
 . S XML(ZI)=@TESTXML@(ZI)
 . I $D(@TESTXML@(ZI,"OVF")) D  ;
 . . N ZJ S ZJ=""
 . . F  S ZJ=$O(@TESTXML@(ZI,"OVF",ZJ)) Q:ZJ=""  D  ;
 . . . S XML(ZI)=XML(ZI)_@TESTXML@(ZI,"OVF",ZJ)
 K @TESTXML
 M @TESTXML=XML
 D EXTRACT(.XML)
 K XML
 N PARMS
 S PARMS("xml")=TESTXML
 S PARMS("url")="http://54.235.195.41:8080/opencds-decision-support-service-1.0.0-SNAPSHOT/evaluate"
 D SOAP("RETURN",.PARMS)
 ZWR RETURN
 W !,"SUCCESS !"
 Q
 ;
TEST2 ;
 ; SOAP testing... get the request xml from a file, but let SOAP encode and wrap
 S TESTXML=$NA(^TMP("ICE",$J,"TESTXML",1))
 N ZOK
 S ZOK=$$FTG^%ZISH("/home/vista/immu-log/","ice-test.xml",TESTXML,4)
 ;S ZOK=$$FTG^%ZISH("/home/vista/immu-log/","ICE-SOAP-NoImmunizationMessage.xml",TESTXML,4)
 S TESTXML=$NA(^TMP("ICE",$J,"TESTXML")) ; name to pass as xml parameter
 ; correct for overflow produced by GTF^%ZISH
 N ZI S ZI=""
 N XML
 F  S ZI=$O(@TESTXML@(ZI)) Q:ZI=""  D  ;
 . S XML(ZI)=@TESTXML@(ZI)
 . I $D(@TESTXML@(ZI,"OVF")) D  ;
 . . N ZJ S ZJ=""
 . . F  S ZJ=$O(@TESTXML@(ZI,"OVF",ZJ)) Q:ZJ=""  D  ;
 . . . S XML(ZI)=XML(ZI)_@TESTXML@(ZI,"OVF",ZJ)
 K @TESTXML
 M @TESTXML=XML
 K XML
 N PARMS
 S PARMS("payload")=TESTXML
 S PARMS("url")="http://54.235.195.41:8080/opencds-decision-support-service-1.0.0-SNAPSHOT/evaluate"
 D SOAP("RETURN",.PARMS)
 ZWR RETURN
 W !,"SUCCESS !"
 Q
 ;
ENCODE(ZXML) ; extrinsic which returns a base64 encoding of the XML, which 
 ; is passsed by name
 N ZI,ZS
 S ZI="" S ZS=""
 F  S ZI=$O(@ZXML@(ZI)) Q:ZI=""  D  ;
 . S ZS=ZS_@ZXML@(ZI)
 Q $$ENCODE^RGUTUU(ZS)
 ;
 ; ===================
NORMAL(OUTXML,INXML) ;NORMALIZES AN XML STRING PASSED BY NAME IN INXML
 ; INTO AN XML ARRAY RETURNED IN OUTXML, ALSO PASSED BY NAME
 ;
 N INBF,ZI,ZN,ZTMP
 S ZN=1,INBF=@INXML
 S @OUTXML@(ZN)=$P(INBF,"><",ZN)_">"
 ; S ZN=ZN+1
 ; F  S @OUTXML@(ZN)="<"_$P(@INXML,"><",ZN) Q:$P(@INXML,"><",ZN+1)=""  D  ;
 ; Should speed up, and not leave a dangling node, and doesn't stop at first NULL
 F ZN=2:1:$L(INBF,"><") S @OUTXML@(ZN)="<"_$P(INBF,"><",ZN)_">"
 ; . ; S ZN=ZN+1 
 ; .QUIT
 QUIT
 ;  ================
 ; The goal of this block has changed a little bit.  Most modern MUMPS engines can
 ; handle a 1,000,000 byte string.  We will use BF to hold hunks that big so that 
 ; we can logically suck up a big hunk of the input to supply the reblocking of the XML
 ; into more logical blocks less than 2000 bytes in length blocks.
 ; A series of signals will be needed, Source (INXML) is exhausted (INEND),
 ; BF is less than 2200 bytes (BFLD, BuFfer reLoaD)
 ; BF is Full (BF contains 998,000 bytes or more, BFULL)
 ; BF and Process is Complete (BFEND)
 ; ZSIZE defaults to 2,000 now, but can be set lower or higher
 ;
CHUNK(OUTXML,INXML,ZSIZE) ; BREAKS INXML INTO ZSIZE BLOCKS
 ; INXML IS AN ARRAY PASSED BY NAME OF STRINGS
 ; OUTXML IS ALSO PASSED BY NAME
 ; IF ZSIZE IS NOT PASSED, 2000 IS USED
 I '$D(ZSIZE) S ZSIZE=2000 ; DEFAULT BLOCK SIZE
 N BF,BFEND,BFLD,BFMAX,BFULL,INEND,ZB,ZI,ZJ,ZK,ZL,ZN
 ; S ZB=ZSIZE-1
 S ZN=1
 S BFMAX=998000
 S ZI=0 ; BEGINNING OF INDEX TO INXML
 S (BFLD,BFEND,BFULL,INEND)=0,BF=""
 ; Major loop loads the buffer, BF, and unloads it into the Output Array
 ;  in 
 F  D  Q:BFEND
 . ; Input LOADER
 . D:'INEND
 . . F  S ZI=$O(@INXML@(ZI)) S INEND=(ZI="")  Q:INEND!BFULL  D   ; LOAD EACH STRING IN INXML
 . . . S BF=BF_@INXML@(ZI)                                       ; ADD TO THE BF STRING
 . . . S BFULL=($L(BF)>BFMAX)
 . . .QUIT
 . .QUIT
 . ;  Full Buffer, BF, now check for Encryption and Unpack
 . D TEST4COD(.BF,"C0RSLT(""RELOC"")")
 . ; Output BREAKER
 . F  Q:BFLD  D   ; ZJ=1:ZSIZE:ZL D  ;
 . . ; ZK=$S(ZJ+ZB<ZL:ZJ+ZB,1:ZL) ; END FOR EXTRACT
 . . F ZK=ZSIZE:-1:0  Q:$E(BF,ZK)=">"
 . . I ZK=0 S ZK=ZSIZE
 . . S @OUTXML@(ZN)=$E(BF,1,ZK) ; PULL OUT THE PIECE
 . . S ZN=ZN+1 ; INCREMENT OUT ARRAY INDEX
 . . S BF=$E(BF,ZK+1,BFMAX)
 . . S BFLD=($L(BF)<(ZSIZE*2))
 . .QUIT
 . S BFEND=(INEND&BFLD)!(">"[BF)
 . I $L(BF)&BFEND S @OUTXML@(ZN)=BF,BF=""
 .QUIT
 QUIT
 ;  ==============
 ; Test for Encryption, extract it and decode it.
TEST4COD(INBF,RELOC) 
 N DBF,I,MSK,TBF,TRG,RCNT
 S RCNT=0
 ;  Segments expected <seg 1>DATA</seg 1><seg 2>DATA</seg 2>
 ;                           ^   ^
 S MSK=""   ; It turns out that some of the characters used were not reliable
 F I=32:1:42,44:1:47,62:1:64,91:1:96 S MSK=MSK_$C(I)
 F I=1:1:$L(INBF,"</")-1 D
 . S TBF=$RE($P($RE($P(INBF,"</",I)),">"))
 . ; Remove sample for testing
 . ; Set the trigger, mostly included to show intent and associated code
 . ;  this could be refined later if determined already obvious enough
 . S TRG=0
 . DO:$L(TBF)>20  ; If $TR doesn't remove anything, then these characters are not there
 . . I (TBF=$TR(TBF,MSK))   S TRG=1
 . . ; I (TBF=$TR(TBF," <->@*!?.,:;#$%&[/|\]={}~")) S TRG=1
 . . ;   <>!"#$%&'()*,-./67:;<>?@[\]^_`fqr{|}~  <<= Ignore 6,7,f,q, and r
 . . ; Now we set up for the DECODE and replacement in INBF
 . . DO:TRG
 . . . N A,C,CC,CV,CCX,K,XBF,T,V
 . . . DO
 . . . . N I
 . . . . S DBF=$$DECODER(TBF)
 . . . .QUIT
 . . . ;
 . . . S CCX=""
 . . . F K=1:1:$L(DBF) S CC=$E(DBF,K) S:CC?1C C=$A(CC),A(C)=$G(A(C))+1
 . . . S C="",V=""
 . . . F  S C=$O(A(C)) Q:C=""  S CCX=CCX_$C(C) S:A(C)>V V=A(C),CV=C
 . . . S CC=$C(CV)
 . . . ;  The "_$C(13,10)_" may need to be generalized, tested and set earlier
 . . . ;    Expand embedded XML in XBF
 . . . F K=1:1:$L(DBF,CC) S T=$P(DBF,CC,K),XBF(K)=$TR(T,CCX)
 . . . S RCNT=RCNT+1
 . . . M @RELOC@(RCNT)=XBF
 . . . ;   Curley braces and = makes it so it won't trigger a second time by retest.                                
 . . . S INBF=$P(INBF,TBF)_"<{REPLACED}="_RCNT_$P(INBF,TBF,2,999)
 . . .QUIT
 . .QUIT
 .QUIT
 ;  Now shorten the INBF so it gets smaller
 ;S INBF=$P(INBF,">",I+1,99999)
 QUIT
 ;  ===================
DECODER(BF) ; Decrypts the Encrypted Strings
 QUIT $$DECODE^RGUTUU(BF)
 ;  ===================
NORMAL2(OUTXML,INXML) ;NORMALIZES AN ARRAY OF XML STRINGS PASSED BY NAME INXML
 ; AS @INXML@(1) TO @INXML@(x) ALL NUMERIC
 ; INTO AN XML ARRAY RETURNED IN OUTXML, ALSO PASSED BY NAME
 ; this routine doesn't work unless the blocks are on xml tag boundaries - gpl
 ; which is hard to do... this routine is left here awaiting future development
 N ZI,ZN,ZJ
 S ZJ=0
 S ZN=1
 F  S ZJ=$O(@INXML@(ZJ)) Q:+ZJ=0  D  ; FOR EACH XML STRING IN ARRAY
 . S @OUTXML@(ZN)=$P(@INXML@(ZJ),"><",ZN)_">"
 . S ZN=ZN+1
 . F  S @OUTXML@(ZN)="<"_$P(@INXML@(ZJ),"><",ZN) Q:$P(@INXML@(ZJ),"><",ZN+1)=""  D  ;
 . . S @OUTXML@(ZN)=@OUTXML@(ZN)_">"
 . . S ZN=ZN+1
 . .QUIT
 .QUIT
 QUIT
 ;  ===============
 ;
UNWRAP(ZXML,ZI,ZNOM) ; EXTRINSIC TO LOCATE, DECODE AND PARSE AN EMBEDED XML DOC
 ; RETURNS THE DOCID OF THE DOM
 N ZS,ZX
 S ZS=$P($P(@ZXML@(ZI),">",2),"<",1) ; PULL OUT THE ENCODED STRING
 S ZX=$$DECODE^RGUTUU(ZS)
 N ZZ
 N ZY S ZY="<?xml version=""1.0"" encoding=""utf-8""?>"
 I $E(ZX,1,5)'="<?xml" S ZZ(1)=ZY_ZX
 E  S ZZ(1)=ZX
 N ZI
 ;F ZI=1:1 Q:$$REDUCE(.ZZ,ZI) ; CHOP THE STRING INTO 4000 CHAR ARRAY
 S ZI=$$REDUCRCR(.ZZ,1) ; RECURSIVE VERSION OF REDUCE
 S G=$$PARSE^C0XEWD("ZZ",C0NOM)
 ; GTM Specific
 ; I G=0 ZWR ^TMP("MXMLERR",$J,*) B
 QUIT G
 ;  =============
REDUCE(ZARY,ZN) ; WILL REDUCE ZARY(ZN) BY CHOPPING IT TO 4000 CHARS
 ; AND PUTTING THE REST IN ZARY(ZN+1)
 ; ZARY IS PASSED BY REFERENCE
 ; EXTRINSIC WHICH RETURNS FALSE IF THERE IS NOTHING TO REDUCE
 I $L(ZARY(ZN))<4001   QUIT 0 ;NOTHING TO REDUCE
 ;
 S ZARY(ZN+1)=$E(ZARY(ZN),4001,$L(ZZ(ZN))) ;BREAK IT UP
 S ZARY(ZN)=$E(ZARY(ZN),1,4000) ;  
 QUIT 1  ;ACTUALLY REDUCED
 ;  ===========
REDUCRCR(ZARY,ZN) ; RECURSIVE VERSION OF REDUCE ABOVE
 ; WILL REDUCE ZARY(ZN) BY CHOPPING IT TO 4000 CHARS
 ; AND PUTTING THE REST IN ZARY(ZN+1)
 ; ZARY IS PASSED BY REFERENCE
 ; EXTRINSIC WHICH RETURNS FALSE IF THERE IS NOTHING TO REDUCE
 I $L(ZARY(ZN))<4001 Q 0 ;NOTHING TO REDUCE
 ; 
 S ZARY(ZN+1)=$E(ZARY(ZN),4001,$L(ZARY(ZN))) ;BREAK IT UP
 S ZARY(ZN)=$E(ZARY(ZN),1,4000) ;  
 I '$$REDUCRCR(.ZARY,ZN+1) Q 1 ; CALL RECURSIVELY
 ;  
 QUIT 1  ;ACTUALLY REDUCED
 ;  ===========
DEMUXARY(OARY,IARY) ;CONVERT AN XPATH ARRAY PASSED AS IARY TO
 ; FORMAT @OARY@(x,xpath) where x is the first multiple
 N ZI,ZJ,ZK,ZL S ZI=""
 F  S ZI=$O(@IARY@(ZI)) Q:ZI=""  D  ;
 . D DEMUX^C0CMXP("ZJ",ZI)
 . S ZK=$P(ZJ,"^",3)
 . S ZK=$RE($P($RE(ZK),"/",1))
 . S ZL=$P(ZJ,"^",1)
 . I ZL="" S ZL=1
 . S @OARY@(ZL,ZK)=@IARY@(ZI)
 .QUIT
 QUIT
 ;

C0ITEST
C0ITEST ; GPL/NEA - Immunizations Forecasting Routine ;05/03/14  17:05
 ;;0.1;Immunizations Forecasting;nopatch;noreleasedate;
 ;
 ; License Apache 2
 ; 
 Q
 ;
EN(WRK,DFN,PARMS) ;
 K WRK
 N C0ARY,G,C0IPOA,CPTMAP,CVXMAP,CPTIMAP,CVXIMAP
 D CPTMAP^C0ITEST
 D CVXMAP^C0ITEST
 D CPTIMAP^C0ITEST
 D CVXIMAP^C0ITEST
 D PAYOUTAV^C0ITEST
 D PAYOUTBV^C0ITEST
 D GET^C0IUTIL("WRK","TPAYOUTC^C0ITEST")
 D PAYOUTDV^C0ITEST
 D GET^C0IUTIL("WRK","TPAYOUTE^C0ITEST")
 M ^TMP("C0IWRK",$J)=WRK
 S OK=$$GTF^%ZISH($NA(^TMP("C0IWRK",$J,1)),3,"/home/vista/","ice-test.xml")
 K WRK(0)
 Q
 ;
TEST1 ;
 S DFN=$$PAT^C0IICE()
 K WRK
 D CPTMAP
 D CVXMAP
 D CPTIMAP
 D CVXIMAP
 D PAYOUTAV
 D PAYOUTBV
 D GET^C0IUTIL("WRK","TPAYOUTC^C0ITEST")
 D PAYOUTDV
 D GET^C0IUTIL("WRK","TPAYOUTE^C0ITEST")
 M ^TMP("C0IWRK",$J)=WRK
 W $$GTF^%ZISH($NA(^TMP("C0IWRK",$J,1)),3,"/home/vista/","ice-test.xml")
 Q
 ; get patient DFN
 ; get patient VPR demographics for sex and DOB
 ; call VPR to get patient Immunizaitons
 ; 
 ; begin building SOAP request XML
 ; loop through immunizations array and generate XML pieces
 ; call build to put all the pieces together into one XML array
 ; base64 encode the XML array
 ;
TENVOUT ; build SOAP envelope
 ;;<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope"> 
 ;;<S:Body>
 ;;<ns2:evaluateAtSpecifiedTime xmlns:ns2="http://www.omg.org/spec/CDSS/201105/dss">
 ;;<interactionId scopingEntityId="gov.nyc.health" interactionId="123456"/>
 ;;<specifiedTime>@@hl7OutTime@@</specifiedTime>
 ;;<evaluationRequest clientLanguage="" clientTimeZoneOffset="">
 ;;<kmEvaluationRequest>
 ;;<kmId scopingEntityId="org.nyc.cir" businessId="ICE" version="1.0.0"/>
 ;;</kmEvaluationRequest>
 ;;<dataRequirementItemData>
 ;;<driId itemId="cdsPayload">
 ;;<containingEntityId scopingEntityId="gov.nyc.health" businessId="ICEData" version="1.0.0.0"/>
 ;;</driId>
 ;;<data>
 ;;<informationModelSSId scopingEntityId="org.opencds.vmr" businessId="VMR" version="1.0"/>
 ;;<base64EncodedPayload>@@outPayload@@</base64EncodedPayload>
 ;;</data>
 ;;</dataRequirementItemData>
 ;;</evaluationRequest>
 ;;</ns2:evaluateAtSpecifiedTime>
 ;; </S:Body>
 ;; </S:Envelope>
 Q
ENVOUTV ; create beginning of envelop
 K C0IARY
 S C0IARY("hl7OutTime")=$$FMDTOCDA^C0IUTIL(DT)
 D GETNMAP^C0IUTIL("WRK","TENVOUT^C0ITEST","C0IARY")
 Q
TPAYOUTA ; First part of payload message with Sex and DOB and a UUID variables
 ;;<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
 ;;<ns4:cdsInput xmlns:ns2="org.opencds" xmlns:ns3="org.opencds.vmr.v1_0.schema.vmr" xmlns:ns4="org.opencds.vmr.v1_0.schema.cdsinput" xmlns:ns5="org.opencds.vmr.v1_0.schema.cdsoutput">
 ;;<templateId root="2.16.840.1.113883.3.795.11.1.1"/>
 ;;<cdsContext>
 ;;<cdsSystemUserPreferredLanguage code="en" codeSystem="2.16.840.1.113883.6.99" displayName="English"/>
 ;;</cdsContext>
 ;;<vmrInput>
 ;;<templateId root="2.16.840.1.113883.3.795.11.1.1"/>
 ;;<patient>
 ;;<templateId root="2.16.840.1.113883.3.795.11.2.1.1"/>
 ;;<id root="@@UUID0@@"/>
 ;;<demographics>
 ;;<birthTime value="@@DOB@@"/>
 ;;<gender code="@@genderCode@@" codeSystem="2.16.840.1.113883.5.1" displayName="@@genderName@@" originalText="@@genderCode@@"/>
 ;;</demographics>
 ;;<clinicalStatements>
 Q
 ;
PAYOUTAV ; setting payload variables sex, DOB and UUID for the first section (PAYOUTA)
 K C0IPOA
 S X=$$GET1^DIQ(2,DFN,"DOB","I")
 S C0IPOA("UUID0")=$$UUID^C0IUTIL
 S C0IPOA("DOB")=$$FMDTOCDA^C0IUTIL(X)
 S C0IPOA("genderCode")=$$GET1^DIQ(2,DFN,"SEX","I")
 I C0IPOA("genderCode")="M" S C0IPOA("genderName")="Male"
 I C0IPOA("genderCode")="F" S C0IPOA("genderName")="Female"
 I C0IPOA("genderCode")="UN" S C0IPOA("genderName")="Undifferentiated" ; ICE term, not VISTA  VistA allow M F only.P
 D GETNMAP^C0IUTIL("WRK","TPAYOUTA^C0ITEST","C0IPOA") 
 Q
 ;
PAYOUTB ;
 ;;;Disease an immunity section which is optional. the DISEASE_DOCUMENTED and IS_IMMUNE
 ;;;Cycle through 6 diseases using reminders to check for prior diagnosis
 ;;;Hep A: 070.1
 ;;;Hep B: 070.3
 ;;;Measles: 055.9
 ;;;Mumps: 072.9
 ;;;Rubella: 056.9
 ;;;Varicella: 052.9
 ;;;First Tag for this section if any prior diagnoses are available
 ;;<observationResults>
 Q
 ;
PAYOUTM ;
 ;;;Populate this section for each disease found leading to immunity
 ;;<observationResult>
 ;;<templateId root="2.16.840.1.113883.3.795.11.6.3.1"/>
 ;;<id root="@@UUIDA@@"/>
 ;;<observationFocus code="@@codeICD9@@" codeSystem="2.16.840.1.113883.6.103" displayName="@@codeName@@" originalText="@@codeICD9@@"/>
 ;;<observationEventTime low="@@timeProblem@@" high="@@timeProblem@@"/>
 ;;<observationValue>
 ;;<concept code="DISEASE_DOCUMENTED" codeSystem="2.16.840.1.113883.3.795.12.100.8" displayName="Disease Documented" originalText="DISEASE_DOCUMENTED"/>
 ;;</observationValue>
 ;;<interpretation code="IS_IMMUNE" codeSystem="2.16.840.1.113883.3.795.12.100.9" displayName="Is Immune" originalText="IS_IMMUNE"/>
 ;;</observationResult>
 Q
 ;
PAYOUTN ;
 ;;;Finishes off the disease section if there is one
 ;;</observationResults>
 Q
PAYOUTBV ;
 ;Placeholder for logic and variables for populating the DISEASE_DOCUMENTED and IS_IMMUNE
 ;Diseases Hep A, Hep B, Measles, Mumps, Rubella, Varicella only as of 5/2014,
 ;If N is 0 after using reminders to test for the diseases in the taxonomies, then skip this section
 ;If more than one of these present, use the needed disease tags to write this part of the message
 ;NEED TO REPLACE HARD CODED REMINDER IENS WITH A LOOKUP!!!
 N IENHEPA,IENHEPB,IENMEASL,IENVARIC,IENMUMPS,IENRUBEL 
 S (IENHEPA,IENHEPB,IENMEASL,IENVARIC,IENMUMPS,IENRUBEL)=""
 N FILE,IENS,FLAGS,REMNAME,INDEX,SCREEN,EMSG
 S FILE=811.9 
 S IENS=""
 S FLAGS="OQ"
 S INDEX="B"
 S SCREEN=""
 S EMSG=""
 N N,HEPA,HEPB,VARICEL,MUMPS,MEASLES,RUBELLA
 S (N,HEPA,HEPB,VARICEL,MUMPS,MEASLES,RUBELLA)=0
 K ^TMP("PXRHM",$J)
 N REMNAME S REMNAME="VIMM-HEPATITIS B DIAGNOSIS"
 S IENHEPB=$$FIND1^DIC(FILE,IENS,FLAGS,REMNAME,INDEX,SCREEN,EMSG)
 I IENHEPB="" Q  ; reminder not found, skip this part
 K REMNAME
 D MAIN^PXRM(DFN,IENHEPB,0)
 I $G(^TMP("PXRHM",$J,IENHEPB,"VIMM-HEPATITIS B DIAGNOSIS"))["DUE NOW" S N=N+1 S HEPB=1
 ;W "HEPB=",HEPB,!
 K ^TMP("PXRHM",$J)
 N REMNAME S REMNAME="VIMM-HEPATITIS A DIAGNOSIS"
 S IENHEPA=$$FIND1^DIC(FILE,IENS,FLAGS,REMNAME,INDEX,SCREEN,EMSG) 
 K REMNAME
 D MAIN^PXRM(DFN,IENHEPA,0)
 I $G(^TMP("PXRHM",$J,IENHEPA,"VIMM-HEPATITIS A DIAGNOSIS"))["DUE NOW" S N=N+1 S HEPA=1
 ;W "HEPA=",HEPA,!
 K ^TMP("PXRHM",$J)
 N REMNAME S REMNAME="VIMM-VARICELLA DIAGNOSIS"
 S IENVARIC=$$FIND1^DIC(FILE,IENS,FLAGS,REMNAME,INDEX,SCREEN,EMSG)
 K REMNAME
 D MAIN^PXRM(DFN,IENVARIC,0)
 I $G(^TMP("PXRHM",$J,IENVARIC,"VIMM-VARICELLA DIAGNOSIS"))["DUE NOW" S N=N+1 S VARICEL=1
 ;W "VARICEL=",VARICEL,!
 K ^TMP("PXRHM",$J)
 N REMNAME S REMNAME="VIMM-MUMPS DIAGNOSIS" 
 S IENMUMPS=$$FIND1^DIC(FILE,IENS,FLAGS,REMNAME,INDEX,SCREEN,EMSG) D MAIN^PXRM(DFN,267,0)
 K REMNME
 D MAIN^PXRM(DFN,IENMUMPS,0)
 I $G(^TMP("PXRHM",$J,IENMUMPS,"VIMM-MUMPS DIAGNOSIS"))["DUE NOW" S N=N+1 S MUMPS=1
 ;W "MUMPS=",MUMPS,!
 K ^TMP("PXRHM",$J)
 N REMNAME S REMNAME="VIMM-MEASLES DIAGNOSIS"
 S IENMEASL=$$FIND1^DIC(FILE,IENS,FLAGS,REMNAME,INDEX,SCREEN,EMSG)
 K REMNAME
 D MAIN^PXRM(DFN,IENMEASL,0)
 I $G(^TMP("PXRHM",$J,IENMEASL,"VIMM-MEASLES DIAGNOSIS"))["DUE NOW" S N=N+1 S MEASLES=1
 ;W "MEASLES=",MEASLES,!
 K ^TMP("PXRHM",$J)
 N REMNAME S REMNAME="VIMM-RUBELLA DIAGNOSIS"
 S IENRUBEL=$$FIND1^DIC(FILE,IENS,FLAGS,REMNAME,INDEX,SCREEN,EMSG)
 K REMNAME
 D MAIN^PXRM(DFN,IENRUBEL,0)
 I $G(^TMP("PXRHM",$J,IENRUBEL,"VIMM-RUBELLA DIAGNOSIS"))["DUE NOW" S N=N+1 S RUBELLA=1
 ;W "RUBELLA=",RUBELLA,!
 K ^TMP("PXRHM",$J)
 I N=0 Q
 E  D
 .D GETNMAP^C0IUTIL("WRK","PAYOUTB^C0ITEST","C0IPOA")
 .I HEPB=1 D HEPB
 .I HEPA=1 D HEPA
 .I VARICEL=1 D VARICEL
 .I MUMPS=1 D MUMPS
 .I MEASLES=1 D MEASLES
 .I RUBELLA=1 D RUBELLA
 .D GETNMAP^C0IUTIL("WRK","PAYOUTN^C0ITEST","C0IPOA")
 .K ^TMP("PXRHM",$J)
 Q
 ;
HEPB ;
 S C0IPOA("UUIDA")=$$UUID^C0IUTIL
 S C0IPOA("timeProblem")=$$FMDTOCDA^C0IUTIL(DT)
 S C0IPOA("codeICD9")="070.30"
 S C0IPOA("codeName")="Viral hepatitis B without mention of hepatic coma, acute or unspecified, without mention of hepatitis delta"
 D GETNMAP^C0IUTIL("WRK","PAYOUTM^C0ITEST","C0IPOA")
 K C0IPOA("UUIDA")
 K C0IPOA("timeProblem")
 K C0IPOA("codeICD9")
 K C0IPOA("codeName")
 Q
 ;
HEPA ;
 S C0IPOA("UUIDA")=$$UUID^C0IUTIL
 S C0IPOA("timeProblem")=$$FMDTOCDA^C0IUTIL(DT)
 ;S C0IPOA("timeProblem")=$$FMDTOCDA^C0IUTIL("3130101")
 S C0IPOA("codeICD9")="070.1"
 S C0IPOA("codeName")="Viral hepatitis A without mention of hepatic coma"
 D GETNMAP^C0IUTIL("WRK","PAYOUTM^C0ITEST","C0IPOA")
 K C0IPOA("UUIDA")
 K C0IPOA("timeProblem")
 K C0IPOA("codeICD9")
 K C0IPOA("codeName") 
 Q
 ;
VARICEL ;
 S C0IPOA("UUIDA")=$$UUID^C0IUTIL
 S C0IPOA("timeProblem")=$$FMDTOCDA^C0IUTIL(DT)
 S C0IPOA("codeICD9")="052.9"
 S C0IPOA("codeName")="Varicella without mention of complication"
 D GETNMAP^C0IUTIL("WRK","PAYOUTM^C0ITEST","C0IPOA")
 K C0IPOA("UUIDA")
 K C0IPOA("timeProblem")
 K C0IPOA("codeICD9")
 K C0IPOA("codeName")
 Q 
 ;  
MUMPS ;
 S C0IPOA("UUIDA")=$$UUID^C0IUTIL
 S C0IPOA("timeProblem")=$$FMDTOCDA^C0IUTIL(DT)
 S C0IPOA("codeICD9")="072.9"
 S C0IPOA("codeName")="Mumps without mention of complication"
 D GETNMAP^C0IUTIL("WRK","PAYOUTM^C0ITEST","C0IPOA")
 K C0IPOA("UUIDA")  
 K C0IPOA("timeProblem")
 K C0IPOA("codeICD9")
 K C0IPOA("codeName")
 Q
 ; 
MEASLES ;
 S C0IPOA("UUIDA")=$$UUID^C0IUTIL
 S C0IPOA("timeProblem")=$$FMDTOCDA^C0IUTIL(DT)
 S C0IPOA("codeICD9")="055.9"
 S C0IPOA("codeName")="Measles without mention of complication"
 D GETNMAP^C0IUTIL("WRK","PAYOUTM^C0ITEST","C0IPOA")
 K C0IPOA("UUIDA")
 K C0IPOA("timeProblem")
 K C0IPOA("codeICD9")
 K C0IPOA("codeName")
 Q
 ;
RUBELLA ;
 S C0IPOA("UUIDA")=$$UUID^C0IUTIL
 S C0IPOA("timeProblem")=$$FMDTOCDA^C0IUTIL(DT)
 S C0IPOA("codeICD9")="056.9"
 S C0IPOA("codeName")="Rubella without mention of complication"
 D GETNMAP^C0IUTIL("WRK","PAYOUTM^C0ITEST","C0IPOA")
 K C0IPOA("UUIDA")  
 K C0IPOA("timeProblem")
 K C0IPOA("codeICD9")
 K C0IPOA("codeName")
 Q
 ;
TPAYOUTC ;
 ;;; only one line that is fixed for substance administration 
 ;;<substanceAdministrationEvents>
 Q
 ;
TPAYOUTD ; 
 ;;; this section loops through the immunizations
 ;;<substanceAdministrationEvent>
 ;;<templateId root="2.16.840.1.113883.3.795.11.9.1.1"/>
 ;;<id root="@@UUID1@@"/>
 ;;<substanceAdministrationGeneralPurpose code="384810002" codeSystem="2.16.840.1.113883.6.5"/>
 ;;<substance>
 ;;<id root="@@UUID2@@"/>
 ;;<substanceCode code="@@CVXCode@@" codeSystem="2.16.840.1.113883.12.292" displayName="@@CVXName@@" originalText="@@ORIGName@@"/>
 ;;</substance>
 ;;<administrationTimeInterval low="@@admDate@@" high="@@admDate@@"/>
 ;;</substanceAdministrationEvent>
 Q
 ;
PAYOUTDV ;
 ; Variable and code for the looping IMMUNIZATIONS section
 ; Need UUID x 2, CVX code, name from CVX Short name, administration date 
 ;(need really only one eve thought it asks for high and low - use the same variable)
 D GETPAT^C0IEXTR(.G,DFN,"immunization")
 I G("results","immunizations@total")=0 Q
 E  D
 .N T S T=G("results","immunizations@total")
 .I T=1 D  ;
 ..N GTMP
 ..M GTMP=G("results","immunizations")
 ..K G("results","immunizations")
 .. M G("results","immunizations",1)=GTMP
 .. K GTMP
 .N I S I=""
 .F I=1:1:T D
 ..W:'$G(DIQUIET) "I is ",I,!
 ..D OUTLOG^C0IUTIL("I is "_I)
 ..N CPTIMM,CVXCODE,ADMDATE,IMMNAME,IMMCVX
 ..S C0IPOA("UUID1")=$$UUID^C0IUTIL 
 ..S C0IPOA("UUID2")=$$UUID^C0IUTIL
 ..S C0IPOA("CVXCode")=""
 ..S C0IPOA("CVXName")=""
 ..S C0IPOA("ORIGName")=""
 ..S C0IPOA("admDate")=""
 ..I $D(G("results","immunizations",I,"immunization","cpt@code")) D 
 ...; If there is a CPT code, use that to get the CVX code and the proper CVC code name
 ...N CPTIMM,CVXCODE,ADMDATE 
 ...S CPTIMM="" S CVXCODE="" S ADMDATE=""
 ...S CPTIMM=$G(G("results","immunizations",I,"immunization","cpt@code"))
 ...W:'$G(DIQUIET) "CPTIMM from G is ",CPTIMM,!
 ...S CVXCODE=CPTMAP(CPTIMM)
 ...W:'$G(DIQUIET) "The CVX code for this immunizaton with a CPT code is ",CVXCODE,!
 ...I ((CVXCODE'="")!(CVXCODE=999)) D  Q
 ....; If you found the CVXCode by the CPT code, add the XML to the array and QUIT  
 ....S C0IPOA("CVXCode")=CVXCODE
 ....S C0IPOA("CVXName")=CVXMAP(CVXCODE)
 ....S C0IPOA("ORIGName")=$G(G("results","immunizations",I,"immunization","name@value"))
 ....S ADMDATE=$G(G("results","immunizations",I,"immunization","administered@value"))
 ....S C0IPOA("admDate")=$$FMDTOCDA^C0IUTIL(ADMDATE)
 ....D GETNMAP^C0IUTIL("WRK","TPAYOUTD^C0ITEST","C0IPOA")
 ..I '$D(G("results","immunizations",I,"immunization","cpt@code")) D
 ...; if there is no CPT code, try to look it up by the proper CVX code name
 ...N IMMNAME,IMMCVX,IMMCPT,CVXCODE,ADMDATE
 ...S (IMMNAME,IMMCVX,IMMCPT,CVXCODE,ADMDATE)=""
 ...S IMMNAME=$G(G("results","immunizations",I,"immunization","name@value"))
 ...W:'$G(DIQUIET) "IMMNAME in the no CPT look up by proper CVX code name is ",IMMNAME,!
 ...S IMMCVX=$O(CVXMAP("B",IMMNAME,""))
 ...W:'$G(DIQUIET) "IMMCVX for this vaccine with a proper name is ",IMMCVX,!
 ...I IMMCVX="" D
 ....; If the CVX code is not found by the proper CVX code name, try the lookup in the CPTIMAP section by the
 ....; original name which are odd names in the Immunization file.
 ....; Once you have the CVX code, get the proper text from the CVX code from the CVX Map
 ....; Once a different method of storing the CVX-Immunization map is found, then this section will be replaced
 ....; CVXIMAP is specific a VistA instance.
 ....N CVXCODE,IMMNAME,IMMCVX,ADMDATE,CVXNAME
 ....S (CVXCODE,IMMNAME,IMMCVX,ADMDATE,CVXNAME)=""
 ....S IMMNAME=$G(G("results","immunizations",I,"immunization","name@value"))
 ....I IMMNAME="" S IMMNAME=$G(G("results","immunizations","immunization","name@value"))
 ....I IMMNAME="" D  Q
 ....W:'$G(DIQUIET) "The IMMNAME for this immunization without a proper name is ",IMMNAME,!
 ....S CVXCODE=$O(CVXIMAP("B",IMMNAME,""))
 ....W:'$G(DIQUIET) "The CVX code for this immunization without the proper name is ",CVXCODE,!
 ....S CVXNAME=CVXMAP(CVXCODE) 
 ....W:'$G(DIQUIET) "The proper name for this immunization is ",CVXNAME,!
 ....I CVXCODE="" D  Q
 .....; If there is still no CVX code found, record and error and quit
 .....S ZTXT=$G(G("results","immunizations",I,"immunization","id@value"))
 .....D OUTLOG("ERROR-Missing CVX or Incorrect Name for IEN="_ZTXT)
 ....E  D
 .....; Else, if you have found a CVX code, then write the XML to the array and QUIT
 .....S C0IPOA("CVXCode")=CVXCODE
 .....S C0IPOA("CVXName")=CVXNAME
 .....S C0IPOA("ORIGName")=$G(G("results","immunizations",I,"immunization","name@value"))
 .....S ADMDATE=$G(G("results","immunizations",I,"immunization","administered@value"))
 .....S C0IPOA("admDate")=$$FMDTOCDA^C0IUTIL(ADMDATE) ;S ^GPL("DATE",I)=ADMDATE
 .....D GETNMAP^C0IUTIL("WRK","TPAYOUTD^C0ITEST","C0IPOA")
 Q
 ;
OUTLOG(ZTXT) ; add text to the log
 I '$D(C0LOGLOC) S C0LOGLOC=$NA(^TMP("C0I",$J,"LOG"))
 N LN S LN=$O(@C0LOGLOC@(""),-1)+1
 S @C0LOGLOC@(LN)=ZTXT
 Q
 ;
TPAYOUTE
 ;;;fixed end portion of payload
 ;;</substanceAdministrationEvents>
 ;;</clinicalStatements>
 ;;</patient>
 ;;</vmrInput>
 ;;</ns4:cdsInput>
 Q
 ;
CPTMAP
 S CPTMAP(90281)=86
 S CPTMAP(90283)=87
 S CPTMAP(90287)=27
 S CPTMAP(90291)=29
 S CPTMAP(90296)=12
 S CPTMAP(90371)=30
 S CPTMAP(90375)=34
 S CPTMAP(90376)=34
 S CPTMAP(90378)=93
 S CPTMAP(90379)=71
 S CPTMAP(90389)=13
 S CPTMAP(90393)=79
 S CPTMAP(90396)=36
 S CPTMAP(90470)=128
 S CPTMAP(90476)=54
 S CPTMAP(90477)=55
 S CPTMAP(90581)=24
 S CPTMAP(90585)=19
 S CPTMAP(90632)=52
 S CPTMAP(90633)=83
 S CPTMAP(90634)=84
 S CPTMAP(90636)=104
 S CPTMAP(90644)=148
 S CPTMAP(90645)=47
 S CPTMAP(90646)=46
 S CPTMAP(90647)=49
 S CPTMAP(90648)=48
 S CPTMAP(90649)=62
 S CPTMAP(90650)=118
 S CPTMAP(90654)=144
 S CPTMAP(90655)=140
 S CPTMAP(90656)=140
 S CPTMAP(90657)=141
 S CPTMAP(90658)=141
 S CPTMAP(90659)=16
 S CPTMAP(90660)=111
 S CPTMAP(90661)=153
 S CPTMAP(90662)=135
 S CPTMAP(90663)=128
 S CPTMAP(90664)=125
 S CPTMAP(90665)=66
 S CPTMAP(90666)=126
 S CPTMAP(90668)=127
 S CPTMAP(90669)=100
 S CPTMAP(90670)=133
 S CPTMAP(90672)=149
 S CPTMAP(90673)=155
 S CPTMAP(90675)=18
 S CPTMAP(90676)=40
 S CPTMAP(90680)=116
 S CPTMAP(90681)=119
 S CPTMAP(90685)=150
 S CPTMAP(90686)=150
 S CPTMAP(90688)=158
 S CPTMAP(90690)=25
 S CPTMAP(90691)=101
 S CPTMAP(90692)=41
 S CPTMAP(90693)=53
 S CPTMAP(90696)=130
 S CPTMAP(90698)=120
 S CPTMAP(90700)=20
 S CPTMAP(90700)=106
 S CPTMAP(90701)=01
 S CPTMAP(90702)=28
 S CPTMAP(90703)=35
 S CPTMAP(90704)=07
 S CPTMAP(90705)=05
 S CPTMAP(90706)=06
 S CPTMAP(90707)=03
 S CPTMAP(90708)=04
 S CPTMAP(90710)=94
 S CPTMAP(90712)=02
 S CPTMAP(90713)=10
 S CPTMAP(90714)=113
 S CPTMAP(90714)=91
 S CPTMAP(90715)=115
 S CPTMAP(90716)=21
 S CPTMAP(90717)=37
 S CPTMAP(90718)=09
 S CPTMAP(90720)=22
 S CPTMAP(90721)=50
 S CPTMAP(90723)=110
 S CPTMAP(90724)=88
 S CPTMAP(90725)=26
 S CPTMAP(90726)=90
 S CPTMAP(90727)=23
 S CPTMAP(90728)=19
 S CPTMAP(90730)=85
 S CPTMAP(90731)=45
 S CPTMAP(90732)=33
 S CPTMAP(90733)=32
 S CPTMAP(90734)=136
 S CPTMAP(90734)=114
 S CPTMAP(90735)=39
 S CPTMAP(90736)=121
 S CPTMAP(90737)=17
 S CPTMAP(90738)=134
 S CPTMAP(90740)=44
 S CPTMAP(90741)=14
 S CPTMAP(90743)=43
 S CPTMAP(90744)=08
 S CPTMAP(90745)=42
 S CPTMAP(90746)=43
 S CPTMAP(90747)=44
 S CPTMAP(90748)=51  
 S CPTMAP(90749)=999
 Q
CVXMAP
 S CVXMAP(86)="IG"
 S CVXMAP(87)="IGIV"
 S CVXMAP(27)="botulinum antitoxin"
 S CVXMAP(29)="CMVIG"
 S CVXMAP(12)="diphtheria antitoxin"
 S CVXMAP(30)="HBIG"
 S CVXMAP(34)="RIG"
 S CVXMAP(34)="RIG"
 S CVXMAP(93)="RSV-MAb"
 S CVXMAP(71)="RSV-IGIV"
 S CVXMAP(13)="TIG"
 S CVXMAP(79)="vaccinia immune globulin"
 S CVXMAP(36)="VZIG"
 S CVXMAP(128)="Novel Influenza-H1N1-09, all formulations"
 S CVXMAP(54)="adenovirus, type 4"
 S CVXMAP(55)="adenovirus, type 7"
 S CVXMAP(24)="anthrax"
 S CVXMAP(19)="BCG"
 S CVXMAP(52)="Hep A, adult"
 S CVXMAP(83)="Hep A, ped/adol, 2 dose"
 S CVXMAP(84)="Hep A, ped/adol, 3 dose"
 S CVXMAP(104)="Hep A-Hep B"
 S CVXMAP(148)="Meningococcal C/Y-HIB PRP"
 S CVXMAP(47)="Hib (HbOC)"
 S CVXMAP(46)="Hib (PRP-D)"
 S CVXMAP(49)="Hib (PRP-OMP)"
 S CVXMAP(48)="Hib (PRP-T)"
 S CVXMAP(62)="HPV, quadrivalent"
 S CVXMAP(118)="HPV, bivalent"
 S CVXMAP(144)="influenza, seasonal, intradermal, preservative free"
 S CVXMAP(140)="Influenza, seasonal, injectable, preservative free"
 S CVXMAP(140)="Influenza, seasonal, injectable, preservative free"
 S CVXMAP(141)="Influenza, seasonal, injectable"
 S CVXMAP(141)="Influenza, seasonal, injectable"
 S CVXMAP(16)="influenza, whole"
 S CVXMAP(111)="influenza, live, intranasal"
 S CVXMAP(153)="Influenza, injectable, MDCK, preservative free"
 S CVXMAP(135)="Influenza, high dose seasonal"
 S CVXMAP(128)="Novel Influenza-H1N1-09, all formulations"
 S CVXMAP(125)="Novel Influenza-H1N1-09, nasal"
 S CVXMAP(66)="Lyme disease"
 S CVXMAP(126)="Novel influenza-H1N1-09, preservative-free"
 S CVXMAP(127)="Novel influenza-H1N1-09"
 S CVXMAP(100)="pneumococcal conjugate PCV 7"
 S CVXMAP(133)="Pneumococcal conjugate PCV 13"
 S CVXMAP(149)="influenza, live, intranasal, quadrivalent"
 S CVXMAP(155)="influenza, recombinant, injectable, preservative free"
 S CVXMAP(18)="rabies, intramuscular injection"
 S CVXMAP(40)="rabies, intradermal injection"
 S CVXMAP(116)="rotavirus, pentavalent"
 S CVXMAP(119)="rotavirus, monovalent"
 S CVXMAP(150)="influenza, injectable, quadrivalent, preservative free"
 S CVXMAP(150)="influenza, injectable, quadrivalent, preservative free"
 S CVXMAP(158)="influenza, injectable, quadrivalent"
 S CVXMAP(25)="typhoid, oral"
 S CVXMAP(101)="typhoid, ViCPs"
 S CVXMAP(41)="typhoid, parenteral"
 S CVXMAP(53)="typhoid, parenteral, AKD (U.S. military)"
 S CVXMAP(130)="DTaP-IPV"
 S CVXMAP(120)="DTaP-Hib-IPV"
 S CVXMAP(20)="DTaP"
 S CVXMAP(106)="DTaP, 5 pertussis antigens"
 S CVXMAP(01)="DTP"
 S CVXMAP(28)="DT (pediatric)"
 S CVXMAP(35)="tetanus toxoid, adsorbed"
 S CVXMAP(07)="mumps"
 S CVXMAP(05)="measles"
 S CVXMAP(06)="rubella"
 S CVXMAP(03)="MMR"
 S CVXMAP(04)="M/R"
 S CVXMAP(94)="MMRV"
 S CVXMAP(02)="OPV"
 S CVXMAP(10)="IPV"
 S CVXMAP(113)="Td (adult) preservative free"
 S CVXMAP(91)="typhoid, unspecified formulation"
 S CVXMAP(115)="Tdap"
 S CVXMAP(21)="varicella"
 S CVXMAP(37)="yellow fever"
 S CVXMAP(09)="Td (adult), adsorbed"
 S CVXMAP(22)="DTP-Hib"
 S CVXMAP(50)="DTaP-Hib"
 S CVXMAP(110)="DTaP-Hep B-IPV"
 S CVXMAP(88)="influenza, unspecified formulation"
 S CVXMAP(26)="cholera"
 S CVXMAP(90)="rabies, unspecified formulation"
 S CVXMAP(23)="plague"
 S CVXMAP(19)="BCG"
 S CVXMAP(85)="Hep A, unspecified formulation"
 S CVXMAP(45)="Hep B, unspecified formulation"
 S CVXMAP(33)="pneumococcal polysaccharide PPV23"
 S CVXMAP(32)="meningococcal MPSV4"
 S CVXMAP(136)="Meningococcal MCV4O"
 S CVXMAP(114)="meningococcal MCV4P"
 S CVXMAP(39)="Japanese encephalitis SC"
 S CVXMAP(121)="zoster"
 S CVXMAP(17)="Hib, unspecified formulation"
 S CVXMAP(134)="Japanese Encephalitis IM"
 S CVXMAP(44)="Hep B, dialysis"
 S CVXMAP(14)="IG, unspecified formulation"
 S CVXMAP(43)="Hep B, adult"
 S CVXMAP(08)="Hep B, adolescent or pediatric"
 S CVXMAP(42)="Hep B, adolescent/high risk infant"
 S CVXMAP(43)="Hep B, adult"
 S CVXMAP(44)="Hep B, dialysis"
 S CVXMAP(51)="Hib-Hep B"
 S CVXMAP(999)="unknown"
 S CVXMAP("B","IG",86)=""
 S CVXMAP("B","IGIV",87)=""
 S CVXMAP("B","botulinum antitoxin",27)=""
 S CVXMAP("B","CMVIG",29)=""
 S CVXMAP("B","diphtheria antitoxin",12)=""
 S CVXMAP("B","HBIG",30)=""
 S CVXMAP("B","RIG",34)=""
 S CVXMAP("B","RIG",34)=""
 S CVXMAP("B","RSV-MAb",93)=""
 S CVXMAP("B","RSV-IGIV",71)=""
 S CVXMAP("B","TIG",13)=""
 S CVXMAP("B","vaccinia immune globulin",79)=""
 S CVXMAP("B","VZIG",36)=""
 S CVXMAP("B","Novel Influenza-H1N1-09, all formulations",128)=""
 S CVXMAP("B","adenovirus, type 4",54)=""
 S CVXMAP("B","adenovirus, type 7",55)=""
 S CVXMAP("B","anthrax",24)=""
 S CVXMAP("B","BCG",19)=""
 S CVXMAP("B","Hep A, adult",52)=""
 S CVXMAP("B","Hep A, ped/adol, 2 dose",83)=""
 S CVXMAP("B","Hep A, ped/adol, 3 dose",84)=""
 S CVXMAP("B","Hep A-Hep B",104)=""
 S CVXMAP("B","Meningococcal C/Y-HIB PRP",148)=""
 S CVXMAP("B","Hib (HbOC)",47)=""
 S CVXMAP("B","Hib (PRP-D)",46)=""
 S CVXMAP("B","Hib (PRP-OMP)",49)=""
 S CVXMAP("B","Hib (PRP-T)",48)=""
 S CVXMAP("B","HPV, quadrivalent",62)=""
 S CVXMAP("B","HPV, bivalent",118)=""
 S CVXMAP("B","influenza, seasonal, intradermal, preservative free",144)=""
 S CVXMAP("B","Influenza, seasonal, injectable, preservative free",140)=""
 S CVXMAP("B","Influenza, seasonal, injectable, preservative free",140)=""
 S CVXMAP("B","Influenza, seasonal, injectable",141)=""
 S CVXMAP("B","Influenza, seasonal, injectable",141)=""
 S CVXMAP("B","influenza, whole",16)=""
 S CVXMAP("B","influenza, live, intranasal",111)=""
 S CVXMAP("B","Influenza, injectable, MDCK, preservative free",153)=""
 S CVXMAP("B","Influenza, high dose seasonal",135)=""
 S CVXMAP("B","Novel Influenza-H1N1-09, all formulations",128)=""
 S CVXMAP("B","Novel Influenza-H1N1-09, nasal",125)=""
 S CVXMAP("B","Lyme disease",66)=""
 S CVXMAP("B","Novel influenza-H1N1-09, preservative-free",126)=""
 S CVXMAP("B","Novel influenza-H1N1-09",127)=""
 S CVXMAP("B","pneumococcal conjugate PCV 7",100)=""
 S CVXMAP("B","Pneumococcal conjugate PCV 13",133)=""
 S CVXMAP("B","influenza, live, intranasal, quadrivalent",149)=""
 S CVXMAP("B","influenza, recombinant, injectable, preservative free",155)=""
 S CVXMAP("B","rabies, intramuscular injection",18)=""
 S CVXMAP("B","rabies, intradermal injection",40)=""
 S CVXMAP("B","rotavirus, pentavalent",116)=""
 S CVXMAP("B","rotavirus, monovalent",119)=""
 S CVXMAP("B","influenza, injectable, quadrivalent, preservative free",150)=""
 S CVXMAP("B","influenza, injectable, quadrivalent, preservative free",150)=""
 S CVXMAP("B","influenza, injectable, quadrivalent",158)=""
 S CVXMAP("B","typhoid, oral",25)=""
 S CVXMAP("B","typhoid, ViCPs",101)=""
 S CVXMAP("B","typhoid, parenteral",41)=""
 S CVXMAP("B","typhoid, parenteral, AKD (U.S. military)",53)=""
 S CVXMAP("B","DTaP-IPV",130)=""
 S CVXMAP("B","DTaP-Hib-IPV",120)=""
 S CVXMAP("B","DTaP",20)=""
 S CVXMAP("B","DTaP, 5 pertussis antigens",106)=""
 S CVXMAP("B","DTP",01)=""
 S CVXMAP("B","DT (pediatric)",28)=""
 S CVXMAP("B","tetanus toxoid, adsorbed",35)=""
 S CVXMAP("B","mumps",07)=""
 S CVXMAP("B","measles",05)=""
 S CVXMAP("B","rubella",06)=""
 S CVXMAP("B","MMR",03)=""
 S CVXMAP("B","M/R",04)=""
 S CVXMAP("B","MMRV",94)=""
 S CVXMAP("B","OPV",02)=""
 S CVXMAP("B","IPV",10)=""
 S CVXMAP("B","Td (adult) preservative free",113)=""
 S CVXMAP("B","typhoid, unspecified formulation",91)=""
 S CVXMAP("B","Tdap",115)=""
 S CVXMAP("B","varicella",21)=""
 S CVXMAP("B","yellow fever",37)=""
 S CVXMAP("B","Td (adult), adsorbed",09)=""
 S CVXMAP("B","DTP-Hib",22)=""
 S CVXMAP("B","DTaP-Hib",50)=""
 S CVXMAP("B","DTaP-Hep B-IPV",110)=""
 S CVXMAP("B","influenza, unspecified formulation",88)=""
 S CVXMAP("B","cholera",26)=""
 S CVXMAP("B","rabies, unspecified formulation",90)=""
 S CVXMAP("B","plague",23)=""
 S CVXMAP("B","BCG",19)=""
 S CVXMAP("B","Hep A, unspecified formulation",85)=""
 S CVXMAP("B","Hep B, unspecified formulation",45)=""
 S CVXMAP("B","pneumococcal polysaccharide PPV23",33)=""
 S CVXMAP("B","meningococcal MPSV4",32)=""
 S CVXMAP("B","Meningococcal MCV4O",136)=""
 S CVXMAP("B","meningococcal MCV4P",114)=""
 S CVXMAP("B","Japanese encephalitis SC",39)=""
 S CVXMAP("B","zoster",121)=""
 S CVXMAP("B","Hib, unspecified formulation",17)=""
 S CVXMAP("B","Japanese Encephalitis IM",134)=""
 S CVXMAP("B","Hep B, dialysis",44)=""
 S CVXMAP("B","IG, unspecified formulation",14)=""
 S CVXMAP("B","Hep B, adult",43)=""
 S CVXMAP("B","Hep B, adolescent or pediatric",08)=""
 S CVXMAP("B","Hep B, adolescent/high risk infant",42)=""
 S CVXMAP("B","Hep B, adult",43)=""
 S CVXMAP("B","Hep B, dialysis",44)=""
 S CVXMAP("B","Hib-Hep B",51)=""
 S CVXMAP("B","unknown",999)=""
 Q
 ;
CPTIMAP
 S CPTIMAP(90724)="INFLUENZA"
 S CPTIMAP(90744)="HEPB PED/ADOL-1"
 S CPTIMAP(90744)="HEPB PED/ADOL-2"
 S CPTIMAP(90744)="HEPB PED/ADOL-3"
 S CPTIMAP(90744)="HEPB PED/ADOL-4"
 S CPTIMAP(90701)="DIP.PERT.TET. (DPT) PED 1"
 S CPTIMAP(90701)="DIP.PERT.TET. (DPT) PED 2"
 S CPTIMAP(90701)="DIP.PERT.TET. (DPT) PED 3"
 S CPTIMAP(90701)="DIP.PERT.TET. (DPT) PED 4"
 S CPTIMAP(90701)="DIP.PERT.TET. (DPT) PED 5"
 S CPTIMAP(90645)="HIB PED 1"
 S CPTIMAP(90645)="HIB PED 2"
 S CPTIMAP(90645)="HIB PED 3"
 S CPTIMAP(90645)="HIB PED 4"
 S CPTIMAP(90707)="MEASLESMUMPSRUBELLA PED #1"
 S CPTIMAP(90707)="MEASLESMUMPSRUBELLA PED #2"
 S CPTIMAP(90713)="POLIOVIRUS PED #1"
 S CPTIMAP(90713)="POLIOVIRUS PED #2"
 S CPTIMAP(90713)="POLIOVIRUS PED #3"
 S CPTIMAP(90713)="POLIOVIRUS PED #4"
 S CPTIMAP(90670)="PNEUMOCOCCAL PED 1"
 S CPTIMAP(90670)="PNEUMOCOCCAL PED 2"
 S CPTIMAP(90670)="PNEUMOCOCCAL PED 3"
 S CPTIMAP(90670)="PNEUMOCOCCAL PED 4"
 S CPTIMAP(90701)="DIPPERTTET (DPT)"
 S CPTIMAP(90701)="DIPPERTTET (DPT) PED 1"
 S CPTIMAP(90701)="DIPPERTTET (DPT) PED 2"
 S CPTIMAP(90701)="DIPPERTTET (DPT) PED 3"
 S CPTIMAP(90701)="DIPPERTTET (DPT) PED 4"
 S CPTIMAP(90701)="DIPPERTTET (DPT) PED 5"
 S CPTIMAP(90732)="PNEUMOVAX"
 S CPTIMAP(90715)="TETANUS DIPTHERIA AND PERTUSSIS"
 S CPTIMAP(90634)="HEP B PED/ADOL 3 DOSE"
 S CPTIMAP(90633)="HEP A2 PEDS"
 S CPTIMAP(90633)="HEP A1 PEDS"
 S CPTIMAP(90680)="RV 1 PEDS"
 S CPTIMAP(90680)="RV 2 PEDS"
 S CPTIMAP(90680)="RV 3 PEDS"
 S CPTIMAP(90647)="HiB1"
 S CPTIMAP(90647)="HiB2"
 S CPTIMAP(90647)="HiB3"
 S CPTIMAP(90669)="PCV1 PEDS"
 S CPTIMAP(90669)="PCV2 PEDS"
 S CPTIMAP(90669)="PCV3 PEDS"
 S CPTIMAP(90669)="PCV4 PEDS"
 S CPTIMAP(90669)="PCV5 PEDS"
 S CPTIMAP(90716)="VZV1 INFANT"
 S CPTIMAP(90716)="VZV2 INFANT"
 S CPTIMAP(90744)="HEP B1 INFANT"
 S CPTIMAP(90744)="HEP B2 INFANT"
 S CPTIMAP(90744)="HEP B3 INFANT"
 S CPTIMAP(90744)="HEP B4 INFANT"
 S CPTIMAP(90707)="MMR1"
 S CPTIMAP(90713)="IPV1"
 S CPTIMAP(90713)="IPV2"
 S CPTIMAP(90713)="IPV3"
 S CPTIMAP(90713)="IPV4"
 S CPTIMAP(90700)="DTaP1"
 S CPTIMAP(90700)="DTaP2"
 S CPTIMAP(90700)="DTaP3"
 S CPTIMAP(90700)="DTaP4"
 S CPTIMAP(90700)="DTaP5"
 S CPTIMAP(90634)="HEP A3 PEDS"
 S CPTIMAP(90658)="FLU,3 YRS"
 S CPTIMAP("B","INFLUENZA",90724)=""
 S CPTIMAP("B","HEPB, PED/ADOL-1",90744)=""
 S CPTIMAP("B","HEPB PED/ADOL-2",90744)=""
 S CPTIMAP("B","HEPB PED/ADOL-3",90744)=""
 S CPTIMAP("B","HEPB PED/ADOL-4",90744)=""
 S CPTIMAP("B","DIP.,PERT.,TET. (DPT) PED 1",90701)=""
 S CPTIMAP("B","DIP.,PERT.,TET. (DPT) PED 2",90701)=""
 S CPTIMAP("B","DIP.,PERT.,TET. (DPT) PED 3",90701)=""
 S CPTIMAP("B","DIP.,PERT.,TET. (DPT) PED 4",90701)=""
 S CPTIMAP("B","DIP.,PERT.,TET. (DPT) PED 5",90701)=""
 S CPTIMAP("B","HIB PED 1",90645)=""
 S CPTIMAP("B","HIB PED 2",90645)=""
 S CPTIMAP("B","HIB PED 3",90645)=""
 S CPTIMAP("B","HIB PED 4",90645)=""
 S CPTIMAP("B","MEASLES,MUMPS,RUBELLA PED #1",90707)=""
 S CPTIMAP("B","MEASLES,MUMPS,RUBELLA PED #2",90707)=""
 S CPTIMAP("B","POLIOVIRUS PED #1",90713)=""
 S CPTIMAP("B","POLIOVIRUS PED #2",90713)=""
 S CPTIMAP("B","POLIOVIRUS PED #3",90713)=""
 S CPTIMAP("B","POLIOVIRUS PED #4",90713)=""
 S CPTIMAP("B","PNEUMOCOCCAL PED 1",90670)=""
 S CPTIMAP("B","PNEUMOCOCCAL PED 2",90670)=""
 S CPTIMAP("B","PNEUMOCOCCAL PED 3",90670)=""
 S CPTIMAP("B","PNEUMOCOCCAL PED 4",90670)=""
 S CPTIMAP("B","DIP,PERT,TET (DPT)",90701)=""
 S CPTIMAP("B","DIP,PERT,TET (DPT) PED 1",90701)=""
 S CPTIMAP("B","DIP,PERT,TET (DPT) PED 2",90701)=""
 S CPTIMAP("B","DIP,PERT,TET (DPT) PED 3",90701)=""
 S CPTIMAP("B","DIP,PERT,TET (DPT) PED 4",90701)=""
 S CPTIMAP("B","DIP,PERT,TET (DPT) PED 5",90701)=""
 S CPTIMAP("B","PNEUMOVAX",90732)=""
 S CPTIMAP("B","TETANUS, DIPTHERIA AND PERTUSSIS",90715)=""
 S CPTIMAP("B","HEP B PED/ADOL 3 DOSE",90634)=""
 S CPTIMAP("B","HEP A2 PEDS",90633)=""
 S CPTIMAP("B","HEP A1 PEDS",90633)=""
 S CPTIMAP("B","RV 1 PEDS",90680)=""
 S CPTIMAP("B","RV 2 PEDS",90680)=""
 S CPTIMAP("B","RV 3 PEDS",90680)=""
 S CPTIMAP("B","HiB1",90647)=""
 S CPTIMAP("B","HiB2",90647)=""
 S CPTIMAP("B","HiB3",90647)=""
 S CPTIMAP("B","PCV1 PEDS",90669)=""
 S CPTIMAP("B","PCV2 PEDS",90669)=""
 S CPTIMAP("B","PCV3 PEDS",90669)=""
 S CPTIMAP("B","PCV4 PEDS",90669)=""
 S CPTIMAP("B","PCV5 PEDS",90669)=""
 S CPTIMAP("B","VZV1 INFANT",90716)=""
 S CPTIMAP("B","VZV2 INFANT",90716)=""
 S CPTIMAP("B","HEP B1 INFANT",90744)=""
 S CPTIMAP("B","HEP B2 INFANT",90744)=""
 S CPTIMAP("B","HEP B3 INFANT",90744)=""
 S CPTIMAP("B","HEP B4 INFANT",90744)=""
 S CPTIMAP("B","MMR1",90707)=""
 S CPTIMAP("B","IPV1",90713)=""
 S CPTIMAP("B","IPV2",90713)=""
 S CPTIMAP("B","IPV3",90713)=""
 S CPTIMAP("B","IPV4",90713)=""
 S CPTIMAP("B","DTaP1",90700)=""
 S CPTIMAP("B","DTaP2",90700)=""
 S CPTIMAP("B","DTaP3",90700)=""
 S CPTIMAP("B","DTaP4",90700)=""
 S CPTIMAP("B","DTaP5",90700)=""
 S CPTIMAP("B","HEP A3 PEDS",90634)=""
 S CPTIMAP("B","FLU,3 YRS",90658)=""
 Q
 ;
CVXIMAP 
 S CVXIMAP(75)="SMALLPOX"
 S CVXIMAP(09)="TETANUS DIPTHERIA (TD-ADULT)"
 S CVXIMAP(01)="DIP.,PERT.,TET. (DPT)"
 S CVXIMAP(35)="TETANUS TOXOID"
 S CVXIMAP(91)="TYPHOID"
 S CVXIMAP(02)="ORAL POLIOVIRUS"
 S CVXIMAP(43)="SWINE FLU BIVAL"
 S CVXIMAP(45)="HEPATITIS B"
 S CVXIMAP(05)="MEASLES"
 S CVXIMAP(88)="INFLUENZA"
 S CVXIMAP(26)="CHOLERA"
 S CVXIMAP(06)="RUBELLA"
 S CVXIMAP(07)="MUMPS"
 S CVXIMAP(19)="BCG"
 S CVXIMAP(03)="MEASLES,MUMPS,RUBELLA (MMR)"
 S CVXIMAP(04)="MEASLES,RUBELLA (MR)"
 S CVXIMAP(33)="PNEUMOCOCCAL"
 S CVXIMAP(37)="YELLOW FEVER"
 S CVXIMAP(131)="TYPHUS"
 S CVXIMAP(90)="RABIES"
 S CVXIMAP(28)="DIPTHERIA-TETANUS (DT-PEDS)"
 S CVXIMAP(17)="INFLUENZA B"
 S CVXIMAP(85)="HEPATITIS A"
 S CVXIMAP(32)="MENINGOCOCCAL"
 S CVXIMAP(39)="ENCEPHALITIS"
 S CVXIMAP(21)="CHICKENPOX"
 S CVXIMAP(106)="DIP-TET-a/PERT"
 S CVXIMAP(38)="RUBELLA, MUMPS"
 S CVXIMAP(22)="DTB/HIB"
 S CVXIMAP(94)="MEA-MUMPS-RUB-VARCELLA"
 S CVXIMAP(23)="PLAGUE"
 S CVXIMAP(14)="GAMMA GLOBULIN"
 S CVXIMAP(54)="ADENOVIRUS,TYPE 4"
 S CVXIMAP(55)="ADENOVIRUS,TYPE 7"
 S CVXIMAP(24)="ANTHRAX,SC"
 S CVXIMAP(19)="BCG,PERCUT"
 S CVXIMAP(26)="CHOLERA, ORAL"
 S CVXIMAP(52)="HEPA ADULT"
 S CVXIMAP(83)="HEPA,PED/ADOL-2"
 S CVXIMAP(84)="HEPA,PED/ADOL-3 DOSE"
 S CVXIMAP(104)="HEPA/HEPB ADULT"
 S CVXIMAP(47)="HIB,HBOC"
 S CVXIMAP(46)="HIB,PRP-D"
 S CVXIMAP(49)="HIB,PRP-OMP"
 S CVXIMAP(48)="HIB,PRP-T"
 S CVXIMAP(141)="FLU,3 YRS"
 S CVXIMAP(16)="FLU,WHOLE"
 S CVXIMAP(111)="FLU,NASAL"
 S CVXIMAP(66)="LYME DISEASE"
 S CVXIMAP(100)="PNEUMOCOCCAL,PED"
 S CVXIMAP(18)="RABIES,IM"
 S CVXIMAP(40)="RABIES,ID"
 S CVXIMAP(116)="ROTOVIRUS,ORAL"
 S CVXIMAP(25)="TYPHOID,ORAL"
 S CVXIMAP(101)="TYPHOID"
 S CVXIMAP(41)="TYPHOID,H-P,SC/ID"
 S CVXIMAP(53)="TYPHOID,AKD,SC"
 S CVXIMAP(44)="HEPB, ILL PAT"
 S CVXIMAP(51)="HEPB/HIB"
 S CVXIMAP(08)="HEPB, PED/ADOL-1"
 S CVXIMAP(08)="HEPB PED/ADOL-2"
 S CVXIMAP(08)="HEPB PED/ADOL-3"
 S CVXIMAP(08)="HEPB PED/ADOL-4"
 S CVXIMAP(20)="DIP.,PERT.,TET. (DPT) PED 1"
 S CVXIMAP(20)="DIP.,PERT.,TET. (DPT) PED 2"
 S CVXIMAP(20)="DIP.,PERT.,TET. (DPT) PED 3"
 S CVXIMAP(20)="DIP.,PERT.,TET. (DPT) PED 4"
 S CVXIMAP(20)="DIP.,PERT.,TET. (DPT) PED 5"
 S CVXIMAP(47)="HIB PED 1"
 S CVXIMAP(47)="HIB PED 2"
 S CVXIMAP(47)="HIB PED 3"
 S CVXIMAP(47)="HIB PED 4"
 S CVXIMAP(03)="MEASLES,MUMPS,RUBELLA PED #1"
 S CVXIMAP(03)="MEASLES,MUMPS,RUBELLA PED #2"
 S CVXIMAP(10)="POLIOVIRUS PED #1"
 S CVXIMAP(10)="POLIOVIRUS PED #2"
 S CVXIMAP(10)="POLIOVIRUS PED #3"
 S CVXIMAP(10)="POLIOVIRUS PED #4"
 S CVXIMAP(100)="PNEUMOCOCCAL PED 1"
 S CVXIMAP(100)="PNEUMOCOCCAL PED 2"
 S CVXIMAP(100)="PNEUMOCOCCAL PED 3"
 S CVXIMAP(100)="PNEUMOCOCCAL PED 4"
 S CVXIMAP(01)="DIP,PERT,TET (DPT)"
 S CVXIMAP(106)="DIP,PERT,TET (DPT) PED 1"
 S CVXIMAP(106)="DIP,PERT,TET (DPT) PED 2"
 S CVXIMAP(106)="DIP,PERT,TET (DPT) PED 3"
 S CVXIMAP(106)="DIP,PERT,TET (DPT) PED 4"
 S CVXIMAP(106)="DIP,PERT,TET (DPT) PED 5"
 S CVXIMAP(33)="PNEUMOVAX"
 S CVXIMAP(115)="TETANUS, DIPTHERIA AND PERTUSSIS"
 S CVXIMAP(08)="HEP B PED/ADOL 3 DOSE"
 S CVXIMAP(106)="DTaP1"
 S CVXIMAP(106)="DTaP2"
 S CVXIMAP(106)="DTaP3"
 S CVXIMAP(106)="DTaP4"
 S CVXIMAP(106)="DTaP5"
 S CVXIMAP(83)="HEP A1 PEDS"
 S CVXIMAP(83)="HEP A2 PEDS"
 S CVXIMAP(84)="HEP A3 PEDS"
 S CVXIMAP(42)="HEP B1 INFANT"
 S CVXIMAP(42)="HEP B2 INFANT"
 S CVXIMAP(42)="HEP B3 INFANT"
 S CVXIMAP(42)="HEP B4 INFANT"
 S CVXIMAP(49)="HiB1"
 S CVXIMAP(49)="HiB2"
 S CVXIMAP(49)="HiB3"
 S CVXIMAP(10)="IPV1"
 S CVXIMAP(10)="IPV2"
 S CVXIMAP(10)="IPV3"
 S CVXIMAP(10)="IPV4"
 S CVXIMAP(03)="MMR1"
 S CVXIMAP(133)="PCV1 PEDS"
 S CVXIMAP(133)="PCV2 PEDS"
 S CVXIMAP(133)="PCV3 PEDS"
 S CVXIMAP(133)="PCV4 PEDS"
 S CVXIMAP(133)="PCV5 PEDS"
 S CVXIMAP(116)="RV 1 PEDS"
 S CVXIMAP(116)="RV 2 PEDS"
 S CVXIMAP(116)="RV 3 PEDS"
 S CVXIMAP(116)="RV 4 PEDS"
 S CVXIMAP(21)="VZV1 INFANT"
 S CVXIMAP(21)="VZV2 INFANT"
 S CVXIMAP(141)="FLU,3 YRS"
 S CVXIMAP("B","SMALLPOX",75)=""
 S CVXIMAP("B","TETANUS DIPTHERIA (TD-ADULT)",09)=""
 S CVXIMAP("B","DIP.,PERT.,TET. (DPT)",01)=""
 S CVXIMAP("B","TETANUS TOXOID",35)=""
 S CVXIMAP("B","TYPHOID",91)=""
 S CVXIMAP("B","ORAL POLIOVIRUS",02)=""
 S CVXIMAP("B","SWINE FLU BIVAL",43)=""
 S CVXIMAP("B","HEPATITIS B",45)=""
 S CVXIMAP("B","MEASLES",05)=""
 S CVXIMAP("B","INFLUENZA",88)=""
 S CVXIMAP("B","CHOLERA",26)=""
 S CVXIMAP("B","RUBELLA",06)=""
 S CVXIMAP("B","MUMPS",07)=""
 S CVXIMAP("B","BCG",19)=""
 S CVXIMAP("B","MEASLES,MUMPS,RUBELLA (MMR)",03)=""
 S CVXIMAP("B","MEASLES,RUBELLA (MR)",04)=""
 S CVXIMAP("B","PNEUMOCOCCAL",33)=""
 S CVXIMAP("B","YELLOW FEVER",37)=""
 S CVXIMAP("B","TYPHUS",131)=""
 S CVXIMAP("B","RABIES",90)=""
 S CVXIMAP("B","DIPTHERIA-TETANUS (DT-PEDS)",28)=""
 S CVXIMAP("B","INFLUENZA B",17)=""
 S CVXIMAP("B","HEPATITIS A",85)=""
 S CVXIMAP("B","MENINGOCOCCAL",32)=""
 S CVXIMAP("B","ENCEPHALITIS",39)=""
 S CVXIMAP("B","CHICKENPOX",21)=""
 S CVXIMAP("B","DIP-TET-a/PERT",106)=""
 S CVXIMAP("B","RUBELLA, MUMPS",38)=""
 S CVXIMAP("B","DTB/HIB",22)=""
 S CVXIMAP("B","MEA-MUMPS-RUB-VARCELLA",94)=""
 S CVXIMAP("B","PLAGUE",23)=""
 S CVXIMAP("B","GAMMA GLOBULIN",14)=""
 S CVXIMAP("B","ADENOVIRUS,TYPE 4",54)=""
 S CVXIMAP("B","ADENOVIRUS,TYPE 7",55)=""
 S CVXIMAP("B","ANTHRAX,SC",24)=""
 S CVXIMAP("B","BCG,PERCUT",19)=""
 S CVXIMAP("B","CHOLERA, ORAL",26)=""
 S CVXIMAP("B","HEPA ADULT",52)=""
 S CVXIMAP("B","HEPA,PED/ADOL-2",83)=""
 S CVXIMAP("B","HEPA,PED/ADOL-3 DOSE",84)=""
 S CVXIMAP("B","HEPA/HEPB ADULT",104)=""
 S CVXIMAP("B","HIB,HBOC",47)=""
 S CVXIMAP("B","HIB,PRP-D",46)=""
 S CVXIMAP("B","HIB,PRP-OMP",49)=""
 S CVXIMAP("B","HIB,PRP-T",48)=""
 S CVXIMAP("B","FLU,3 YRS",141)=""
 S CVXIMAP("B","FLU,WHOLE",16)=""
 S CVXIMAP("B","FLU,NASAL",111)=""
 S CVXIMAP("B","LYME DISEASE",66)=""
 S CVXIMAP("B","PNEUMOCOCCAL,PED",100)=""
 S CVXIMAP("B","RABIES,IM",18)=""
 S CVXIMAP("B","RABIES,ID",40)=""
 S CVXIMAP("B","ROTOVIRUS,ORAL",116)=""
 S CVXIMAP("B","TYPHOID,ORAL",25)=""
 S CVXIMAP("B","TYPHOID",101)=""
 S CVXIMAP("B","TYPHOID,H-P,SC/ID",41)=""
 S CVXIMAP("B","TYPHOID,AKD,SC",53)=""
 S CVXIMAP("B","HEPB, ILL PAT",44)=""
 S CVXIMAP("B","HEPB/HIB",51)=""
 S CVXIMAP("B","HEPB, PED/ADOL-1",08)=""
 S CVXIMAP("B","HEPB PED/ADOL-2",08)=""
 S CVXIMAP("B","HEPB PED/ADOL-3",08)=""
 S CVXIMAP("B","HEPB PED/ADOL-4",08)=""
 S CVXIMAP("B","DIP.,PERT.,TET. (DPT) PED 1",20)=""
 S CVXIMAP("B","DIP.,PERT.,TET. (DPT) PED 2",20)=""
 S CVXIMAP("B","DIP.,PERT.,TET. (DPT) PED 3",20)=""
 S CVXIMAP("B","DIP.,PERT.,TET. (DPT) PED 4",20)=""
 S CVXIMAP("B","DIP.,PERT.,TET. (DPT) PED 5",20)=""
 S CVXIMAP("B","HIB PED 1",47)=""
 S CVXIMAP("B","HIB PED 2",47)=""
 S CVXIMAP("B","HIB PED 3",47)=""
 S CVXIMAP("B","HIB PED 4",47)=""
 S CVXIMAP("B","MEASLES,MUMPS,RUBELLA PED #1",03)=""
 S CVXIMAP("B","MEASLES,MUMPS,RUBELLA PED #2",03)=""
 S CVXIMAP("B","POLIOVIRUS PED #1",10)=""
 S CVXIMAP("B","POLIOVIRUS PED #2",10)=""
 S CVXIMAP("B","POLIOVIRUS PED #3",10)=""
 S CVXIMAP("B","POLIOVIRUS PED #4",10)=""
 S CVXIMAP("B","PNEUMOCOCCAL PED 1",100)=""
 S CVXIMAP("B","PNEUMOCOCCAL PED 2",100)=""
 S CVXIMAP("B","PNEUMOCOCCAL PED 3",100)=""
 S CVXIMAP("B","PNEUMOCOCCAL PED 4",100)=""
 S CVXIMAP("B","DIP,PERT,TET (DPT)",01)=""
 S CVXIMAP("B","DIP,PERT,TET (DPT) PED 1",106)=""
 S CVXIMAP("B","DIP,PERT,TET (DPT) PED 2",106)=""
 S CVXIMAP("B","DIP,PERT,TET (DPT) PED 3",106)=""
 S CVXIMAP("B","DIP,PERT,TET (DPT) PED 4",106)=""
 S CVXIMAP("B","DIP,PERT,TET (DPT) PED 5",106)=""
 S CVXIMAP("B","PNEUMOVAX",33)=""
 S CVXIMAP("B","TETANUS, DIPTHERIA AND PERTUSSIS",115)=""
 S CVXIMAP("B","HEP B PED/ADOL 3 DOSE",08)=""
 S CVXIMAP("B","DTaP1",106)=""
 S CVXIMAP("B","DTaP2",106)=""
 S CVXIMAP("B","DTaP3",106)=""
 S CVXIMAP("B","DTaP4",106)=""
 S CVXIMAP("B","DTaP5",106)=""
 S CVXIMAP("B","HEP A1 PEDS",83)=""
 S CVXIMAP("B","HEP A2 PEDS",83)=""
 S CVXIMAP("B","HEP A3 PEDS",84)=""
 S CVXIMAP("B","HEP B1 INFANT",42)=""
 S CVXIMAP("B","HEP B2 INFANT",42)=""
 S CVXIMAP("B","HEP B3 INFANT",42)=""
 S CVXIMAP("B","HEP B4 INFANT",42)=""
 S CVXIMAP("B","HiB1",49)=""
 S CVXIMAP("B","HiB2",49)=""
 S CVXIMAP("B","HiB3",49)=""
 S CVXIMAP("B","IPV1",10)=""
 S CVXIMAP("B","IPV2",10)=""
 S CVXIMAP("B","IPV3",10)=""
 S CVXIMAP("B","IPV4",10)=""
 S CVXIMAP("B","MMR1",03)=""
 S CVXIMAP("B","PCV1 PEDS",133)=""
 S CVXIMAP("B","PCV2 PEDS",133)=""
 S CVXIMAP("B","PCV3 PEDS",133)=""
 S CVXIMAP("B","PCV4 PEDS",133)=""
 S CVXIMAP("B","PCV5 PEDS",133)=""
 S CVXIMAP("B","RV 1 PEDS",116)=""
 S CVXIMAP("B","RV 2 PEDS",116)=""
 S CVXIMAP("B","RV 3 PEDS",116)=""
 S CVXIMAP("B","RV 4 PEDS",116)=""
 S CVXIMAP("B","VZV1 INFANT",21)=""
 S CVXIMAP("B","VZV2 INFANT",21)=""
 S CVXIMAP("B","FLU,3 YRS",141)=""
 Q
 ;
ALLMAP ; 
 ; create a single map out the above maps
 N CVX,MAP
 S CVX=""
 D CPTMAP
 D CVXMAP
 D CPTIMAP
 D CVXIMAP
 S MAP=$NA(^C0CodeMap("immunizations"))
 K @MAP
 F  S CVX=$O(CVXMAP(CVX)) Q:+CVX=0  D  ;
 . S @MAP@(CVX,"preferredName")=CVXMAP(CVX)
 . S @MAP@(CVX,"CVXcode")=CVX
 . S @MAP@("B",CVXMAP(CVX),CVX)=""
 . D:$G(CVXIMAP(CVX))'="" 
 . . S @MAP@(CVX,"altName",1)=CVXIMAP(CVX)
 . . S @MAP@("B",CVXIMAP(CVX),CVX)=""
 N CPT S CPT=""
 F  S CPT=$O(CPTMAP(CPT)) Q:+CPT=0  D  ;
 . S CVX=CPTMAP(CPT)
 . S @MAP@(CVX,"CPT")=CPT
 . S @MAP@("CPT",CPT,CVX)=""
 ; now do all the extra names in the B index of CVXIMAP
 N ZJ S ZJ=""
 F  S ZJ=$O(CVXIMAP("B",ZJ)) Q:ZJ=""  D  ;
 . S CVX=""
 . F  S CVX=$O(CVXIMAP("B",ZJ,CVX)) Q:CVX=""  D  ;
 . . I $D(@MAP@("B",ZJ)) Q  ; already in the map
 . . S @MAP@(CVX,"altName",$O(@MAP@(CVX,"altName",""),-1)+1)=ZJ
 . . S @MAP@("B",ZJ,CVX)=""
 M G=@MAP
 ZWR G
 Q
 ;

C0ITESTBU
C0ITEST ; GPL/NEA - Immunizations Forecasting Routine ;05/03/14  17:05
 ;;0.1;Immunizations Forecasting;nopatch;noreleasedate;
 ;
 ; License Apache 2
 ; 
 Q
 ;
TEST1 ;
 S DFN=29
 K WRK
 D CPTMAP
 D CVXMAP
 D CPTIMAP
 D PAYOUTAV
 ;D PAYOUTBV
 D GET^C0IUTIL("WRK","TPAYOUTC^C0ITEST")
 D PAYOUTDV
 D GET^C0IUTIL("WRK","TPAYOUTE^C0ITEST")
 M ^TMP("C0IWRK",$J)=WRK
 W $$GTF^%ZISH($NA(^TMP("C0IWRK",$J,1)),3,"/home/vista/","ice-test.xml")
 Q
 ; get patient DFN
 ; get patient VPR demographics for sex and DOB
 ; call VPR to get patient Immunizaitons
 ; 
 ; begin building SOAP request XML
 ; loop through immunizations array and generate XML pieces
 ; call build to put all the pieces together into one XML array
 ; base64 encode the XML array
 ;
TENVOUT ; build SOAP envelope
 ;;<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope"> 
 ;;<S:Body>
 ;;<ns2:evaluateAtSpecifiedTime xmlns:ns2="http://www.omg.org/spec/CDSS/201105/dss">
 ;;<interactionId scopingEntityId="gov.nyc.health" interactionId="123456"/>
 ;;<specifiedTime>@@hl7OutTime@@</specifiedTime>
 ;;<evaluationRequest clientLanguage="" clientTimeZoneOffset="">
 ;;<kmEvaluationRequest>
 ;;<kmId scopingEntityId="org.nyc.cir" businessId="ICE" version="1.0.0"/>
 ;;</kmEvaluationRequest>
 ;;<dataRequirementItemData>
 ;;<driId itemId="cdsPayload">
 ;;<containingEntityId scopingEntityId="gov.nyc.health" businessId="ICEData" version="1.0.0.0"/>
 ;;</driId>
 ;;<data>
 ;;<informationModelSSId scopingEntityId="org.opencds.vmr" businessId="VMR" version="1.0"/>
 ;;<base64EncodedPayload>@@outPayload@@</base64EncodedPayload>
 ;;</data>
 ;;</dataRequirementItemData>
 ;;</evaluationRequest>
 ;;</ns2:evaluateAtSpecifiedTime>
 ;; </S:Body>
 ;; </S:Envelope>
 Q
ENVOUTV ; create beginning of envelop
 K C0IARY
 S C0IARY("hl7OutTime")=$$FMDTOUTC^C0IUTIL(DT)
 D GETNMAP^C0IUTIL("WRK","TENVOUT^C0ITEST","C0IARY")
 Q
TPAYOUTA ; First part of payload message with Sex and DOB and a UUID variables
 ;;<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
 ;;<ns4:cdsInput xmlns:ns2="org.opencds" xmlns:ns3="org.opencds.vmr.v1_0.schema.vmr"
 ;;xmlns:ns4="org.opencds.vmr.v1_0.schema.cdsinput" xmlns:ns5="org.opencds.vmr.v1_0.schema.cdsoutput">
 ;;<templateId root="2.16.840.1.113883.3.795.11.1.1"/>
 ;;<cdsContext>
 ;;<cdsSystemUserPreferredLanguage code="en" codeSystem="2.16.840.1.113883.6.99" displayName="English"/>
 ;;</cdsContext>
 ;;<vmrInput>
 ;;<templateId root="2.16.840.1.113883.3.795.11.1.1"/>
 ;;<patient>
 ;;<templateId root="2.16.840.1.113883.3.795.11.2.1.1"/>
 ;;<id root="@@UUID0@@"/>
 ;;<demographics>
 ;;<birthTime value="@@DOB@@"/>
 ;;<gender code="@@genderCode@@" codeSystem="2.16.840.1.113883.5.1" displayName="genderName" originalText="@@genderCode@@"/>
 ;;</demographics>
 ;;<clinicalStatements>
 Q
 ;
PAYOUTAV ; setting payload variables sex, DOB and UUID for the first section (PAYOUTA)
 K COIPOA
 S X=$$GET1^DIQ(2,DFN,"DOB","I")
 S C0IPOA("UUID0")=$$UUID^C0IUTIL
 S C0IPOA("DOB")=$$FMDTOUTC^C0IUTIL(X)
 S C0IPOA("genderCode")=$$GET1^DIQ(2,DFN,"SEX","I")
 I C0IPOA("genderCode")="M" S C0IPOA("genderName")="Male"
 I C0IPOA("genderCode")="F" S C0IPOA("genderName")="Female"
 I C0IPOA("genderCode")="UN" S C0IPOA("genderName")="Undifferentiated" ; ICE term, not VISTA  VistA allow M F only.P
 D GETNMAP^C0IUTIL("WRK","TPAYOUTA^C0ITEST","C0IPOA") 
 Q
 ;
TPAYOUTB ;
 ;;; Disease an immunity section which is optional. the DISEASE_DOCUMENTED and IS_IMMUNE
 ;;;Optional section awaiting more info skip for now
 ;;;Hep A: 070.1
 ;;;Hep B: 070.3
 ;;;Measles: 055.9
 ;;;Mumps: 072.9
 ;;;Rubella: 056.9
 ;;;Varicella: 052.9
 ;;;<observationResults>
 ;;;<observationResult>
 ;;;<templateId root="2.16.840.1.113883.3.795.11.6.3.1"/>
 ;;;<id root="@@UUID1@@"/>
 ;;;<observationFocus code="@@codeICD9@@" codeSystem="2.16.840.1.113883.6.103" displayName="@@codeName@@" originalText="@@codeICD9@@"/>
 ;;;<observationEventTime low="@@timeProblem" high="@@timeProblem@@"/>
 ;;;<observationValue>
 ;;;<concept code="DISEASE_DOCUMENTED" codeSystem="2.16.840.1.113883.3.795.12.100.8" displayName="Disease Documented" originalText="DISEASE_DOCUMENTED"/>                                 ;;;</observationValue>
 ;;;<interpretation code="IS_IMMUNE" codeSystem="2.16.840.1.113883.3.795.12.100.9" displayName="Is Immune" originalText="IS_IMMUNE"
 ;;;</observationResult>
 ;;;</observationResults>
 Q
 ;
PAYOUTBV ;
 ;Placeholder for logic and variables for populating the DISEASE_DOCUMENTED and IS_IMMUNE
 ;Diseases Hep A, Hep B, Measles, Mumps, Rubella, Varicella only as of 5/2014, 
 D GETNMAP^C0IUTIL("WRK","TPAYOUTB^C0ITEST","C0IPOA")
 Q
 ;
TPAYOUTC ;
 ;;; only one line that is fixed for substance administration 
 ;;<substanceAdministrationEvents>
 Q
 ;
TPAYOUTD ; 
 ;;; this section loops through the immunizations
 ;;<substanceAdministrationEvent>
 ;;<templateId root="2.16.840.1.113883.3.795.11.9.1.1"/>
 ;;<id root="@@UUID1@@"/>
 ;;<substanceAdministrationGeneralPurpose code="384810002" codeSystem="2.16.840.1.113883.6.5"/>
 ;;<substance>
 ;;<id root="@@UUID2@@"/>
 ;;<substanceCode code="@@CVXCode@@" codeSystem="2.16.840.1.113883.12.292" displayName="@@CVXName@@" originalText="@@ORIGName@@"/>
 ;;</substance>
 ;;<administrationTimeInterval low="@@admDate@@" high="@@admDate@@"/>
 ;;</substanceAdministrationEvent>
 Q
 ;
PAYOUTDV ;
 ; Variable and code for the looping IMMUNIZATIONS section
 ; Need UUID x 2, CVX code, name from CVX Short name, administration date 
 ;(need really only one eve thought it asks for high and low - use the same variable)
 D GETPAT^C0IEXTR(.G,DFN,"immunization")
 I G("results","immunizations@total")=0 Q
 E  D
 .N T S T=G("results","immunizations@total")
 .N I S I=""
 .F I=1:1:T D
 ..N CPTIMM,CVXCODE,ADMDATE,IMMNAME,IMMCVX
 ..S C0IPOA("UUID1")=$$UUID^C0IUTIL 
 ..S C0IPOA("UUID2")=$$UUID^C0IUTIL
 ..S C0IPOA("CVXCode")=""
 ..S C0IPOA("CVXName")=""
 ..S C0IPOA("ORIGName")=""
 ..S C0IPOA("admDate")=""
 ..W "I is ",I,!
 ..I $D(G("results","immunizations",I,"immunization","cpt@code")) D 
 ...; If there is a CPT code, use that to get the CVX code and the proper CVC code name
 ...N CPTIMM,CVXCODE,ADMDATE 
 ...S CPTIMM="" S CVXCODE="" S ADMDATE=""
 ...S CPTIMM=$G(G("results","immunizations",I,"immunization","cpt@code"))
 ...W "CPTIMM from G is ",CPTIMM,!
 ...S CVXCODE=CPTMAP(CPTIMM)
 ...W "The CVX code for this immunizaton with a CPT code is ",CVXCODE,!
 ...I CVXCODE'="" D  Q
 ....; If you found the CVXCode by the CPT code, add the XML to the array and QUIT  
 ....S C0IPOA("CVXCode")=CVXCODE
 ....S C0IPOA("CVXName")=CVXMAP(CVXCODE)
 ....S C0IPOA("ORIGName")=$G(G("results","immunizations",I,"immunization","name@value"))
 ....S ADMDATE=$G(G("results","immunizations",I,"immunization","administered@value"))
 ....S C0IPOA("admDate")=$$FMDTOUTC^C0IUTIL(ADMDATE)
 ....D GETNMAP^C0IUTIL("WRK","TPAYOUTD^C0ITEST","C0IPOA")
 ..I '$D(G("results","immunizations",I,"immunization","cpt@code")) D
 ...; if there is no CPT code, try to look it up by the proper CVX code name
 ...N IMMNAME,IMMCVX,IMMCPT,CVXCODE,ADMDATE
 ...S IMMNAME="" 
 ...S IMMNAME=$G(G("results","immunizations",I,"immunization","name@value"))
 ...W "IMMNAME in the no CPT look up by proper CVX code name is ",IMMNAME,!
 ...S IMMCVX=$O(CVXMAP("B",IMMNAME,""))
 ...W "IMMCVX for this vaccine with a proper name is ",IMMCVX,!
 ...I IMMCVX="" D
 ....; If the CVX code is not found by the proper CVX code name, try the lookup in the CPTIMAP section by the
 ....; original name which are odd names in the Immunization file.
 ....; Should probably use PCE Code Map for this when it is fixed
 ....N IMMCPG,CVXCODE,IMMNAME,IMMCVX,ADMDATE
 ....S IMMCPT="" S CVXCODE="" S IMMNAME="" S IMMCVX="" S ADMDATE=""
 ....S IMMNAME=$G(G("results","immunizations",I,"immunization","name@value")) 
 ....W "The IMMNAME for this immunization without a proper name is ",IMMNAME,!
 ....S IMMCPT=$O(CPTIMAP("B",IMMNAME,""))
 ....W "The CPT code for IMMNAME is ",IMMCPT,!
 ....S CVXCODE=CPTMAP(IMMCPT)
 ....I CVXCODE'="" D  Q
 .....; If there is still no CVX code found, record and error and quit
 .....S ZTXT=$G(G("results","immunizations",I,"immunization","id@value"))
 .....D OUTLOG("ERROR-Missing CVX or Incorrect Name for IEN="_ZTXT)
 ....E  D
 .....; Else, if you have found a CVX code, then write the XML to the array and QUIT
 .....S C0IPOA("CVXCode")=CVXCODE
 .....S C0IPOA("CVXName")=CVXMAP(CVXCODE)
 .....S C0IPOA("ORIGName")=$G(G("results","immunizations",I,"immunization","name@value"))
 .....S ADMDATE=$G(G("results","immunizations",I,"immunization","administered@value"))
 .....S C0IPOA("admDate")=$$FMDTOUTC^C0IUTIL(ADMDATE)
 .....D GETNMAP^C0IUTIL("WRK","TPAYOUTD^C0ITEST","C0IPOA")
 Q
 ;
OUTLOG(ZTXT) ; add text to the log
 I '$D(C0LOGLOC) S C0LOGLOC=$NA(^TMP("C0I",$J,"LOG"))
 N LN S LN=$O(@C0LOGLOC@(""),-1)+1
 S @C0LOGLOC@(LN)=ZTXT
 Q
 ;
TPAYOUTE
 ;;;fixed end portion of payload
 ;;</substanceAdministrationEvents>
 ;;</clinicalStatements>
 ;;</patient>
 ;;</vmrInput>
 ;;</ns4:cdsInput>
 Q
 ;
CPTMAP
 S CPTMAP(90281)=86
 S CPTMAP(90283)=87
 S CPTMAP(90287)=27
 S CPTMAP(90291)=29
 S CPTMAP(90296)=12
 S CPTMAP(90371)=30
 S CPTMAP(90375)=34
 S CPTMAP(90376)=34
 S CPTMAP(90378)=93
 S CPTMAP(90379)=71
 S CPTMAP(90389)=13
 S CPTMAP(90393)=79
 S CPTMAP(90396)=36
 S CPTMAP(90470)=128
 S CPTMAP(90476)=54
 S CPTMAP(90477)=55
 S CPTMAP(90581)=24
 S CPTMAP(90585)=19
 S CPTMAP(90632)=52
 S CPTMAP(90633)=83
 S CPTMAP(90634)=84
 S CPTMAP(90636)=104
 S CPTMAP(90644)=148
 S CPTMAP(90645)=47
 S CPTMAP(90646)=46
 S CPTMAP(90647)=49
 S CPTMAP(90648)=48
 S CPTMAP(90649)=62
 S CPTMAP(90650)=118
 S CPTMAP(90654)=144
 S CPTMAP(90655)=140
 S CPTMAP(90656)=140
 S CPTMAP(90657)=141
 S CPTMAP(90658)=141
 S CPTMAP(90659)=16
 S CPTMAP(90660)=111
 S CPTMAP(90661)=153
 S CPTMAP(90662)=135
 S CPTMAP(90663)=128
 S CPTMAP(90664)=125
 S CPTMAP(90665)=66
 S CPTMAP(90666)=126
 S CPTMAP(90668)=127
 S CPTMAP(90669)=100
 S CPTMAP(90670)=133
 S CPTMAP(90672)=149
 S CPTMAP(90673)=155
 S CPTMAP(90675)=18
 S CPTMAP(90676)=40
 S CPTMAP(90680)=116
 S CPTMAP(90681)=119
 S CPTMAP(90685)=150
 S CPTMAP(90686)=150
 S CPTMAP(90688)=158
 S CPTMAP(90690)=25
 S CPTMAP(90691)=101
 S CPTMAP(90692)=41
 S CPTMAP(90693)=53
 S CPTMAP(90696)=130
 S CPTMAP(90698)=120
 S CPTMAP(90700)=20
 S CPTMAP(90700)=106
 S CPTMAP(90701)=01
 S CPTMAP(90702)=28
 S CPTMAP(90703)=35
 S CPTMAP(90704)=07
 S CPTMAP(90705)=05
 S CPTMAP(90706)=06
 S CPTMAP(90707)=03
 S CPTMAP(90708)=04
 S CPTMAP(90710)=94
 S CPTMAP(90712)=02
 S CPTMAP(90713)=10
 S CPTMAP(90714)=113
 S CPTMAP(90714)=91
 S CPTMAP(90715)=115
 S CPTMAP(90716)=21
 S CPTMAP(90717)=37
 S CPTMAP(90718)=09
 S CPTMAP(90720)=22
 S CPTMAP(90721)=50
 S CPTMAP(90723)=110
 S CPTMAP(90724)=88
 S CPTMAP(90725)=26
 S CPTMAP(90726)=90
 S CPTMAP(90727)=23
 S CPTMAP(90728)=19
 S CPTMAP(90730)=85
 S CPTMAP(90731)=45
 S CPTMAP(90732)=33
 S CPTMAP(90733)=32
 S CPTMAP(90734)=136
 S CPTMAP(90734)=114
 S CPTMAP(90735)=39
 S CPTMAP(90736)=121
 S CPTMAP(90737)=17
 S CPTMAP(90738)=134
 S CPTMAP(90740)=44
 S CPTMAP(90741)=14
 S CPTMAP(90743)=43
 S CPTMAP(90744)=08
 S CPTMAP(90745)=42
 S CPTMAP(90746)=43
 S CPTMAP(90747)=44
 S CPTMAP(90748)=51  
 Q
CVXMAP
 S CVXMAP(86)="IG"
 S CVXMAP(87)="IGIV"
 S CVXMAP(27)="botulinum antitoxin"
 S CVXMAP(29)="CMVIG"
 S CVXMAP(12)="diphtheria antitoxin"
 S CVXMAP(30)="HBIG"
 S CVXMAP(34)="RIG"
 S CVXMAP(34)="RIG"
 S CVXMAP(93)="RSV-MAb"
 S CVXMAP(71)="RSV-IGIV"
 S CVXMAP(13)="TIG"
 S CVXMAP(79)="vaccinia immune globulin"
 S CVXMAP(36)="VZIG"
 S CVXMAP(128)="Novel Influenza-H1N1-09, all formulations"
 S CVXMAP(54)="adenovirus, type 4"
 S CVXMAP(55)="adenovirus, type 7"
 S CVXMAP(24)="anthrax"
 S CVXMAP(19)="BCG"
 S CVXMAP(52)="Hep A, adult"
 S CVXMAP(83)="Hep A, ped/adol, 2 dose"
 S CVXMAP(84)="Hep A, ped/adol, 3 dose"
 S CVXMAP(104)="Hep A-Hep B"
 S CVXMAP(148)="Meningococcal C/Y-HIB PRP"
 S CVXMAP(47)="Hib (HbOC)"
 S CVXMAP(46)="Hib (PRP-D)"
 S CVXMAP(49)="Hib (PRP-OMP)"
 S CVXMAP(48)="Hib (PRP-T)"
 S CVXMAP(62)="HPV, quadrivalent"
 S CVXMAP(118)="HPV, bivalent"
 S CVXMAP(144)="influenza, seasonal, intradermal, preservative free"
 S CVXMAP(140)="Influenza, seasonal, injectable, preservative free"
 S CVXMAP(140)="Influenza, seasonal, injectable, preservative free"
 S CVXMAP(141)="Influenza, seasonal, injectable"
 S CVXMAP(141)="Influenza, seasonal, injectable"
 S CVXMAP(16)="influenza, whole"
 S CVXMAP(111)="influenza, live, intranasal"
 S CVXMAP(153)="Influenza, injectable, MDCK, preservative free"
 S CVXMAP(135)="Influenza, high dose seasonal"
 S CVXMAP(128)="Novel Influenza-H1N1-09, all formulations"
 S CVXMAP(125)="Novel Influenza-H1N1-09, nasal"
 S CVXMAP(66)="Lyme disease"
 S CVXMAP(126)="Novel influenza-H1N1-09, preservative-free"
 S CVXMAP(127)="Novel influenza-H1N1-09"
 S CVXMAP(100)="pneumococcal conjugate PCV 7"
 S CVXMAP(133)="Pneumococcal conjugate PCV 13"
 S CVXMAP(149)="influenza, live, intranasal, quadrivalent"
 S CVXMAP(155)="influenza, recombinant, injectable, preservative free"
 S CVXMAP(18)="rabies, intramuscular injection"
 S CVXMAP(40)="rabies, intradermal injection"
 S CVXMAP(116)="rotavirus, pentavalent"
 S CVXMAP(119)="rotavirus, monovalent"
 S CVXMAP(150)="influenza, injectable, quadrivalent, preservative free"
 S CVXMAP(150)="influenza, injectable, quadrivalent, preservative free"
 S CVXMAP(158)="influenza, injectable, quadrivalent"
 S CVXMAP(25)="typhoid, oral"
 S CVXMAP(101)="typhoid, ViCPs"
 S CVXMAP(41)="typhoid, parenteral"
 S CVXMAP(53)="typhoid, parenteral, AKD (U.S. military)"
 S CVXMAP(130)="DTaP-IPV"
 S CVXMAP(120)="DTaP-Hib-IPV"
 S CVXMAP(20)="DTaP"
 S CVXMAP(106)="DTaP, 5 pertussis antigens"
 S CVXMAP(01)="DTP"
 S CVXMAP(28)="DT (pediatric)"
 S CVXMAP(35)="tetanus toxoid, adsorbed"
 S CVXMAP(07)="mumps"
 S CVXMAP(05)="measles"
 S CVXMAP(06)="rubella"
 S CVXMAP(03)="MMR"
 S CVXMAP(04)="M/R"
 S CVXMAP(94)="MMRV"
 S CVXMAP(02)="OPV"
 S CVXMAP(10)="IPV"
 S CVXMAP(113)="Td (adult) preservative free"
 S CVXMAP(91)="typhoid, unspecified formulation"
 S CVXMAP(115)="Tdap"
 S CVXMAP(21)="varicella"
 S CVXMAP(37)="yellow fever"
 S CVXMAP(09)="Td (adult), adsorbed"
 S CVXMAP(22)="DTP-Hib"
 S CVXMAP(50)="DTaP-Hib"
 S CVXMAP(110)="DTaP-Hep B-IPV"
 S CVXMAP(88)="influenza, unspecified formulation"
 S CVXMAP(26)="cholera"
 S CVXMAP(90)="rabies, unspecified formulation"
 S CVXMAP(23)="plague"
 S CVXMAP(19)="BCG"
 S CVXMAP(85)="Hep A, unspecified formulation"
 S CVXMAP(45)="Hep B, unspecified formulation"
 S CVXMAP(33)="pneumococcal polysaccharide PPV23"
 S CVXMAP(32)="meningococcal MPSV4"
 S CVXMAP(136)="Meningococcal MCV4O"
 S CVXMAP(114)="meningococcal MCV4P"
 S CVXMAP(39)="Japanese encephalitis SC"
 S CVXMAP(121)="zoster"
 S CVXMAP(17)="Hib, unspecified formulation"
 S CVXMAP(134)="Japanese Encephalitis IM"
 S CVXMAP(44)="Hep B, dialysis"
 S CVXMAP(14)="IG, unspecified formulation"
 S CVXMAP(43)="Hep B, adult"
 S CVXMAP(08)="Hep B, adolescent or pediatric"
 S CVXMAP(42)="Hep B, adolescent/high risk infant"
 S CVXMAP(43)="Hep B, adult"
 S CVXMAP(44)="Hep B, dialysis"
 S CVXMAP(51)="Hib-Hep B"
 S CVXMAP("B","IG",86)=""
 S CVXMAP("B","IGIV",87)=""
 S CVXMAP("B","botulinum antitoxin",27)=""
 S CVXMAP("B","CMVIG",29)=""
 S CVXMAP("B","diphtheria antitoxin",12)=""
 S CVXMAP("B","HBIG",30)=""
 S CVXMAP("B","RIG",34)=""
 S CVXMAP("B","RIG",34)=""
 S CVXMAP("B","RSV-MAb",93)=""
 S CVXMAP("B","RSV-IGIV",71)=""
 S CVXMAP("B","TIG",13)=""
 S CVXMAP("B","vaccinia immune globulin",79)=""
 S CVXMAP("B","VZIG",36)=""
 S CVXMAP("B","Novel Influenza-H1N1-09, all formulations",128)=""
 S CVXMAP("B","adenovirus, type 4",54)=""
 S CVXMAP("B","adenovirus, type 7",55)=""
 S CVXMAP("B","anthrax",24)=""
 S CVXMAP("B","BCG",19)=""
 S CVXMAP("B","Hep A, adult",52)=""
 S CVXMAP("B","Hep A, ped/adol, 2 dose",83)=""
 S CVXMAP("B","Hep A, ped/adol, 3 dose",84)=""
 S CVXMAP("B","Hep A-Hep B",104)=""
 S CVXMAP("B","Meningococcal C/Y-HIB PRP",148)=""
 S CVXMAP("B","Hib (HbOC)",47)=""
 S CVXMAP("B","Hib (PRP-D)",46)=""
 S CVXMAP("B","Hib (PRP-OMP)",49)=""
 S CVXMAP("B","Hib (PRP-T)",48)=""
 S CVXMAP("B","HPV, quadrivalent",62)=""
 S CVXMAP("B","HPV, bivalent",118)=""
 S CVXMAP("B","influenza, seasonal, intradermal, preservative free",144)=""
 S CVXMAP("B","Influenza, seasonal, injectable, preservative free",140)=""
 S CVXMAP("B","Influenza, seasonal, injectable, preservative free",140)=""
 S CVXMAP("B","Influenza, seasonal, injectable",141)=""
 S CVXMAP("B","Influenza, seasonal, injectable",141)=""
 S CVXMAP("B","influenza, whole",16)=""
 S CVXMAP("B","influenza, live, intranasal",111)=""
 S CVXMAP("B","Influenza, injectable, MDCK, preservative free",153)=""
 S CVXMAP("B","Influenza, high dose seasonal",135)=""
 S CVXMAP("B","Novel Influenza-H1N1-09, all formulations",128)=""
 S CVXMAP("B","Novel Influenza-H1N1-09, nasal",125)=""
 S CVXMAP("B","Lyme disease",66)=""
 S CVXMAP("B","Novel influenza-H1N1-09, preservative-free",126)=""
 S CVXMAP("B","Novel influenza-H1N1-09",127)=""
 S CVXMAP("B","pneumococcal conjugate PCV 7",100)=""
 S CVXMAP("B","Pneumococcal conjugate PCV 13",133)=""
 S CVXMAP("B","influenza, live, intranasal, quadrivalent",149)=""
 S CVXMAP("B","influenza, recombinant, injectable, preservative free",155)=""
 S CVXMAP("B","rabies, intramuscular injection",18)=""
 S CVXMAP("B","rabies, intradermal injection",40)=""
 S CVXMAP("B","rotavirus, pentavalent",116)=""
 S CVXMAP("B","rotavirus, monovalent",119)=""
 S CVXMAP("B","influenza, injectable, quadrivalent, preservative free",150)=""
 S CVXMAP("B","influenza, injectable, quadrivalent, preservative free",150)=""
 S CVXMAP("B","influenza, injectable, quadrivalent",158)=""
 S CVXMAP("B","typhoid, oral",25)=""
 S CVXMAP("B","typhoid, ViCPs",101)=""
 S CVXMAP("B","typhoid, parenteral",41)=""
 S CVXMAP("B","typhoid, parenteral, AKD (U.S. military)",53)=""
 S CVXMAP("B","DTaP-IPV",130)=""
 S CVXMAP("B","DTaP-Hib-IPV",120)=""
 S CVXMAP("B","DTaP",20)=""
 S CVXMAP("B","DTaP, 5 pertussis antigens",106)=""
 S CVXMAP("B","DTP",01)=""
 S CVXMAP("B","DT (pediatric)",28)=""
 S CVXMAP("B","tetanus toxoid, adsorbed",35)=""
 S CVXMAP("B","mumps",07)=""
 S CVXMAP("B","measles",05)=""
 S CVXMAP("B","rubella",06)=""
 S CVXMAP("B","MMR",03)=""
 S CVXMAP("B","M/R",04)=""
 S CVXMAP("B","MMRV",94)=""
 S CVXMAP("B","OPV",02)=""
 S CVXMAP("B","IPV",10)=""
 S CVXMAP("B","Td (adult) preservative free",113)=""
 S CVXMAP("B","typhoid, unspecified formulation",91)=""
 S CVXMAP("B","Tdap",115)=""
 S CVXMAP("B","varicella",21)=""
 S CVXMAP("B","yellow fever",37)=""
 S CVXMAP("B","Td (adult), adsorbed",09)=""
 S CVXMAP("B","DTP-Hib",22)=""
 S CVXMAP("B","DTaP-Hib",50)=""
 S CVXMAP("B","DTaP-Hep B-IPV",110)=""
 S CVXMAP("B","influenza, unspecified formulation",88)=""
 S CVXMAP("B","cholera",26)=""
 S CVXMAP("B","rabies, unspecified formulation",90)=""
 S CVXMAP("B","plague",23)=""
 S CVXMAP("B","BCG",19)=""
 S CVXMAP("B","Hep A, unspecified formulation",85)=""
 S CVXMAP("B","Hep B, unspecified formulation",45)=""
 S CVXMAP("B","pneumococcal polysaccharide PPV23",33)=""
 S CVXMAP("B","meningococcal MPSV4",32)=""
 S CVXMAP("B","Meningococcal MCV4O",136)=""
 S CVXMAP("B","meningococcal MCV4P",114)=""
 S CVXMAP("B","Japanese encephalitis SC",39)=""
 S CVXMAP("B","zoster",121)=""
 S CVXMAP("B","Hib, unspecified formulation",17)=""
 S CVXMAP("B","Japanese Encephalitis IM",134)=""
 S CVXMAP("B","Hep B, dialysis",44)=""
 S CVXMAP("B","IG, unspecified formulation",14)=""
 S CVXMAP("B","Hep B, adult",43)=""
 S CVXMAP("B","Hep B, adolescent or pediatric",08)=""
 S CVXMAP("B","Hep B, adolescent/high risk infant",42)=""
 S CVXMAP("B","Hep B, adult",43)=""
 S CVXMAP("B","Hep B, dialysis",44)=""
 S CVXMAP("B","Hib-Hep B",51)=""
 Q
 ;
CPTIMAP
 S CPTIMAP(90724)="INFLUENZA"
 S CPTIMAP(90744)="HEPB PED/ADOL-1"
 S CPTIMAP(90744)="HEPB PED/ADOL-2"
 S CPTIMAP(90744)="HEPB PED/ADOL-3"
 S CPTIMAP(90744)="HEPB PED/ADOL-4"
 S CPTIMAP(90700)="DIP.PERT.TET. (DPT) PED 1"
 S CPTIMAP(90700)="DIP.PERT.TET. (DPT) PED 2"
 S CPTIMAP(90700)="DIP.PERT.TET. (DPT) PED 3"
 S CPTIMAP(90700)="DIP.PERT.TET. (DPT) PED 4"
 S CPTIMAP(90700)="DIP.PERT.TET. (DPT) PED 5"
 S CPTIMAP(90645)="HIB PED 1"
 S CPTIMAP(90645)="HIB PED 2"
 S CPTIMAP(90645)="HIB PED 3"
 S CPTIMAP(90645)="HIB PED 4"
 S CPTIMAP(90707)="MEASLES,MUMPS,RUBELLA PED #1"
 S CPTIMAP(90707)="MEASLES,MUMPS,RUBELLA PED #2"
 S CPTIMAP(90713)="POLIOVIRUS PED #1"
 S CPTIMAP(90713)="POLIOVIRUS PED #2"
 S CPTIMAP(90713)="POLIOVIRUS PED #3"
 S CPTIMAP(90713)="POLIOVIRUS PED #4"
 S CPTIMAP(90670)="PNEUMOCOCCAL PED 1"
 S CPTIMAP(90670)="PNEUMOCOCCAL PED 2"
 S CPTIMAP(90670)="PNEUMOCOCCAL PED 3"
 S CPTIMAP(90670)="PNEUMOCOCCAL PED 4"
 S CPTIMAP(90701)="DIP,PERT,TET (DPT)"
 S CPTIMAP(90700)="DIP,PERT,TET (DPT) PED 1"
 S CPTIMAP(90700)="DIP,PERT,TET (DPT) PED 2"
 S CPTIMAP(90700)="DIP,PERT,TET (DPT) PED 3"
 S CPTIMAP(90700)="DIP,PERT,TET (DPT) PED 4"
 S CPTIMAP(90700)="DIP,PERT,TET (DPT) PED 5"
 S CPTIMAP(90732)="PNEUMOVAX"
 S CPTIMAP(90715)="TETANUS DIPTHERIA AND PERTUSSIS"
 S CPTIMAP(90634)="HEP B PED/ADOL 3 DOSE"
 S CPTIMAP(90633)="HEP A2 PEDS"
 S CPTIMAP(90633)="HEP A1 PEDS"
 S CPTIMAP(90680)="RV 1 PEDS"
 S CPTIMAP(90680)="RV 2 PEDS"
 S CPTIMAP(90680)="RV 3 PEDS"
 S CPTIMAP(90647)="HiB1"
 S CPTIMAP(90647)="HiB2"
 S CPTIMAP(90647)="HiB3"
 S CPTIMAP(90670)="PCV1 PEDS"
 S CPTIMAP(90670)="PCV2 PEDS"
 S CPTIMAP(90670)="PCV3 PEDS"
 S CPTIMAP(90670)="PCV4 PEDS"
 S CPTIMAP(90670)="PCV5 PEDS"
 S CPTIMAP(90716)="VZV1 INFANT"
 S CPTIMAP(90716)="VZV2 INFANT"
 S CPTIMAP(90745)="HEP B1 INFANT"
 S CPTIMAP(90745)="HEP B2 INFANT"
 S CPTIMAP(90745)="HEP B3 INFANT"
 S CPTIMAP(90745)="HEP B4 INFANT"
 S CPTIMAP(90707)="MMR1"
 S CPTIMAP(90713)="IPV1"
 S CPTIMAP(90713)="IPV2"
 S CPTIMAP(90713)="IPV3"
 S CPTIMAP(90713)="IPV4"
 S CPTIMAP(90700)="DTaP1"
 S CPTIMAP(90700)="DTaP2"
 S CPTIMAP(90700)="DTaP3"
 S CPTIMAP(90700)="DTaP4"
 S CPTIMAP(90700)="DTaP5"
 S CPTIMAP(90634)="HEP A3 PEDS"
 S CPTIMAP("B","INFLUENZA",90724)=""
 S CPTIMAP("B","HEPB,PED/ADOL-1",90744)=""
 S CPTIMAP("B","HEPB PED/ADOL-2",90744)=""
 S CPTIMAP("B","HEPB PED/ADOL-3",90744)=""
 S CPTIMAP("B","HEPB PED/ADOL-4",90744)=""
 S CPTIMAP("B","DIP.,PERT.,TET. (DPT) PED 1",90700)=""
 S CPTIMAP("B","DIP.,PERT.,TET. (DPT) PED 2",90700)=""
 S CPTIMAP("B","DIP.,PERT.,TET. (DPT) PED 3",90700)=""
 S CPTIMAP("B","DIP.,PERT.,TET. (DPT) PED 4",90700)=""
 S CPTIMAP("B","DIP.,PERT.,TET. (DPT) PED 5",90700)=""
 S CPTIMAP("B","HIB PED 1",90645)=""
 S CPTIMAP("B","HIB PED 2",90645)=""
 S CPTIMAP("B","HIB PED 3",90645)=""
 S CPTIMAP("B","HIB PED 4",90645)=""
 S CPTIMAP("B","MEASLES,MUMPS,RUBELLA PED #1",90707)=""
 S CPTIMAP("B","MEASLES,MUMPS,RUBELLA PED #2",90707)=""
 S CPTIMAP("B","POLIOVIRUS PED #1",90713)=""
 S CPTIMAP("B","POLIOVIRUS PED #2",90713)=""
 S CPTIMAP("B","POLIOVIRUS PED #3",90713)=""
 S CPTIMAP("B","POLIOVIRUS PED #4",90713)=""
 S CPTIMAP("B","PNEUMOCOCCAL PED 1",90670)=""
 S CPTIMAP("B","PNEUMOCOCCAL PED 2",90670)=""
 S CPTIMAP("B","PNEUMOCOCCAL PED 3",90670)=""
 S CPTIMAP("B","PNEUMOCOCCAL PED 4",90670)=""
 S CPTIMAP("B","DIP,PERT,TET (DPT)",90701)=""
 S CPTIMAP("B","DIP,PERT,TET (DPT) PED 1",90700)=""
 S CPTIMAP("B","DIP,PERT,TET (DPT) PED 2",90700)=""
 S CPTIMAP("B","DIP,PERT,TET (DPT) PED 3",90700)=""
 S CPTIMAP("B","DIP,PERT,TET (DPT) PED 4",90700)=""
 S CPTIMAP("B","DIP,PERT,TET (DPT) PED 5",90700)=""
 S CPTIMAP("B","PNEUMOVAX",90732)=""
 S CPTIMAP("B","TETANUS, DIPTHERIA AND PERTUSSIS",90715)=""
 S CPTIMAP("B","HEP B PED/ADOL 3 DOSE",90634)=""
 S CPTIMAP("B","HEP A2 PEDS",90633)=""
 S CPTIMAP("B","HEP A1 PEDS",90633)=""
 S CPTIMAP("B","RV 1 PEDS",90680)=""
 S CPTIMAP("B","RV 2 PEDS",90680)=""
 S CPTIMAP("B","RV 3 PEDS",90680)=""
 S CPTIMAP("B","HiB1",90647)=""
 S CPTIMAP("B","HiB2",90647)=""
 S CPTIMAP("B","HiB3",90647)=""
 S CPTIMAP("B","PCV1 PEDS",90670)=""
 S CPTIMAP("B","PCV2 PEDS",90670)=""
 S CPTIMAP("B","PCV3 PEDS",90670)=""
 S CPTIMAP("B","PCV4 PEDS",90670)=""
 S CPTIMAP("B","PCV5 PEDS",90670)=""
 S CPTIMAP("B","VZV1 INFANT",90716)=""
 S CPTIMAP("B","VZV2 INFANT",90716)=""
 S CPTIMAP("B","HEP B1 INFANT",90745)=""
 S CPTIMAP("B","HEP B2 INFANT",90745)=""
 S CPTIMAP("B","HEP B3 INFANT",90745)=""
 S CPTIMAP("B","HEP B4 INFANT",90745)=""
 S CPTIMAP("B","MMR1",90707)=""
 S CPTIMAP("B","IPV1",90713)=""
 S CPTIMAP("B","IPV2",90713)=""
 S CPTIMAP("B","IPV3",90713)=""
 S CPTIMAP("B","IPV4",90713)=""
 S CPTIMAP("B","DTaP1",90700)=""
 S CPTIMAP("B","DTaP2",90700)=""
 S CPTIMAP("B","DTaP3",90700)=""
 S CPTIMAP("B","DTaP4",90700)=""
 S CPTIMAP("B","DTaP5",90700)=""
 S CPTIMAP("B","HEP A3 PEDS",90634)=""
 Q
 ;

C0IUTIL
C0IUTIL ; GPL/NEA - Immunizations Forecasting Utilities ;05/03/14  17:05
 ;;0.1;Immunizations Forecasting;nopatch;noreleasedate;
 ;
 ; License Apache 2
 ; 
 Q
 ;
GETNMAP(OUTXML,INXML,IARY) ; Retrieves XML stored in Mumps routines and maps
 ; them using IARY, passed by name. Maps use @@var@@ protocol
 ; with @IARY@("var")=value for the map values
 ; OUTXML is passed by name and will hold the result
 ; INXML is the name of the storage place ie "HEADER^JJOHPPC2"
 N GTAG,GRT,GI
 S GTAG=$P(INXML,"^",1)
 S GRT=$P(INXML,"^",2)
 ; first get all of the lines of the XML
 N TXML ; temp var for xml
 S GX=1
 S GN=1
 F  S GI=GTAG_"+"_GX_"^"_GRT  Q:$T(@GI)'[";;"  D  ;
 . S GX=GX+1
 . N LN S LN=$P($T(@GI),";;",2)
 . I $E(LN,1)=";" Q  ; skip over comments
 . S TXML(GN)=LN
 . I $G(CCDADEBUG) W !,GN," ",TXML(GN)
 . S GN=GN+1
 ; next call MAP to resolve mappings and place result directly in OUTXML
 ; if OUTXML has contents already, add the result to the end and update the count (0)
 I $D(@OUTXML@(1)) D  ;
 . N TXML2
 . D MAP^MXMLTMPL("TXML",IARY,"TXML2")
 . S GI=0
 . F  S GI=$O(TXML2(GI)) Q:+GI=0  S @OUTXML@($O(@OUTXML@(""),-1)+1)=TXML2(GI)
 . S @OUTXML@(0)=$O(@OUTXML@(""),-1)
 E  D MAP^MXMLTMPL("TXML",IARY,OUTXML)
 Q
 ;
GET(OUTXML,INXML) ; GET ONLY Retrieves XML stored in Mumps routines 
 ; OUTXML is passed by name and will hold the result
 ; INXML is the name of the storage place ie "HEADER^JJOHPPC2"
 N GTAG,GRT,GI
 S GTAG=$P(INXML,"^",1)
 S GRT=$P(INXML,"^",2)
 ; get all of the lines of the XML
 S GX=1
 S GN=1
 F  S GI=GTAG_"+"_GX_"^"_GRT  Q:$T(@GI)'[";;"  D  ;
 . S GX=GX+1
 . N LN S LN=$P($T(@GI),";;",2)
 . I $E(LN,1)=";" Q  ; skip over comments
 . S @OUTXML@($O(@OUTXML@(""),-1)+1)=LN
 . S @OUTXML@(0)=$O(@OUTXML@(""),-1)
 . I $G(CCDADEBUG) W !,GN," ",@OUTXML@(GN)
 . S GN=GN+1
 Q
 ;
TEST ;
 N GV S GV("hl7OutTime")=$$FMDTOUTC^C0IUTIL(DT)
 K G
 D GETNMAP("G","TENVOUT^C0ITEST","GV")
 ZWR G
 Q
 ;
OUTLOG(ZTXT) ; add text to the log
 I '$D(C0LOGLOC) S C0LOGLOC=$NA(^TMP("C0I",$J,"LOG"))
 N LN S LN=$O(@C0LOGLOC@(""),-1)+1
 S @C0LOGLOC@(LN)=ZTXT
 Q
 ;
LOGARY(ARY) ; LOG AN ARRAY
 N II S II=""
 F  S II=$O(@ARY@(II)) Q:II=""  D  ;
 . D OUTLOG(ARY_" "_II_" = "_$G(@ARY@(II)))
 Q
 ;
UUID()   ; thanks to Wally for this.
 N R,I,J,N 
 S N="",R="" F  S N=N_$R(100000) Q:$L(N)>64 
 F I=1:2:64 S R=R_$E("0123456789abcdef",($E(N,I,I+1)#16+1)) 
 Q $E(R,1,8)_"-"_$E(R,9,12)_"-4"_$E(R,14,16)_"-"_$E("89ab",$E(N,17)#4+1)_$E(R,18,20)_"-"_$E(R,21,32)
 ;
 ; the following was borrowed from the C0CUTIL and adapted
 ;
FMDTOCDA(DATE,FORMAT) ; Convert Fileman Date to UTC Date Format; PUBLIC; Extrinsic
 ; FORMAT is Format of Date. Can be either D (Day) or DT (Date and Time)
 ; If not passed, or passed incorrectly, it's assumed that it is D.
 ; FM Date format is "YYYMMDD.HHMMSS" HHMMSS may not be supplied.
 ; UTC date is formatted as follows: YYYY-MM-DDThh:mm:ss_offsetfromUTC
 ; UTC, Year, Month, Day, Hours, Minutes, Seconds, Time offset (obtained from Mailman Site Parameters)
 N UTC,Y,M,D,H,MM,S,OFF
 S Y=1700+$E(DATE,1,3)
 S M=$E(DATE,4,5)
 S D=$E(DATE,6,7)
 S H=$E(DATE,9,10)
 I $L(H)=1 S H="0"_H
 S MM=$E(DATE,11,12)
 I $L(MM)=1 S MM="0"_MM
 S S=$E(DATE,13,14)
 I $L(S)=1 S S="0"_S
 S OFF=$$TZ^XLFDT ; See Kernel Manual for documentation.
 S OFFS=$E(OFF,1,1)
 S OFF0=$TR(OFF,"+-")
 S OFF1=$E(OFF0+10000,2,3)
 S OFF2=$E(OFF0+10000,4,5)
 ;S OFF=OFFS_OFF1_":"_OFF2
 S OFF=OFFS_OFF1_OFF2
 ;S OFF2=$E(OFF,1,2) ;
 ;S OFF2=$E(100+OFF2,2,3) ; GPL 11/08 CHANGED TO -05:00 FORMAT
 ;S OFF3=$E(OFF,3,4) ;MINUTES
 ;S OFF=$S(OFF2="":"00",0:"00",1:OFF2)_"."_$S(OFF3="":"00",1:OFF3)
 ; If H, MM and S are empty, it means that the FM date didn't supply the time.
 ; In this case, set H, MM and S to "00"
 ; S:('$L(H)&'$L(MM)&'$L(S)) (H,MM,S)="00" ; IF ONLY SOME ARE MISSING?
 S:'$L(H) H="00"
 S:'$L(MM) MM="00"
 S:'$L(S) S="00"
 S UTC=Y_M_D_H_MM_$S(S="":"00",1:S)_OFF ; Skip's code to fix hanging colon if no seconds
 ;S UTC=Y_"-"_M_"-"_D_"T"_H_":"_MM_$S(S="":":00",1:":"_S)_OFF ; Skip's code to fix hanging colon if no seconds
 I $E(UTC,9,14)="000000" S UTC=$E(UTC,1,8) ; admit our precision gpl 9/2013
 S UTC=$E(UTC,1,8) ; admit our precision gpl 6/2014 only date no time
 I $L($G(FORMAT)),FORMAT="DT" Q UTC ; Date with time.
 E  Q $P(UTC,"T")
 ;
FMDTOUT2(DATE,FORMAT) ; Convert Fileman Date to UTC Date Format; PUBLIC; Extrinsic
 ; FORMAT is Format of Date. Can be either D (Day) or DT (Date and Time)
 ; If not passed, or passed incorrectly, it's assumed that it is D.
 ; FM Date format is "YYYMMDD.HHMMSS" HHMMSS may not be supplied.
 ; UTC date is formatted as follows: YYYY-MM-DDThh:mm:ss_offsetfromUTC
 ; UTC, Year, Month, Day, Hours, Minutes, Seconds, Time offset (obtained from Mailman Site Parameters)
 N UTC,Y,M,D,H,MM,S,OFF
 S Y=1700+$E(DATE,1,3)
 S M=$E(DATE,4,5)
 S D=$E(DATE,6,7)
 S H=$E(DATE,9,10)
 I $L(H)=1 S H="0"_H
 S MM=$E(DATE,11,12)
 I $L(MM)=1 S MM="0"_MM
 S S=$E(DATE,13,14)
 I $L(S)=1 S S="0"_S
 S OFF=$$TZ^XLFDT ; See Kernel Manual for documentation.
 S OFFS=$E(OFF,1,1)
 S OFF0=$TR(OFF,"+-")
 S OFF1=$E(OFF0+10000,2,3)
 S OFF2=$E(OFF0+10000,4,5)
 ;S OFF=OFFS_OFF1_":"_OFF2
 S OFF=OFFS_OFF1_OFF2
 ;S OFF2=$E(OFF,1,2) ;
 ;S OFF2=$E(100+OFF2,2,3) ; GPL 11/08 CHANGED TO -05:00 FORMAT
 ;S OFF3=$E(OFF,3,4) ;MINUTES
 ;S OFF=$S(OFF2="":"00",0:"00",1:OFF2)_"."_$S(OFF3="":"00",1:OFF3)
 ; If H, MM and S are empty, it means that the FM date didn't supply the time.
 ; In this case, set H, MM and S to "00"
 ; S:('$L(H)&'$L(MM)&'$L(S)) (H,MM,S)="00" ; IF ONLY SOME ARE MISSING?
 S:'$L(H) H="00"
 S:'$L(MM) MM="00"
 S:'$L(S) S="00"
 S UTC=Y_M_D_H_MM_$S(S="":"00",1:S)_OFF ; Skip's code to fix hanging colon if no seconds
 ;S UTC=Y_"-"_M_"-"_D_"T"_H_":"_MM_$S(S="":":00",1:":"_S)_OFF ; Skip's code to fix hanging colon if no seconds
 I $E(UTC,9,14)="000000" S UTC=$E(UTC,1,8) ; admit our precision gpl 9/2013
 I $L($G(FORMAT)),FORMAT="DT" Q UTC ; Date with time.
 E  Q $P(UTC,"T")
 ;
FMDTOUTC(DATE,FORMAT) ; Convert Fileman Date to UTC Date Format; PUBLIC; Extrinsic
 ; FORMAT is Format of Date. Can be either D (Day) or DT (Date and Time)
 ; If not passed, or passed incorrectly, it's assumed that it is D.
 ; FM Date format is "YYYMMDD.HHMMSS" HHMMSS may not be supplied.
 ; UTC date is formatted as follows: YYYY-MM-DDThh:mm:ss_offsetfromUTC
 ; UTC, Year, Month, Day, Hours, Minutes, Seconds, Time offset (obtained from Mailman Site Parameters)
 N UTC,Y,M,D,H,MM,S,OFF
 S Y=1700+$E(DATE,1,3)
 S M=$E(DATE,4,5)
 S D=$E(DATE,6,7)
 S H=$E(DATE,9,10)
 I $L(H)=1 S H="0"_H
 S MM=$E(DATE,11,12)
 I $L(MM)=1 S MM="0"_MM
 S S=$E(DATE,13,14)
 I $L(S)=1 S S="0"_S
 S OFF=$$TZ^XLFDT ; See Kernel Manual for documentation.
 S OFFS=$E(OFF,1,1)
 S OFF0=$TR(OFF,"+-")
 S OFF1=$E(OFF0+10000,2,3)
 S OFF2=$E(OFF0+10000,4,5)
 S OFF=OFFS_OFF1_":"_OFF2
 ;S OFF2=$E(OFF,1,2) ;
 ;S OFF2=$E(100+OFF2,2,3) ; GPL 11/08 CHANGED TO -05:00 FORMAT
 ;S OFF3=$E(OFF,3,4) ;MINUTES
 ;S OFF=$S(OFF2="":"00",0:"00",1:OFF2)_"."_$S(OFF3="":"00",1:OFF3)
 ; If H, MM and S are empty, it means that the FM date didn't supply the time.
 ; In this case, set H, MM and S to "00"
 ; S:('$L(H)&'$L(MM)&'$L(S)) (H,MM,S)="00" ; IF ONLY SOME ARE MISSING?
 S:'$L(H) H="00"
 S:'$L(MM) MM="00"
 S:'$L(S) S="00"
 S UTC=Y_"-"_M_"-"_D_"T"_H_":"_MM_$S(S="":":00",1:":"_S)_OFF ; Skip's code to fix hanging colon if no seconds
 I $L($G(FORMAT)),FORMAT="DT" Q UTC ; Date with time.
 E  Q $P(UTC,"T")
 ;
HTMLDT2(FMDT) ; extrinsic which produces mm/dd/yyyy no time from fileman date
 N TMP,TMP2
 S TMP=$$FMDTOCDA(FMDT)
 N M,D,Y
 S M=$E(TMP,5,6)
 S D=$E(TMP,7,8)
 S Y=$E(TMP,1,4)
 I +M=0 Q Y
 I +D=0 Q M_"/"_Y
 Q M_"/"_D_"/"_Y
 ;
HTMLDT(FMDT) ; extrinsic returns date format MM/DD/YYYY for display in html
 ;
 N TMP,TMP2
 S TMP=$$FMDTOUTC(FMDT)
 S TMP2=$E(TMP,5,6)_"/"_$E(TMP,7,8)_"/"_$E(TMP,1,4)
 I $E(TMP,9,14)'="000000" D  ;
 . I $L(TMP)=8 Q  ; no time
 . S TMP2=TMP2_" "_$E(TMP,9,10)_":"
 . S TMP2=TMP2_$E(TMP,11,12)_":"
 . S TMP2=TMP2_$E(TMP,13,19)
 Q TMP2
 ;
TESTDATE ; test the above transform
 N GT
 S GT=$$FMDTOUTC($$NOW^XLFDT,"DT")
 W !,GT
 Q
 ; 
GENHTML(HOUT,HARY) ; generate an HTML table from array HARY
 ; HOUT AND HARY are passed by name
 ;
 ; format of the table:
 ;  HARY("TITLE")="Problem List"
 ;  HARY("HEADER",1)="column 1 header"
 ;  HARY("HEADER",2)="col 2 header"
 ;  HARY(1,1)="row 1 col1 value"
 ;  HARY(1,2)="row 1 col2 value"
 ;  HARY(1,2,"ID")="the ID of the element" 
 ;  etc...
 ;
 N C0I,C0J
 D ADDTO(HOUT,"<div align=""center"">")
 ;I $D(@HARY@("TITLE")) D  ;
 ;. N X
 ;. S X="<title>"_@HARY@("TITLE")_"</title>"
 ;. D ADDTO(HOUT,X)
 D ADDTO(HOUT,"<text>")
 D ADDTO(HOUT,"<table border=""1"" style=""width:80%"">")
 I $D(@HARY@("TITLE")) D  ;
 . N X
 . S X="<caption><b>"_@HARY@("TITLE")_"</b></caption>"
 . D ADDTO(HOUT,X)
 I $D(@HARY@("HEADER")) D  ;
 . D ADDTO(HOUT,"<thead>")
 . D ADDTO(HOUT,"<tr>")
 . S C0I=0
 . F  S C0I=$O(@HARY@("HEADER",C0I)) Q:+C0I=0  D  ;
 . . D ADDTO(HOUT,"<th>"_@HARY@("HEADER",C0I)_"</th>")
 . D ADDTO(HOUT,"</tr>")
 . D ADDTO(HOUT,"</thead>")
 D ADDTO(HOUT,"<tbody>")
 I $D(@HARY@(1)) D  ;
 . S C0I=0 S C0J=0
 . F  S C0I=$O(@HARY@(C0I)) Q:+C0I=0  D  ;
 . . D ADDTO(HOUT,"<tr>")
 . . F  S C0J=$O(@HARY@(C0I,C0J)) Q:+C0J=0  D  ;
 . . . N UID S UID=$G(@HARY@(C0I,C0J,"ID"))
 . . . I UID'="" D ADDTO(HOUT,"<td style=""padding:5px;"" ID="""_UID_""">"_@HARY@(C0I,C0J)_"</td>")
 . . . E  D ADDTO(HOUT,"<td style=""padding:5px;"">"_@HARY@(C0I,C0J)_"</td>")
 . . D ADDTO(HOUT,"</tr>")
 D ADDTO(HOUT,"</tbody>")
 D ADDTO(HOUT,"</table>")
 D ADDTO(HOUT,"</text>")
 D ADDTO(HOUT,"</div>")
 Q
 ;
GENVHTML(HOUT,HARY) ; generate a vertical HTML table from array HARY
 ; headers are in the first row
 ; HOUT AND HARY are passed by name
 ;
 ; format of the table:
 ;  HARY("TITLE")="Problem List"
 ;  HARY("HEADER",1)="row 1 column 1 header"
 ;  HARY("HEADER",2)="row 2 col 2 header"
 ;  HARY(1,1)="row 1 col2 value"
 ;  HARY(2,1)="row 2 col2 value"
 ;  etc...
 ;
 N C0I,C0J
 D ADDTO(HOUT,"<div align=""center"">")
 D ADDTO(HOUT,"<text>")
 D ADDTO(HOUT,"<table border=""1"" style=""width:40%"">")
 I $D(@HARY@("TITLE")) D  ;
 . N X
 . S X="<caption><b>"_@HARY@("TITLE")_"</b></caption>"
 . D ADDTO(HOUT,X)
 I $D(@HARY@("HEADER")) D  ;
 . D ADDTO(HOUT,"<tr>")
 . S C0I=0
 . F  S C0I=$O(@HARY@("HEADER",C0I)) Q:+C0I=0  D  ;
 . . D ADDTO(HOUT,"<th style=""padding:5px;"">"_@HARY@("HEADER",C0I)_"</th>")
 . . D ADDTO(HOUT,"<td style=""padding:5px;"">"_@HARY@(C0I,1)_"</td>")
 . D ADDTO(HOUT,"</tr>")
 D ADDTO(HOUT,"</table>")
 D ADDTO(HOUT,"</text>")
 D ADDTO(HOUT,"</div>")
 Q
 ;
TSTYLE1 ; table style template
 ;;<style>
 ;;table, th, td
 ;;{
 ;;border-collapse:collapse;
 ;;border:1px solid black;
 ;;}
 ;;th, td
 ;;{
 ;;padding:5px;
 ;;}
 ;;</style>
 Q
 ;
TESTHTML ;
 N HTML
 S HTML("TITLE")="Problem List"
 S HTML("HEADER",1)="column 1 header"
 S HTML("HEADER",2)="col 2 header"
 S HTML(1,1)="row 1 col1 value"
 S HTML(1,2)="row 1 col2 value"
 N GHTML
 D GENHTML("GHTML","HTML")
 ZWR GHTML
 Q
 ;
ADDTO(DEST,WHAT) ; adds string WHAT to list DEST 
 ; DEST is passed by name
 N GN
 S GN=$O(@DEST@("AAAAAA"),-1)+1
 S @DEST@(GN)=WHAT
 S @DEST@(0)=GN ; count
 Q
 ;
ORGOID() ; extrinsic which returns the Organization OID
 Q "2.16.840.1.113883.5.83" ; WORLDVISTA HL7 OID - 
 ; REPLACE WITH OID LOOKUP FROM INSTITUTION FILE
 ;
tree(where,prefix,docid,zout)   ; show a tree starting at a node in MXML. 
 ; node is passed by name
 ; 
 i $g(prefix)="" s prefix="|--" ; starting prefix
 i '$d(KBAIJOB) s KBAIJOB=$J
 n node s node=$na(^TMP("MXMLDOM",KBAIJOB,docid,where))
 n txt s txt=$$CLEAN($$ALLTXT(node))
 w:'$G(DIQUIET) !,prefix_@node_" "_txt
 d oneout(zout,prefix_@node_" "_txt)
 n zi s zi=""
 f  s zi=$o(@node@("A",zi)) q:zi=""  d  ;
 . w:'$G(DIQUIET) !,prefix_"  : "_zi_"^"_$g(@node@("A",zi))
 . d oneout(zout,prefix_"  : "_zi_"^"_$g(@node@("A",zi)))
 f  s zi=$o(@node@("C",zi)) q:zi=""  d  ;
 . d tree(zi,"|  "_prefix,docid,zout)
 q
 ;
oneout(zbuf,ztxt) ; adds a line to zbuf
 n zi s zi=$o(@zbuf@(""),-1)+1
 s @zbuf@(zi)=ztxt
 q
 ;
ALLTXT(where)   ; extrinsic which returns all text lines from the node .. concatinated 
 ; together
 n zti s zti=""
 n ztr s ztr=""
 f  s zti=$o(@where@("T",zti)) q:zti=""  d  ;
 . s ztr=ztr_$g(@where@("T",zti))
 q ztr
 ;
CLEAN(STR)      ; extrinsic function; returns string - gpl borrowed from the CCR package
 ;; Removes all non printable characters from a string.
 ;; STR by Value
 N TR,I
 F I=0:1:31 S TR=$G(TR)_$C(I)
 S TR=TR_$C(127)
 N ZR S ZR=$TR(STR,TR)
 S ZR=$$LDBLNKS(ZR) ; get rid of leading blanks
 QUIT ZR
 ;
LDBLNKS(st)     ; extrinsic which removes leading blanks from a string
 n pos f pos=1:1:$l(st)  q:$e(st,pos)'=" "
 q $e(st,pos,$l(st))
 ;
show(what,docid,zout)   ;
 I '$D(C0XJOB) S C0XJOB=$J
 d tree(what,,docid,zout)
 q
 ; 
listm(out,in) ; out is passed by name in is passed by reference
 n i s i=$q(@in@(""))
 f  s i=$q(@i) q:i=""  d oneout(out,i_"="_@i)
 q
 ;
peel(out,in) ; compress a complex global into something simpler
 n i s i=$q(@in@(""))
 f  s i=$q(@i) q:i=""  d  ;
 . n j,k,l,m,n,m1
 . s (l,m)=""
 . s n=$$shrink($qs(i,$ql(i)))
 . s k=$qs(i,0)_"("""
 . f j=1:1:$ql(i)-1  d  ;
 . . i +$qs(i,j)>0 d  ;
 . . . i m'="" q
 . . . s m=$qs(i,j)
 . . . s m1=j
 . . . i j>1 s l=$qs(i,j-1)
 . . . e  s l=$qs(i,j)
 . . . i l["substanceAdministration" s l=$p(l,"substanceAdministration",2)
 . . s k=k_$qs(i,j)_""","""
 . . w:$g(DEBUG) !,j," ",k
 . s k=k_$qs(i,$ql(i))_""")"
 . w:$g(DEBUG) !,k,"=",@k
 . i l'="" d  q  ;
 . . d:$g(@out@(l,m,n))'=""
 . . . ;n jj,n2
 . . . ;f jj=2:1  w !,jj s n2=$qs(i,$ql(i)-1)_"["_jj_"]"_n q:$g(@out@(l,m,n2))=""  w !,n2
 . . . ;s n=n2
 . . . ;s n=$$shrink($qs(i,$ql(i)-1))_"_"_n
 . . . s n=$$mkxpath(i,m1)
 . . . b:$g(@out@(l,m,n))'=""
 . . s @out@(l,m,n)=@k
 . i @k'="" d  ;
 . . i $ql(i)>1 d  q  ;
 . . . s l=$$shrink($qs(i,$ql(i)-1))
 . . . d:$g(@out@(l,n))'=""
 . . . . ;n jj,n2
 . . . . ;f jj=2:1  s n2=$qs(i,$ql(i)-1)_"["_jj_"]"_"_"_n q:$g(@out@(l,n2))=""
 . . . . ;s n=n2
 . . . . ;b:$g(@out@(l,n))'=""
 . . . . s n=$$shrink($qs(i,$ql(i)-1))_"_"_n
 . . . s @out@(l,n)=@k
 . . s @out@(n)=@k
 q
 ;
shrink(x) ; reduce strings 
 n y,z
 s y=x
 s z="substanceAdministration"
 i x[z s y=$p(x,z,2)
 q y
 ;
mkxpath(zq,zm) ; extrinsic which returns the xpath derived from the $query value 
 ;passed by value. zm is the index to begin with
 ;
 n zr s zr=""
 n zi s zi=""
 f zi=1:1:$ql(zq) s zr=zr_"/"_$qs(zq,zi)
 q zr
 ;

C0IUTIL2
C0IUTIL ; GPL/NEA - Immunizations Forecasting Utilities ;05/03/14  17:05
 ;;0.1;Immunizations Forecasting;nopatch;noreleasedate;
 ;
 ; License Apache 2
 ; 
 Q
 ;
GETNMAP(OUTXML,INXML,IARY) ; Retrieves XML stored in Mumps routines and maps
 ; them using IARY, passed by name. Maps use @@var@@ protocol
 ; with @IARY@("var")=value for the map values
 ; OUTXML is passed by name and will hold the result
 ; INXML is the name of the storage place ie "HEADER^JJOHPPC2"
 N GTAG,GRT,GI
 S GTAG=$P(INXML,"^",1)
 S GRT=$P(INXML,"^",2)
 ; first get all of the lines of the XML
 N TXML ; temp var for xml
 S GX=1
 S GN=1
 F  S GI=GTAG_"+"_GX_"^"_GRT  Q:$T(@GI)'[";;"  D  ;
 . S GX=GX+1
 . N LN S LN=$P($T(@GI),";;",2)
 . I $E(LN,1)=";" Q  ; skip over comments
 . S TXML(GN)=LN
 . I $G(CCDADEBUG) W !,GN," ",TXML(GN)
 . S GN=GN+1
 ; next call MAP to resolve mappings and place result directly in OUTXML
 ; if OUTXML has contents already, add the result to the end and update the count (0)
 I $D(@OUTXML@(1)) D  ;
 . N TXML2
 . D MAP^MXMLTMPL("TXML",IARY,"TXML2")
 . S GI=0
 . F  S GI=$O(TXML2(GI)) Q:+GI=0  S @OUTXML@($O(@OUTXML@(""),-1)+1)=TXML2(GI)
 . S @OUTXML@(0)=$O(@OUTXML@(""),-1)
 E  D MAP^MXMLTMPL("TXML",IARY,OUTXML)
 Q
 ;
GET(OUTXML,INXML) ; GET ONLY Retrieves XML stored in Mumps routines 
 ; OUTXML is passed by name and will hold the result
 ; INXML is the name of the storage place ie "HEADER^JJOHPPC2"
 N GTAG,GRT,GI
 S GTAG=$P(INXML,"^",1)
 S GRT=$P(INXML,"^",2)
 ; get all of the lines of the XML
 S GX=1
 S GN=1
 F  S GI=GTAG_"+"_GX_"^"_GRT  Q:$T(@GI)'[";;"  D  ;
 . S GX=GX+1
 . N LN S LN=$P($T(@GI),";;",2)
 . I $E(LN,1)=";" Q  ; skip over comments
 . S @OUTXML@($O(@OUTXML@(""),-1)+1)=LN
 . S @OUTXML@(0)=$O(@OUTXML@(""),-1)
 . I $G(CCDADEBUG) W !,GN," ",@OUTXML@(GN)
 . S GN=GN+1
 Q
 ;
TEST ;
 N GV S GV("hl7OutTime")=$$FMDTOUTC^C0IUTIL(DT)
 K G
 D GETNMAP("G","TENVOUT^C0ITEST","GV")
 ZWR G
 Q
 ;
OUTLOG(ZTXT) ; add text to the log
 I '$D(C0LOGLOC) S C0LOGLOC=$NA(^TMP("C0I",$J,"LOG"))
 N LN S LN=$O(@C0LOGLOC@(""),-1)+1
 S @C0LOGLOC@(LN)=ZTXT
 Q
 ;
LOGARY(ARY) ; LOG AN ARRAY
 N II S II=""
 F  S II=$O(@ARY@(II)) Q:II=""  D  ;
 . D OUTLOG(ARY_" "_II_" = "_$G(@ARY@(II)))
 Q
 ;
UUID()   ; thanks to Wally for this.
 N R,I,J,N 
 S N="",R="" F  S N=N_$R(100000) Q:$L(N)>64 
 F I=1:2:64 S R=R_$E("0123456789abcdef",($E(N,I,I+1)#16+1)) 
 Q $E(R,1,8)_"-"_$E(R,9,12)_"-4"_$E(R,14,16)_"-"_$E("89ab",$E(N,17)#4+1)_$E(R,18,20)_"-"_$E(R,21,32)
 ;
 ; the following was borrowed from the C0CUTIL and adapted
 ;
FMDTOCDA(DATE,FORMAT) ; Convert Fileman Date to UTC Date Format; PUBLIC; Extrinsic
 ; FORMAT is Format of Date. Can be either D (Day) or DT (Date and Time)
 ; If not passed, or passed incorrectly, it's assumed that it is D.
 ; FM Date format is "YYYMMDD.HHMMSS" HHMMSS may not be supplied.
 ; UTC date is formatted as follows: YYYY-MM-DDThh:mm:ss_offsetfromUTC
 ; UTC, Year, Month, Day, Hours, Minutes, Seconds, Time offset (obtained from Mailman Site Parameters)
 N UTC,Y,M,D,H,MM,S,OFF
 S Y=1700+$E(DATE,1,3)
 S M=$E(DATE,4,5)
 S D=$E(DATE,6,7)
 S H=$E(DATE,9,10)
 I $L(H)=1 S H="0"_H
 S MM=$E(DATE,11,12)
 I $L(MM)=1 S MM="0"_MM
 S S=$E(DATE,13,14)
 I $L(S)=1 S S="0"_S
 S OFF=$$TZ^XLFDT ; See Kernel Manual for documentation.
 S OFFS=$E(OFF,1,1)
 S OFF0=$TR(OFF,"+-")
 S OFF1=$E(OFF0+10000,2,3)
 S OFF2=$E(OFF0+10000,4,5)
 ;S OFF=OFFS_OFF1_":"_OFF2
 S OFF=OFFS_OFF1_OFF2
 ;S OFF2=$E(OFF,1,2) ;
 ;S OFF2=$E(100+OFF2,2,3) ; GPL 11/08 CHANGED TO -05:00 FORMAT
 ;S OFF3=$E(OFF,3,4) ;MINUTES
 ;S OFF=$S(OFF2="":"00",0:"00",1:OFF2)_"."_$S(OFF3="":"00",1:OFF3)
 ; If H, MM and S are empty, it means that the FM date didn't supply the time.
 ; In this case, set H, MM and S to "00"
 ; S:('$L(H)&'$L(MM)&'$L(S)) (H,MM,S)="00" ; IF ONLY SOME ARE MISSING?
 S:'$L(H) H="00"
 S:'$L(MM) MM="00"
 S:'$L(S) S="00"
 S UTC=Y_M_D_H_MM_$S(S="":"00",1:S)_OFF ; Skip's code to fix hanging colon if no seconds
 ;S UTC=Y_"-"_M_"-"_D_"T"_H_":"_MM_$S(S="":":00",1:":"_S)_OFF ; Skip's code to fix hanging colon if no seconds
 I $E(UTC,9,14)="000000" S UTC=$E(UTC,1,8) ; admit our precision gpl 9/2013
 I $L($G(FORMAT)),FORMAT="DT" Q UTC ; Date with time.
 E  Q $P(UTC,"T")
 ;
FMDTOUTC(DATE,FORMAT) ; Convert Fileman Date to UTC Date Format; PUBLIC; Extrinsic
 ; FORMAT is Format of Date. Can be either D (Day) or DT (Date and Time)
 ; If not passed, or passed incorrectly, it's assumed that it is D.
 ; FM Date format is "YYYMMDD.HHMMSS" HHMMSS may not be supplied.
 ; UTC date is formatted as follows: YYYY-MM-DDThh:mm:ss_offsetfromUTC
 ; UTC, Year, Month, Day, Hours, Minutes, Seconds, Time offset (obtained from Mailman Site Parameters)
 N UTC,Y,M,D,H,MM,S,OFF
 S Y=1700+$E(DATE,1,3)
 S M=$E(DATE,4,5)
 S D=$E(DATE,6,7)
 S H=$E(DATE,9,10)
 I $L(H)=1 S H="0"_H
 S MM=$E(DATE,11,12)
 I $L(MM)=1 S MM="0"_MM
 S S=$E(DATE,13,14)
 I $L(S)=1 S S="0"_S
 S OFF=$$TZ^XLFDT ; See Kernel Manual for documentation.
 S OFFS=$E(OFF,1,1)
 S OFF0=$TR(OFF,"+-")
 S OFF1=$E(OFF0+10000,2,3)
 S OFF2=$E(OFF0+10000,4,5)
 S OFF=OFFS_OFF1_":"_OFF2
 ;S OFF2=$E(OFF,1,2) ;
 ;S OFF2=$E(100+OFF2,2,3) ; GPL 11/08 CHANGED TO -05:00 FORMAT
 ;S OFF3=$E(OFF,3,4) ;MINUTES
 ;S OFF=$S(OFF2="":"00",0:"00",1:OFF2)_"."_$S(OFF3="":"00",1:OFF3)
 ; If H, MM and S are empty, it means that the FM date didn't supply the time.
 ; In this case, set H, MM and S to "00"
 ; S:('$L(H)&'$L(MM)&'$L(S)) (H,MM,S)="00" ; IF ONLY SOME ARE MISSING?
 S:'$L(H) H="00"
 S:'$L(MM) MM="00"
 S:'$L(S) S="00"
 S UTC=Y_"-"_M_"-"_D_"T"_H_":"_MM_$S(S="":":00",1:":"_S)_OFF ; Skip's code to fix hanging colon if no seconds
 I $L($G(FORMAT)),FORMAT="DT" Q UTC ; Date with time.
 E  Q $P(UTC,"T")
 ;
HTMLDT(FMDT) ; extrinsic returns date format MM/DD/YYYY for display in html
 ;
 N TMP,TMP2
 S TMP=$$FMDTOUTC(FMDT)
 S TMP2=$E(TMP,5,6)_"/"_$E(TMP,7,8)_"/"_$E(TMP,1,4)
 I $E(TMP,9,14)'="000000" D  ;
 . I $L(TMP)=8 Q  ; no time
 . S TMP2=TMP2_" "_$E(TMP,9,10)_":"
 . S TMP2=TMP2_$E(TMP,11,12)_":"
 . S TMP2=TMP2_$E(TMP,13,19)
 Q TMP2
 ;
TESTDATE ; test the above transform
 N GT
 S GT=$$FMDTOUTC($$NOW^XLFDT,"DT")
 W !,GT
 Q
 ; 
GENHTML(HOUT,HARY) ; generate an HTML table from array HARY
 ; HOUT AND HARY are passed by name
 ;
 ; format of the table:
 ;  HARY("TITLE")="Problem List"
 ;  HARY("HEADER",1)="column 1 header"
 ;  HARY("HEADER",2)="col 2 header"
 ;  HARY(1,1)="row 1 col1 value"
 ;  HARY(1,2)="row 1 col2 value"
 ;  HARY(1,2,"ID")="the ID of the element" 
 ;  etc...
 ;
 N C0I,C0J
 I $D(@HARY@("TITLE")) D  ;
 . N X
 . S X="<title>"_@HARY@("TITLE")_"</title>"
 . D ADDTO(HOUT,X)
 D ADDTO(HOUT,"<text>")
 D ADDTO(HOUT,"<table border=""1"" width=""100%"">")
 I $D(@HARY@("HEADER")) D  ;
 . D ADDTO(HOUT,"<thead>")
 . D ADDTO(HOUT,"<tr>")
 . S C0I=0
 . F  S C0I=$O(@HARY@("HEADER",C0I)) Q:+C0I=0  D  ;
 . . D ADDTO(HOUT,"<th>"_@HARY@("HEADER",C0I)_"</th>")
 . D ADDTO(HOUT,"</tr>")
 . D ADDTO(HOUT,"</thead>")
 D ADDTO(HOUT,"<tbody>")
 I $D(@HARY@(1)) D  ;
 . S C0I=0 S C0J=0
 . F  S C0I=$O(@HARY@(C0I)) Q:+C0I=0  D  ;
 . . D ADDTO(HOUT,"<tr>")
 . . F  S C0J=$O(@HARY@(C0I,C0J)) Q:+C0J=0  D  ;
 . . . N UID S UID=$G(@HARY@(C0I,C0J,"ID"))
 . . . I UID'="" D ADDTO(HOUT,"<td ID="""_UID_""">"_@HARY@(C0I,C0J)_"</td>")
 . . . E  D ADDTO(HOUT,"<td>"_@HARY@(C0I,C0J)_"</td>")
 . . D ADDTO(HOUT,"</tr>")
 D ADDTO(HOUT,"</tbody>")
 D ADDTO(HOUT,"</table>")
 D ADDTO(HOUT,"</text>")
 Q
 ;
TESTHTML ;
 N HTML
 S HTML("TITLE")="Problem List"
 S HTML("HEADER",1)="column 1 header"
 S HTML("HEADER",2)="col 2 header"
 S HTML(1,1)="row 1 col1 value"
 S HTML(1,2)="row 1 col2 value"
 N GHTML
 D GENHTML("GHTML","HTML")
 ZWR GHTML
 Q
 ;
ADDTO(DEST,WHAT) ; adds string WHAT to list DEST 
 ; DEST is passed by name
 N GN
 S GN=$O(@DEST@("AAAAAA"),-1)+1
 S @DEST@(GN)=WHAT
 S @DEST@(0)=GN ; count
 Q
 ;
ORGOID() ; extrinsic which returns the Organization OID
 Q "2.16.840.1.113883.5.83" ; WORLDVISTA HL7 OID - 
 ; REPLACE WITH OID LOOKUP FROM INSTITUTION FILE
 ;
tree(where,prefix,docid,zout)   ; show a tree starting at a node in MXML. 
 ; node is passed by name
 ; 
 i $g(prefix)="" s prefix="|--" ; starting prefix
 i '$d(KBAIJOB) s KBAIJOB=$J
 n node s node=$na(^TMP("MXMLDOM",KBAIJOB,docid,where))
 n txt s txt=$$CLEAN($$ALLTXT(node))
 w:'$G(DIQUIET) !,prefix_@node_" "_txt
 d oneout(zout,prefix_@node_" "_txt)
 n zi s zi=""
 f  s zi=$o(@node@("A",zi)) q:zi=""  d  ;
 . w:'$G(DIQUIET) !,prefix_"  : "_zi_"^"_$g(@node@("A",zi))
 . d oneout(zout,prefix_"  : "_zi_"^"_$g(@node@("A",zi)))
 f  s zi=$o(@node@("C",zi)) q:zi=""  d  ;
 . d tree(zi,"|  "_prefix,docid,zout)
 q
 ;
oneout(zbuf,ztxt) ; adds a line to zbuf
 n zi s zi=$o(@zbuf@(""),-1)+1
 s @zbuf@(zi)=ztxt
 q
 ;
ALLTXT(where)   ; extrinsic which returns all text lines from the node .. concatinated 
 ; together
 n zti s zti=""
 n ztr s ztr=""
 f  s zti=$o(@where@("T",zti)) q:zti=""  d  ;
 . s ztr=ztr_$g(@where@("T",zti))
 q ztr
 ;
CLEAN(STR)      ; extrinsic function; returns string - gpl borrowed from the CCR package
 ;; Removes all non printable characters from a string.
 ;; STR by Value
 N TR,I
 F I=0:1:31 S TR=$G(TR)_$C(I)
 S TR=TR_$C(127)
 N ZR S ZR=$TR(STR,TR)
 S ZR=$$LDBLNKS(ZR) ; get rid of leading blanks
 QUIT ZR
 ;
LDBLNKS(st)     ; extrinsic which removes leading blanks from a string
 n pos f pos=1:1:$l(st)  q:$e(st,pos)'=" "
 q $e(st,pos,$l(st))
 ;
show(what,docid,zout)   ;
 I '$D(C0XJOB) S C0XJOB=$J
 d tree(what,,docid,zout)
 q
 ; 
listm(out,in) ; out is passed by name in is passed by reference
 n i s i=$q(@in@(""))
 f  s i=$q(@i) q:i=""  d oneout(out,i_"="_@i)
 q
 ;
peel(out,in) ; compress a complex global into something simpler
 n i s i=$q(@in@(""))
 f  s i=$q(@i) q:i=""  d  ;
 . n j,k,l,m,n,m1
 . s (l,m)=""
 . s n=$$shrink($qs(i,$ql(i)))
 . s k=$qs(i,0)_"("""
 . f j=1:1:$ql(i)-1  d  ;
 . . i +$qs(i,j)>0 d  ;
 . . . i m'="" q
 . . . s m=$qs(i,j)
 . . . s m1=j
 . . . i j>1 s l=$qs(i,j-1)
 . . . e  s l=$qs(i,j)
 . . . i l["substanceAdministration" s l=$p(l,"substanceAdministration",2)
 . . s k=k_$qs(i,j)_""","""
 . . w:$g(DEBUG) !,j," ",k
 . s k=k_$qs(i,$ql(i))_""")"
 . w:$g(DEBUG) !,k,"=",@k
 . i l'="" d  q  ;
 . . d:$g(@out@(l,m,n))'=""
 . . . ;n jj,n2
 . . . ;f jj=2:1  w !,jj s n2=$qs(i,$ql(i)-1)_"["_jj_"]"_n q:$g(@out@(l,m,n2))=""  w !,n2
 . . . ;s n=n2
 . . . ;s n=$$shrink($qs(i,$ql(i)-1))_"_"_n
 . . . s n=$$mkxpath(i,m1)
 . . . b:$g(@out@(l,m,n))'=""
 . . s @out@(l,m,n)=@k
 . i @k'="" d  ;
 . . i $ql(i)>1 d  q  ;
 . . . s l=$$shrink($qs(i,$ql(i)-1))
 . . . d:$g(@out@(l,n))'=""
 . . . . ;n jj,n2
 . . . . ;f jj=2:1  s n2=$qs(i,$ql(i)-1)_"["_jj_"]"_"_"_n q:$g(@out@(l,n2))=""
 . . . . ;s n=n2
 . . . . ;b:$g(@out@(l,n))'=""
 . . . . s n=$$shrink($qs(i,$ql(i)-1))_"_"_n
 . . . s @out@(l,n)=@k
 . . s @out@(n)=@k
 q
 ;
shrink(x) ; reduce strings 
 n y,z
 s y=x
 s z="substanceAdministration"
 i x[z s y=$p(x,z,2)
 q y
 ;
mkxpath(zq,zm) ; extrinsic which returns the xpath derived from the $query value 
 ;passed by value. zm is the index to begin with
 ;
 n zr s zr=""
 n zi s zi=""
 f zi=1:1:$ql(zq) s zr=zr_"/"_$qs(zq,zi)
 q zr
 ;

C0IVMR
C0IVMR ; GPL&NEA - Immunizations Forecasting Routine ;05/03/14  17:05
 ;;0.1;Immunizations Forecasting;nopatch;noreleasedate;
 ;
 ; License Apache 2
 ; 
 Q
 ;
EN(WRK,DFN,PARMS,RETURN) ;
 K WRK
 N C0ARY,G,C0IPOA,CPTMAP,CVXMAP,CPTIMAP,CVXIMAP
 D CPTMAP^C0IVMR
 D CVXMAP^C0IVMR
 D CPTIMAP^C0IVMR
 D CVXIMAP^C0IVMR
 D PAYOUTAV^C0IVMR
 D PAYOUTBV^C0IVMR(.RETURN)
 D GET^C0IUTIL("WRK","TPAYOUTC^C0IVMR")
 D PAYOUTDV^C0IVMR
 D GET^C0IUTIL("WRK","TPAYOUTE^C0IVMR")
 M ^TMP("C0IWRK",$J)=WRK
 S OK=$$GTF^%ZISH($NA(^TMP("C0IWRK",$J,1)),3,"/home/vista/","ice-test.xml")
 K WRK(0)
 Q
 ;
TEST1 ;
 S DFN=$$PAT^C0IICE()
 K WRK
 D CPTMAP
 D CVXMAP
 D CPTIMAP
 D CVXIMAP
 D PAYOUTAV
 D PAYOUTBV(.RETURN)
 D GET^C0IUTIL("WRK","TPAYOUTC^C0IVMR")
 D PAYOUTDV
 D GET^C0IUTIL("WRK","TPAYOUTE^C0IVMR")
 M ^TMP("C0IWRK",$J)=WRK
 W $$GTF^%ZISH($NA(^TMP("C0IWRK",$J,1)),3,"/home/vista/","ice-test.xml")
 Q
 ; get patient DFN
 ; get patient VPR demographics for sex and DOB
 ; call VPR to get patient Immunizaitons
 ; 
 ; begin building SOAP request XML
 ; loop through immunizations array and generate XML pieces
 ; call build to put all the pieces together into one XML array
 ; base64 encode the XML array
 ;
TENVOUT ; build SOAP envelope
 ;;<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope"> 
 ;;<S:Body>
 ;;<ns2:evaluateAtSpecifiedTime xmlns:ns2="http://www.omg.org/spec/CDSS/201105/dss">
 ;;<interactionId scopingEntityId="gov.nyc.health" interactionId="123456"/>
 ;;<specifiedTime>@@hl7OutTime@@</specifiedTime>
 ;;<evaluationRequest clientLanguage="" clientTimeZoneOffset="">
 ;;<kmEvaluationRequest>
 ;;<kmId scopingEntityId="org.nyc.cir" businessId="ICE" version="1.0.0"/>
 ;;</kmEvaluationRequest>
 ;;<dataRequirementItemData>
 ;;<driId itemId="cdsPayload">
 ;;<containingEntityId scopingEntityId="gov.nyc.health" businessId="ICEData" version="1.0.0.0"/>
 ;;</driId>
 ;;<data>
 ;;<informationModelSSId scopingEntityId="org.opencds.vmr" businessId="VMR" version="1.0"/>
 ;;<base64EncodedPayload>@@outPayload@@</base64EncodedPayload>
 ;;</data>
 ;;</dataRequirementItemData>
 ;;</evaluationRequest>
 ;;</ns2:evaluateAtSpecifiedTime>
 ;; </S:Body>
 ;; </S:Envelope>
 Q
ENVOUTV ; create beginning of envelop
 K C0IARY
 S C0IARY("hl7OutTime")=$$FMDTOCDA^C0IUTIL(DT)
 D GETNMAP^C0IUTIL("WRK","TENVOUT^C0IVMR","C0IARY")
 Q
TPAYOUTA ; First part of payload message with Sex and DOB and a UUID variables
 ;;<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
 ;;<ns4:cdsInput xmlns:ns2="org.opencds" xmlns:ns3="org.opencds.vmr.v1_0.schema.vmr" xmlns:ns4="org.opencds.vmr.v1_0.schema.cdsinput" xmlns:ns5="org.opencds.vmr.v1_0.schema.cdsoutput">
 ;;<templateId root="2.16.840.1.113883.3.795.11.1.1"/>
 ;;<cdsContext>
 ;;<cdsSystemUserPreferredLanguage code="en" codeSystem="2.16.840.1.113883.6.99" displayName="English"/>
 ;;</cdsContext>
 ;;<vmrInput>
 ;;<templateId root="2.16.840.1.113883.3.795.11.1.1"/>
 ;;<patient>
 ;;<templateId root="2.16.840.1.113883.3.795.11.2.1.1"/>
 ;;<id root="@@UUID0@@"/>
 ;;<demographics>
 ;;<birthTime value="@@DOB@@"/>
 ;;<gender code="@@genderCode@@" codeSystem="2.16.840.1.113883.5.1" displayName="@@genderName@@" originalText="@@genderCode@@"/>
 ;;</demographics>
 ;;<clinicalStatements>
 Q
 ;
PAYOUTAV ; setting payload variables sex, DOB and UUID for the first section (PAYOUTA)
 K C0IPOA
 S X=$$GET1^DIQ(2,DFN,"DOB","I")
 S C0IPOA("UUID0")=$$UUID^C0IUTIL
 S C0IPOA("DOB")=$$FMDTOCDA^C0IUTIL(X)
 S C0IPOA("genderCode")=$$GET1^DIQ(2,DFN,"SEX","I")
 I C0IPOA("genderCode")="M" S C0IPOA("genderName")="Male"
 I C0IPOA("genderCode")="F" S C0IPOA("genderName")="Female"
 I C0IPOA("genderCode")="UN" S C0IPOA("genderName")="Undifferentiated" ; ICE term, not VISTA  VistA allow M F only.P
 D GETNMAP^C0IUTIL("WRK","TPAYOUTA^C0IVMR","C0IPOA") 
 Q
 ;
PAYOUTB ;
 ;;;Disease an immunity section which is optional. the DISEASE_DOCUMENTED and IS_IMMUNE
 ;;;Cycle through 6 diseases using reminders to check for prior diagnosis
 ;;;Hep A: 070.1
 ;;;Hep B: 070.3
 ;;;Measles: 055.9
 ;;;Mumps: 072.9
 ;;;Rubella: 056.9
 ;;;Varicella: 052.9
 ;;;First Tag for this section if any prior diagnoses are available
 ;;<observationResults>
 Q
 ;
PAYOUTM ;
 ;;;Populate this section for each disease found leading to immunity
 ;;<observationResult>
 ;;<templateId root="2.16.840.1.113883.3.795.11.6.3.1"/>
 ;;<id root="@@UUIDA@@"/>
 ;;<observationFocus code="@@codeICD9@@" codeSystem="2.16.840.1.113883.6.103" displayName="@@codeName@@" originalText="@@codeICD9@@"/>
 ;;<observationEventTime low="@@timeProblem@@" high="@@timeProblem@@"/>
 ;;<observationValue>
 ;;<concept code="DISEASE_DOCUMENTED" codeSystem="2.16.840.1.113883.3.795.12.100.8" displayName="Disease Documented" originalText="DISEASE_DOCUMENTED"/>
 ;;</observationValue>
 ;;<interpretation code="IS_IMMUNE" codeSystem="2.16.840.1.113883.3.795.12.100.9" displayName="Is Immune" originalText="IS_IMMUNE"/>
 ;;</observationResult>
 Q
 ;
PAYOUTN ;
 ;;;Finishes off the disease section if there is one
 ;;</observationResults>
 Q
PAYOUTBV(RETURN) ;
 ; RETURN is passed by reference and is populated with the results of Reminders
 ;  and rubrics to tie the ICE return results to the VistA Patient Record
 ;
 ;Placeholder for logic and variables for populating the DISEASE_DOCUMENTED and IS_IMMUNE
 ;Diseases Hep A, Hep B, Measles, Mumps, Rubella, Varicella only as of 5/2014,
 ;If N is 0 after using reminders to test for the diseases in the taxonomies, then skip this section
 ;If more than one of these present, use the needed disease tags to write this part of the message
 ;
 N IENHEPA,IENHEPB,IENMEASL,IENVARIC,IENMUMPS,IENRUBEL 
 N RCODE,RNAME ; rubric code and name
 S (IENHEPA,IENHEPB,IENMEASL,IENVARIC,IENMUMPS,IENRUBEL)=""
 N FILE,IENS,FLAGS,REMNAME,INDEX,SCREEN,EMSG
 S FILE=811.9 
 S IENS=""
 S FLAGS="OQ"
 S INDEX="B"
 S SCREEN=""
 S EMSG=""
 N N,HEPA,HEPB,VARICEL,MUMPS,MEASLES,RUBELLA
 S (N,HEPA,HEPB,VARICEL,MUMPS,MEASLES,RUBELLA)=0
 K ^TMP("PXRHM",$J)
 N REMNAME S REMNAME="VIMM-HEPATITIS B DIAGNOSIS"
 S IENHEPB=$$FIND1^DIC(FILE,IENS,FLAGS,REMNAME,INDEX,SCREEN,EMSG)
 I IENHEPB="" Q  ; reminder not found, skip this part
 K REMNAME
 ;D MAIN^PXRM(DFN,IENHEPB,0)
 S RCODE="070.30"
 S RNAME="Hep B"
 I $$EN^C0IPXRM(DFN,IENHEPB,.RETURN,"hadHepB",RCODE,RNAME) S N=N+1 S HEPB=1
 ;I $G(^TMP("PXRHM",$J,IENHEPB,"VIMM-HEPATITIS B DIAGNOSIS"))["DUE NOW" S N=N+1 S HEPB=1
 ;W "HEPB=",HEPB,!
 K ^TMP("PXRHM",$J)
 N REMNAME S REMNAME="VIMM-HEPATITIS A DIAGNOSIS"
 S IENHEPA=$$FIND1^DIC(FILE,IENS,FLAGS,REMNAME,INDEX,SCREEN,EMSG) 
 K REMNAME
 ;D MAIN^PXRM(DFN,IENHEPA,0)
 S RCODE="070.1"
 S RNAME="Hep A"
 I $$EN^C0IPXRM(DFN,IENHEPA,.RETURN,"hadHepA",RCODE,RNAME) S N=N+1 S HEPA=1
 ;I $G(^TMP("PXRHM",$J,IENHEPA,"VIMM-HEPATITIS A DIAGNOSIS"))["DUE NOW" S N=N+1 S HEPA=1
 ;W "HEPA=",HEPA,!
 K ^TMP("PXRHM",$J)
 N REMNAME S REMNAME="VIMM-VARICELLA DIAGNOSIS"
 S IENVARIC=$$FIND1^DIC(FILE,IENS,FLAGS,REMNAME,INDEX,SCREEN,EMSG)
 K REMNAME
 ;D MAIN^PXRM(DFN,IENVARIC,0)
 S RCODE="052.9"
 S RNAME="Varicella"
 I $$EN^C0IPXRM(DFN,IENVARIC,.RETURN,"hadVaricella",RCODE,RNAME) S N=N+1 S VARICEL=1
 ;I $G(^TMP("PXRHM",$J,IENVARIC,"VIMM-VARICELLA DIAGNOSIS"))["DUE NOW" S N=N+1 S VARICEL=1
 ;W "VARICEL=",VARICEL,!
 K ^TMP("PXRHM",$J)
 N REMNAME S REMNAME="VIMM-MUMPS DIAGNOSIS" 
 S IENMUMPS=$$FIND1^DIC(FILE,IENS,FLAGS,REMNAME,INDEX,SCREEN,EMSG) D MAIN^PXRM(DFN,267,0)
 K REMNME
 ;D MAIN^PXRM(DFN,IENMUMPS,0)
 S RCODE="072.9"
 S RNAME="Mumps"
 I $$EN^C0IPXRM(DFN,IENMUMPS,.RETURN,"hadMumps",RCODE,RNAME) S N=N+1 S MUMPS=1
 ;I $G(^TMP("PXRHM",$J,IENMUMPS,"VIMM-MUMPS DIAGNOSIS"))["DUE NOW" S N=N+1 S MUMPS=1
 ;W "MUMPS=",MUMPS,!
 K ^TMP("PXRHM",$J)
 N REMNAME S REMNAME="VIMM-MEASLES DIAGNOSIS"
 S IENMEASL=$$FIND1^DIC(FILE,IENS,FLAGS,REMNAME,INDEX,SCREEN,EMSG)
 K REMNAME
 ;D MAIN^PXRM(DFN,IENMEASL,0)
 S RCODE="055.9"
 S RNAME="Measles"
 I $$EN^C0IPXRM(DFN,IENMEASL,.RETURN,"hadMeasles",RCODE,RNAME) S N=N+1 S MEASLES=1
 ;I $G(^TMP("PXRHM",$J,IENMEASL,"VIMM-MEASLES DIAGNOSIS"))["DUE NOW" S N=N+1 S MEASLES=1
 ;W "MEASLES=",MEASLES,!
 K ^TMP("PXRHM",$J)
 N REMNAME S REMNAME="VIMM-RUBELLA DIAGNOSIS"
 S IENRUBEL=$$FIND1^DIC(FILE,IENS,FLAGS,REMNAME,INDEX,SCREEN,EMSG)
 K REMNAME
 ;D MAIN^PXRM(DFN,IENRUBEL,0)
 S RCODE="056.9"
 S RNAME="Rubella"
 I $$EN^C0IPXRM(DFN,IENRUBEL,.RETURN,"hadRubella",RCODE,RNAME) S N=N+1 S RUBELLA=1
 ;I $G(^TMP("PXRHM",$J,IENRUBEL,"VIMM-RUBELLA DIAGNOSIS"))["DUE NOW" S N=N+1 S RUBELLA=1
 ;W "RUBELLA=",RUBELLA,!
 K ^TMP("PXRHM",$J)
 I N=0 Q
 E  D
 .D GETNMAP^C0IUTIL("WRK","PAYOUTB^C0IVMR","C0IPOA")
 .I HEPB=1 D HEPB
 .I HEPA=1 D HEPA
 .I VARICEL=1 D VARICEL
 .I MUMPS=1 D MUMPS
 .I MEASLES=1 D MEASLES
 .I RUBELLA=1 D RUBELLA
 .D GETNMAP^C0IUTIL("WRK","PAYOUTN^C0IVMR","C0IPOA")
 .K ^TMP("PXRHM",$J)
 Q
 ;
PDATE(INDX) ; extrinsic which returns the date to use for the problem
 ; INDX is passed by value and is the index into the findings ie "hadHepB" 
 N C0FIND,RTN
 S C0FIND=$O(RETURN("findings","B",INDX,""))
 I C0FIND'="" D  ;
 . N C0DATE
 . S C0DATE=$G(RETURN("findings",C0FIND,"dateOfOnset"))
 . I C0DATE="" S C0DATE=$G(RETURN("findings",C0FIND,"date"))
 . S RTN=$$FMDTOCDA^C0IUTIL(C0DATE)
 E  S RTN=$$FMDTOCDA^C0IUTIL(DT)
 Q RTN
 ;
HEPB ;
 S C0IPOA("UUIDA")=$$UUID^C0IUTIL
 S C0IPOA("timeProblem")=$$PDATE("hadHepB")
 S C0IPOA("codeICD9")="070.30"
 S C0IPOA("codeName")="Viral hepatitis B without mention of hepatic coma, acute or unspecified, without mention of hepatitis delta"
 D GETNMAP^C0IUTIL("WRK","PAYOUTM^C0IVMR","C0IPOA")
 K C0IPOA("UUIDA")
 K C0IPOA("timeProblem")
 K C0IPOA("codeICD9")
 K C0IPOA("codeName")
 Q
 ;
HEPA ;
 S C0IPOA("UUIDA")=$$UUID^C0IUTIL
 S C0IPOA("timeProblem")=$$PDATE("hadHepA")
 ;S C0IPOA("timeProblem")=$$FMDTOCDA^C0IUTIL(DT)
 ;S C0IPOA("timeProblem")=$$FMDTOCDA^C0IUTIL("3130101")
 S C0IPOA("codeICD9")="070.1"
 S C0IPOA("codeName")="Viral hepatitis A without mention of hepatic coma"
 D GETNMAP^C0IUTIL("WRK","PAYOUTM^C0IVMR","C0IPOA")
 K C0IPOA("UUIDA")
 K C0IPOA("timeProblem")
 K C0IPOA("codeICD9")
 K C0IPOA("codeName") 
 Q
 ;
VARICEL ;
 S C0IPOA("UUIDA")=$$UUID^C0IUTIL
 S C0IPOA("timeProblem")=$$PDATE("hadVaricella")
 ;S C0IPOA("timeProblem")=$$FMDTOCDA^C0IUTIL(DT)
 S C0IPOA("codeICD9")="052.9"
 S C0IPOA("codeName")="Varicella without mention of complication"
 D GETNMAP^C0IUTIL("WRK","PAYOUTM^C0IVMR","C0IPOA")
 K C0IPOA("UUIDA")
 K C0IPOA("timeProblem")
 K C0IPOA("codeICD9")
 K C0IPOA("codeName")
 Q 
 ;  
MUMPS ;
 S C0IPOA("UUIDA")=$$UUID^C0IUTIL
 S C0IPOA("timeProblem")=$$PDATE("hadMumps")
 ;S C0IPOA("timeProblem")=$$FMDTOCDA^C0IUTIL(DT)
 S C0IPOA("codeICD9")="072.9"
 S C0IPOA("codeName")="Mumps without mention of complication"
 D GETNMAP^C0IUTIL("WRK","PAYOUTM^C0IVMR","C0IPOA")
 K C0IPOA("UUIDA")  
 K C0IPOA("timeProblem")
 K C0IPOA("codeICD9")
 K C0IPOA("codeName")
 Q
 ; 
MEASLES ;
 S C0IPOA("UUIDA")=$$UUID^C0IUTIL
 S C0IPOA("timeProblem")=$$PDATE("hadMeasles")
 ;S C0IPOA("timeProblem")=$$FMDTOCDA^C0IUTIL(DT)
 S C0IPOA("codeICD9")="055.9"
 S C0IPOA("codeName")="Measles without mention of complication"
 D GETNMAP^C0IUTIL("WRK","PAYOUTM^C0IVMR","C0IPOA")
 K C0IPOA("UUIDA")
 K C0IPOA("timeProblem")
 K C0IPOA("codeICD9")
 K C0IPOA("codeName")
 Q
 ;
RUBELLA ;
 S C0IPOA("UUIDA")=$$UUID^C0IUTIL
 S C0IPOA("timeProblem")=$$PDATE("hadRubella")
 ;S C0IPOA("timeProblem")=$$FMDTOCDA^C0IUTIL(DT)
 S C0IPOA("codeICD9")="056.9"
 S C0IPOA("codeName")="Rubella without mention of complication"
 D GETNMAP^C0IUTIL("WRK","PAYOUTM^C0IVMR","C0IPOA")
 K C0IPOA("UUIDA")  
 K C0IPOA("timeProblem")
 K C0IPOA("codeICD9")
 K C0IPOA("codeName")
 Q
 ;
TPAYOUTC ;
 ;;; only one line that is fixed for substance administration 
 ;;<substanceAdministrationEvents>
 Q
 ;
TPAYOUTD ; 
 ;;; this section loops through the immunizations
 ;;<substanceAdministrationEvent>
 ;;<templateId root="2.16.840.1.113883.3.795.11.9.1.1"/>
 ;;<id root="@@UUID1@@"/>
 ;;<substanceAdministrationGeneralPurpose code="384810002" codeSystem="2.16.840.1.113883.6.5"/>
 ;;<substance>
 ;;<id root="@@UUID2@@"/>
 ;;<substanceCode code="@@CVXCode@@" codeSystem="2.16.840.1.113883.12.292" displayName="@@CVXName@@" originalText="@@ORIGName@@"/>
 ;;</substance>
 ;;<administrationTimeInterval low="@@admDate@@" high="@@admDate@@"/>
 ;;</substanceAdministrationEvent>
 Q
 ;
PAYOUTDV ;
 ; Variable and code for the looping IMMUNIZATIONS section
 ; Need UUID x 2, CVX code, name from CVX Short name, administration date 
 ;(need really only one eve thought it asks for high and low - use the same variable)
 D GETPAT^C0IEXTR(.G,DFN,"immunization")
 I G("results","immunizations@total")=0 Q
 E  D
 .N T S T=G("results","immunizations@total")
 .I T=1 D  ;
 ..N GTMP
 ..M GTMP=G("results","immunizations")
 ..K G("results","immunizations")
 .. M G("results","immunizations",1)=GTMP
 .. K GTMP
 .N I S I=""
 .F I=1:1:T D
 ..W:'$G(DIQUIET) "I is ",I,!
 ..D OUTLOG^C0IUTIL("I is "_I)
 ..N CPTIMM,CVXCODE,ADMDATE,IMMNAME,IMMCVX
 ..S C0IPOA("UUID1")=$$UUID^C0IUTIL 
 ..S C0IPOA("UUID2")=$$UUID^C0IUTIL
 ..S C0IPOA("CVXCode")=""
 ..S C0IPOA("CVXName")=""
 ..S C0IPOA("ORIGName")=""
 ..S C0IPOA("admDate")=""
 ..I $D(G("results","immunizations",I,"immunization","cpt@code")) D 
 ...; If there is a CPT code, use that to get the CVX code and the proper CVC code name
 ...N CPTIMM,CVXCODE,ADMDATE 
 ...S CPTIMM="" S CVXCODE="" S ADMDATE=""
 ...S CPTIMM=$G(G("results","immunizations",I,"immunization","cpt@code"))
 ...W:'$G(DIQUIET) "CPTIMM from G is ",CPTIMM,!
 ...S CVXCODE=CPTMAP(CPTIMM)
 ...W:'$G(DIQUIET) "The CVX code for this immunizaton with a CPT code is ",CVXCODE,!
 ...I ((CVXCODE'="")!(CVXCODE=999)) D  Q
 ....; If you found the CVXCode by the CPT code, add the XML to the array and QUIT  
 ....S C0IPOA("CVXCode")=CVXCODE
 ....S C0IPOA("CVXName")=CVXMAP(CVXCODE)
 ....S C0IPOA("ORIGName")=$G(G("results","immunizations",I,"immunization","name@value"))
 ....S ADMDATE=$G(G("results","immunizations",I,"immunization","administered@value"))
 ....S C0IPOA("admDate")=$$FMDTOCDA^C0IUTIL(ADMDATE)
 ....D GETNMAP^C0IUTIL("WRK","TPAYOUTD^C0IVMR","C0IPOA")
 ..I '$D(G("results","immunizations",I,"immunization","cpt@code")) D
 ...; if there is no CPT code, try to look it up by the proper CVX code name
 ...N IMMNAME,IMMCVX,IMMCPT,CVXCODE,ADMDATE
 ...S (IMMNAME,IMMCVX,IMMCPT,CVXCODE,ADMDATE)=""
 ...S IMMNAME=$G(G("results","immunizations",I,"immunization","name@value"))
 ...W:'$G(DIQUIET) "IMMNAME in the no CPT look up by proper CVX code name is ",IMMNAME,!
 ...S IMMCVX=$O(CVXMAP("B",IMMNAME,""))
 ...W:'$G(DIQUIET) "IMMCVX for this vaccine with a proper name is ",IMMCVX,!
 ...I IMMCVX="" D
 ....; If the CVX code is not found by the proper CVX code name, try the lookup in the CPTIMAP section by the
 ....; original name which are odd names in the Immunization file.
 ....; Once you have the CVX code, get the proper text from the CVX code from the CVX Map
 ....; Once a different method of storing the CVX-Immunization map is found, then this section will be replaced
 ....; CVXIMAP is specific a VistA instance.
 ....N CVXCODE,IMMNAME,IMMCVX,ADMDATE,CVXNAME
 ....S (CVXCODE,IMMNAME,IMMCVX,ADMDATE,CVXNAME)=""
 ....S IMMNAME=$G(G("results","immunizations",I,"immunization","name@value"))
 ....I IMMNAME="" S IMMNAME=$G(G("results","immunizations","immunization","name@value"))
 ....I IMMNAME="" D  Q
 ....W:'$G(DIQUIET) "The IMMNAME for this immunization without a proper name is ",IMMNAME,!
 ....S CVXCODE=$O(CVXIMAP("B",IMMNAME,""))
 ....W:'$G(DIQUIET) "The CVX code for this immunization without the proper name is ",CVXCODE,!
 ....S CVXNAME=CVXMAP(CVXCODE) 
 ....W:'$G(DIQUIET) "The proper name for this immunization is ",CVXNAME,!
 ....I CVXCODE="" D  Q
 .....; If there is still no CVX code found, record and error and quit
 .....S ZTXT=$G(G("results","immunizations",I,"immunization","id@value"))
 .....D OUTLOG("ERROR-Missing CVX or Incorrect Name for IEN="_ZTXT)
 ....E  D
 .....; Else, if you have found a CVX code, then write the XML to the array and QUIT
 .....S C0IPOA("CVXCode")=CVXCODE
 .....S C0IPOA("CVXName")=CVXNAME
 .....S C0IPOA("ORIGName")=$G(G("results","immunizations",I,"immunization","name@value"))
 .....S ADMDATE=$G(G("results","immunizations",I,"immunization","administered@value"))
 .....S C0IPOA("admDate")=$$FMDTOCDA^C0IUTIL(ADMDATE) ;S ^GPL("DATE",I)=ADMDATE
 .....D GETNMAP^C0IUTIL("WRK","TPAYOUTD^C0IVMR","C0IPOA")
 Q
 ;
OUTLOG(ZTXT) ; add text to the log
 I '$D(C0LOGLOC) S C0LOGLOC=$NA(^TMP("C0I",$J,"LOG"))
 N LN S LN=$O(@C0LOGLOC@(""),-1)+1
 S @C0LOGLOC@(LN)=ZTXT
 Q
 ;
TPAYOUTE
 ;;;fixed end portion of payload
 ;;</substanceAdministrationEvents>
 ;;</clinicalStatements>
 ;;</patient>
 ;;</vmrInput>
 ;;</ns4:cdsInput>
 Q
 ;
CPTMAP
 S CPTMAP(90281)=86
 S CPTMAP(90283)=87
 S CPTMAP(90287)=27
 S CPTMAP(90291)=29
 S CPTMAP(90296)=12
 S CPTMAP(90371)=30
 S CPTMAP(90375)=34
 S CPTMAP(90376)=34
 S CPTMAP(90378)=93
 S CPTMAP(90379)=71
 S CPTMAP(90389)=13
 S CPTMAP(90393)=79
 S CPTMAP(90396)=36
 S CPTMAP(90470)=128
 S CPTMAP(90476)=54
 S CPTMAP(90477)=55
 S CPTMAP(90581)=24
 S CPTMAP(90585)=19
 S CPTMAP(90632)=52
 S CPTMAP(90633)=83
 S CPTMAP(90634)=84
 S CPTMAP(90636)=104
 S CPTMAP(90644)=148
 S CPTMAP(90645)=47
 S CPTMAP(90646)=46
 S CPTMAP(90647)=49
 S CPTMAP(90648)=48
 S CPTMAP(90649)=62
 S CPTMAP(90650)=118
 S CPTMAP(90654)=144
 S CPTMAP(90655)=140
 S CPTMAP(90656)=140
 S CPTMAP(90657)=141
 S CPTMAP(90658)=141
 S CPTMAP(90659)=16
 S CPTMAP(90660)=111
 S CPTMAP(90661)=153
 S CPTMAP(90662)=135
 S CPTMAP(90663)=128
 S CPTMAP(90664)=125
 S CPTMAP(90665)=66
 S CPTMAP(90666)=126
 S CPTMAP(90668)=127
 S CPTMAP(90669)=100
 S CPTMAP(90670)=133
 S CPTMAP(90672)=149
 S CPTMAP(90673)=155
 S CPTMAP(90675)=18
 S CPTMAP(90676)=40
 S CPTMAP(90680)=116
 S CPTMAP(90681)=119
 S CPTMAP(90685)=150
 S CPTMAP(90686)=150
 S CPTMAP(90688)=158
 S CPTMAP(90690)=25
 S CPTMAP(90691)=101
 S CPTMAP(90692)=41
 S CPTMAP(90693)=53
 S CPTMAP(90696)=130
 S CPTMAP(90698)=120
 S CPTMAP(90700)=20
 S CPTMAP(90700)=106
 S CPTMAP(90701)=01
 S CPTMAP(90702)=28
 S CPTMAP(90703)=35
 S CPTMAP(90704)=07
 S CPTMAP(90705)=05
 S CPTMAP(90706)=06
 S CPTMAP(90707)=03
 S CPTMAP(90708)=04
 S CPTMAP(90710)=94
 S CPTMAP(90712)=02
 S CPTMAP(90713)=10
 S CPTMAP(90714)=113
 S CPTMAP(90714)=91
 S CPTMAP(90715)=115
 S CPTMAP(90716)=21
 S CPTMAP(90717)=37
 S CPTMAP(90718)=09
 S CPTMAP(90720)=22
 S CPTMAP(90721)=50
 S CPTMAP(90723)=110
 S CPTMAP(90724)=88
 S CPTMAP(90725)=26
 S CPTMAP(90726)=90
 S CPTMAP(90727)=23
 S CPTMAP(90728)=19
 S CPTMAP(90730)=85
 S CPTMAP(90731)=45
 S CPTMAP(90732)=33
 S CPTMAP(90733)=32
 S CPTMAP(90734)=136
 S CPTMAP(90734)=114
 S CPTMAP(90735)=39
 S CPTMAP(90736)=121
 S CPTMAP(90737)=17
 S CPTMAP(90738)=134
 S CPTMAP(90740)=44
 S CPTMAP(90741)=14
 S CPTMAP(90743)=43
 S CPTMAP(90744)=08
 S CPTMAP(90745)=42
 S CPTMAP(90746)=43
 S CPTMAP(90747)=44
 S CPTMAP(90748)=51  
 S CPTMAP(90749)=999
 Q
CVXMAP
 S CVXMAP(86)="IG"
 S CVXMAP(87)="IGIV"
 S CVXMAP(27)="botulinum antitoxin"
 S CVXMAP(29)="CMVIG"
 S CVXMAP(12)="diphtheria antitoxin"
 S CVXMAP(30)="HBIG"
 S CVXMAP(34)="RIG"
 S CVXMAP(34)="RIG"
 S CVXMAP(93)="RSV-MAb"
 S CVXMAP(71)="RSV-IGIV"
 S CVXMAP(13)="TIG"
 S CVXMAP(79)="vaccinia immune globulin"
 S CVXMAP(36)="VZIG"
 S CVXMAP(128)="Novel Influenza-H1N1-09, all formulations"
 S CVXMAP(54)="adenovirus, type 4"
 S CVXMAP(55)="adenovirus, type 7"
 S CVXMAP(24)="anthrax"
 S CVXMAP(19)="BCG"
 S CVXMAP(52)="Hep A, adult"
 S CVXMAP(83)="Hep A, ped/adol, 2 dose"
 S CVXMAP(84)="Hep A, ped/adol, 3 dose"
 S CVXMAP(104)="Hep A-Hep B"
 S CVXMAP(148)="Meningococcal C/Y-HIB PRP"
 S CVXMAP(47)="Hib (HbOC)"
 S CVXMAP(46)="Hib (PRP-D)"
 S CVXMAP(49)="Hib (PRP-OMP)"
 S CVXMAP(48)="Hib (PRP-T)"
 S CVXMAP(62)="HPV, quadrivalent"
 S CVXMAP(118)="HPV, bivalent"
 S CVXMAP(144)="influenza, seasonal, intradermal, preservative free"
 S CVXMAP(140)="Influenza, seasonal, injectable, preservative free"
 S CVXMAP(140)="Influenza, seasonal, injectable, preservative free"
 S CVXMAP(141)="Influenza, seasonal, injectable"
 S CVXMAP(141)="Influenza, seasonal, injectable"
 S CVXMAP(16)="influenza, whole"
 S CVXMAP(111)="influenza, live, intranasal"
 S CVXMAP(153)="Influenza, injectable, MDCK, preservative free"
 S CVXMAP(135)="Influenza, high dose seasonal"
 S CVXMAP(128)="Novel Influenza-H1N1-09, all formulations"
 S CVXMAP(125)="Novel Influenza-H1N1-09, nasal"
 S CVXMAP(66)="Lyme disease"
 S CVXMAP(126)="Novel influenza-H1N1-09, preservative-free"
 S CVXMAP(127)="Novel influenza-H1N1-09"
 S CVXMAP(100)="pneumococcal conjugate PCV 7"
 S CVXMAP(133)="Pneumococcal conjugate PCV 13"
 S CVXMAP(149)="influenza, live, intranasal, quadrivalent"
 S CVXMAP(155)="influenza, recombinant, injectable, preservative free"
 S CVXMAP(18)="rabies, intramuscular injection"
 S CVXMAP(40)="rabies, intradermal injection"
 S CVXMAP(116)="rotavirus, pentavalent"
 S CVXMAP(119)="rotavirus, monovalent"
 S CVXMAP(150)="influenza, injectable, quadrivalent, preservative free"
 S CVXMAP(150)="influenza, injectable, quadrivalent, preservative free"
 S CVXMAP(158)="influenza, injectable, quadrivalent"
 S CVXMAP(25)="typhoid, oral"
 S CVXMAP(101)="typhoid, ViCPs"
 S CVXMAP(41)="typhoid, parenteral"
 S CVXMAP(53)="typhoid, parenteral, AKD (U.S. military)"
 S CVXMAP(130)="DTaP-IPV"
 S CVXMAP(120)="DTaP-Hib-IPV"
 S CVXMAP(20)="DTaP"
 S CVXMAP(106)="DTaP, 5 pertussis antigens"
 S CVXMAP(01)="DTP"
 S CVXMAP(28)="DT (pediatric)"
 S CVXMAP(35)="tetanus toxoid, adsorbed"
 S CVXMAP(07)="mumps"
 S CVXMAP(05)="measles"
 S CVXMAP(06)="rubella"
 S CVXMAP(03)="MMR"
 S CVXMAP(04)="M/R"
 S CVXMAP(94)="MMRV"
 S CVXMAP(02)="OPV"
 S CVXMAP(10)="IPV"
 S CVXMAP(113)="Td (adult) preservative free"
 S CVXMAP(91)="typhoid, unspecified formulation"
 S CVXMAP(115)="Tdap"
 S CVXMAP(21)="varicella"
 S CVXMAP(37)="yellow fever"
 S CVXMAP(09)="Td (adult), adsorbed"
 S CVXMAP(22)="DTP-Hib"
 S CVXMAP(50)="DTaP-Hib"
 S CVXMAP(110)="DTaP-Hep B-IPV"
 S CVXMAP(88)="influenza, unspecified formulation"
 S CVXMAP(26)="cholera"
 S CVXMAP(90)="rabies, unspecified formulation"
 S CVXMAP(23)="plague"
 S CVXMAP(19)="BCG"
 S CVXMAP(85)="Hep A, unspecified formulation"
 S CVXMAP(45)="Hep B, unspecified formulation"
 S CVXMAP(33)="pneumococcal polysaccharide PPV23"
 S CVXMAP(32)="meningococcal MPSV4"
 S CVXMAP(136)="Meningococcal MCV4O"
 S CVXMAP(114)="meningococcal MCV4P"
 S CVXMAP(39)="Japanese encephalitis SC"
 S CVXMAP(121)="zoster"
 S CVXMAP(17)="Hib, unspecified formulation"
 S CVXMAP(134)="Japanese Encephalitis IM"
 S CVXMAP(44)="Hep B, dialysis"
 S CVXMAP(14)="IG, unspecified formulation"
 S CVXMAP(43)="Hep B, adult"
 S CVXMAP(08)="Hep B, adolescent or pediatric"
 S CVXMAP(42)="Hep B, adolescent/high risk infant"
 S CVXMAP(43)="Hep B, adult"
 S CVXMAP(44)="Hep B, dialysis"
 S CVXMAP(51)="Hib-Hep B"
 S CVXMAP(999)="unknown"
 S CVXMAP("B","IG",86)=""
 S CVXMAP("B","IGIV",87)=""
 S CVXMAP("B","botulinum antitoxin",27)=""
 S CVXMAP("B","CMVIG",29)=""
 S CVXMAP("B","diphtheria antitoxin",12)=""
 S CVXMAP("B","HBIG",30)=""
 S CVXMAP("B","RIG",34)=""
 S CVXMAP("B","RIG",34)=""
 S CVXMAP("B","RSV-MAb",93)=""
 S CVXMAP("B","RSV-IGIV",71)=""
 S CVXMAP("B","TIG",13)=""
 S CVXMAP("B","vaccinia immune globulin",79)=""
 S CVXMAP("B","VZIG",36)=""
 S CVXMAP("B","Novel Influenza-H1N1-09, all formulations",128)=""
 S CVXMAP("B","adenovirus, type 4",54)=""
 S CVXMAP("B","adenovirus, type 7",55)=""
 S CVXMAP("B","anthrax",24)=""
 S CVXMAP("B","BCG",19)=""
 S CVXMAP("B","Hep A, adult",52)=""
 S CVXMAP("B","Hep A, ped/adol, 2 dose",83)=""
 S CVXMAP("B","Hep A, ped/adol, 3 dose",84)=""
 S CVXMAP("B","Hep A-Hep B",104)=""
 S CVXMAP("B","Meningococcal C/Y-HIB PRP",148)=""
 S CVXMAP("B","Hib (HbOC)",47)=""
 S CVXMAP("B","Hib (PRP-D)",46)=""
 S CVXMAP("B","Hib (PRP-OMP)",49)=""
 S CVXMAP("B","Hib (PRP-T)",48)=""
 S CVXMAP("B","HPV, quadrivalent",62)=""
 S CVXMAP("B","HPV, bivalent",118)=""
 S CVXMAP("B","influenza, seasonal, intradermal, preservative free",144)=""
 S CVXMAP("B","Influenza, seasonal, injectable, preservative free",140)=""
 S CVXMAP("B","Influenza, seasonal, injectable, preservative free",140)=""
 S CVXMAP("B","Influenza, seasonal, injectable",141)=""
 S CVXMAP("B","Influenza, seasonal, injectable",141)=""
 S CVXMAP("B","influenza, whole",16)=""
 S CVXMAP("B","influenza, live, intranasal",111)=""
 S CVXMAP("B","Influenza, injectable, MDCK, preservative free",153)=""
 S CVXMAP("B","Influenza, high dose seasonal",135)=""
 S CVXMAP("B","Novel Influenza-H1N1-09, all formulations",128)=""
 S CVXMAP("B","Novel Influenza-H1N1-09, nasal",125)=""
 S CVXMAP("B","Lyme disease",66)=""
 S CVXMAP("B","Novel influenza-H1N1-09, preservative-free",126)=""
 S CVXMAP("B","Novel influenza-H1N1-09",127)=""
 S CVXMAP("B","pneumococcal conjugate PCV 7",100)=""
 S CVXMAP("B","Pneumococcal conjugate PCV 13",133)=""
 S CVXMAP("B","influenza, live, intranasal, quadrivalent",149)=""
 S CVXMAP("B","influenza, recombinant, injectable, preservative free",155)=""
 S CVXMAP("B","rabies, intramuscular injection",18)=""
 S CVXMAP("B","rabies, intradermal injection",40)=""
 S CVXMAP("B","rotavirus, pentavalent",116)=""
 S CVXMAP("B","rotavirus, monovalent",119)=""
 S CVXMAP("B","influenza, injectable, quadrivalent, preservative free",150)=""
 S CVXMAP("B","influenza, injectable, quadrivalent, preservative free",150)=""
 S CVXMAP("B","influenza, injectable, quadrivalent",158)=""
 S CVXMAP("B","typhoid, oral",25)=""
 S CVXMAP("B","typhoid, ViCPs",101)=""
 S CVXMAP("B","typhoid, parenteral",41)=""
 S CVXMAP("B","typhoid, parenteral, AKD (U.S. military)",53)=""
 S CVXMAP("B","DTaP-IPV",130)=""
 S CVXMAP("B","DTaP-Hib-IPV",120)=""
 S CVXMAP("B","DTaP",20)=""
 S CVXMAP("B","DTaP, 5 pertussis antigens",106)=""
 S CVXMAP("B","DTP",01)=""
 S CVXMAP("B","DT (pediatric)",28)=""
 S CVXMAP("B","tetanus toxoid, adsorbed",35)=""
 S CVXMAP("B","mumps",07)=""
 S CVXMAP("B","measles",05)=""
 S CVXMAP("B","rubella",06)=""
 S CVXMAP("B","MMR",03)=""
 S CVXMAP("B","M/R",04)=""
 S CVXMAP("B","MMRV",94)=""
 S CVXMAP("B","OPV",02)=""
 S CVXMAP("B","IPV",10)=""
 S CVXMAP("B","Td (adult) preservative free",113)=""
 S CVXMAP("B","typhoid, unspecified formulation",91)=""
 S CVXMAP("B","Tdap",115)=""
 S CVXMAP("B","varicella",21)=""
 S CVXMAP("B","yellow fever",37)=""
 S CVXMAP("B","Td (adult), adsorbed",09)=""
 S CVXMAP("B","DTP-Hib",22)=""
 S CVXMAP("B","DTaP-Hib",50)=""
 S CVXMAP("B","DTaP-Hep B-IPV",110)=""
 S CVXMAP("B","influenza, unspecified formulation",88)=""
 S CVXMAP("B","cholera",26)=""
 S CVXMAP("B","rabies, unspecified formulation",90)=""
 S CVXMAP("B","plague",23)=""
 S CVXMAP("B","BCG",19)=""
 S CVXMAP("B","Hep A, unspecified formulation",85)=""
 S CVXMAP("B","Hep B, unspecified formulation",45)=""
 S CVXMAP("B","pneumococcal polysaccharide PPV23",33)=""
 S CVXMAP("B","meningococcal MPSV4",32)=""
 S CVXMAP("B","Meningococcal MCV4O",136)=""
 S CVXMAP("B","meningococcal MCV4P",114)=""
 S CVXMAP("B","Japanese encephalitis SC",39)=""
 S CVXMAP("B","zoster",121)=""
 S CVXMAP("B","Hib, unspecified formulation",17)=""
 S CVXMAP("B","Japanese Encephalitis IM",134)=""
 S CVXMAP("B","Hep B, dialysis",44)=""
 S CVXMAP("B","IG, unspecified formulation",14)=""
 S CVXMAP("B","Hep B, adult",43)=""
 S CVXMAP("B","Hep B, adolescent or pediatric",08)=""
 S CVXMAP("B","Hep B, adolescent/high risk infant",42)=""
 S CVXMAP("B","Hep B, adult",43)=""
 S CVXMAP("B","Hep B, dialysis",44)=""
 S CVXMAP("B","Hib-Hep B",51)=""
 S CVXMAP("B","unknown",999)=""
 Q
 ;
CPTIMAP
 S CPTIMAP(90724)="INFLUENZA"
 S CPTIMAP(90744)="HEPB PED/ADOL-1"
 S CPTIMAP(90744)="HEPB PED/ADOL-2"
 S CPTIMAP(90744)="HEPB PED/ADOL-3"
 S CPTIMAP(90744)="HEPB PED/ADOL-4"
 S CPTIMAP(90701)="DIP.PERT.TET. (DPT) PED 1"
 S CPTIMAP(90701)="DIP.PERT.TET. (DPT) PED 2"
 S CPTIMAP(90701)="DIP.PERT.TET. (DPT) PED 3"
 S CPTIMAP(90701)="DIP.PERT.TET. (DPT) PED 4"
 S CPTIMAP(90701)="DIP.PERT.TET. (DPT) PED 5"
 S CPTIMAP(90645)="HIB PED 1"
 S CPTIMAP(90645)="HIB PED 2"
 S CPTIMAP(90645)="HIB PED 3"
 S CPTIMAP(90645)="HIB PED 4"
 S CPTIMAP(90707)="MEASLESMUMPSRUBELLA PED #1"
 S CPTIMAP(90707)="MEASLESMUMPSRUBELLA PED #2"
 S CPTIMAP(90713)="POLIOVIRUS PED #1"
 S CPTIMAP(90713)="POLIOVIRUS PED #2"
 S CPTIMAP(90713)="POLIOVIRUS PED #3"
 S CPTIMAP(90713)="POLIOVIRUS PED #4"
 S CPTIMAP(90670)="PNEUMOCOCCAL PED 1"
 S CPTIMAP(90670)="PNEUMOCOCCAL PED 2"
 S CPTIMAP(90670)="PNEUMOCOCCAL PED 3"
 S CPTIMAP(90670)="PNEUMOCOCCAL PED 4"
 S CPTIMAP(90701)="DIPPERTTET (DPT)"
 S CPTIMAP(90701)="DIPPERTTET (DPT) PED 1"
 S CPTIMAP(90701)="DIPPERTTET (DPT) PED 2"
 S CPTIMAP(90701)="DIPPERTTET (DPT) PED 3"
 S CPTIMAP(90701)="DIPPERTTET (DPT) PED 4"
 S CPTIMAP(90701)="DIPPERTTET (DPT) PED 5"
 S CPTIMAP(90732)="PNEUMOVAX"
 S CPTIMAP(90715)="TETANUS DIPTHERIA AND PERTUSSIS"
 S CPTIMAP(90634)="HEP B PED/ADOL 3 DOSE"
 S CPTIMAP(90633)="HEP A2 PEDS"
 S CPTIMAP(90633)="HEP A1 PEDS"
 S CPTIMAP(90680)="RV 1 PEDS"
 S CPTIMAP(90680)="RV 2 PEDS"
 S CPTIMAP(90680)="RV 3 PEDS"
 S CPTIMAP(90647)="HiB1"
 S CPTIMAP(90647)="HiB2"
 S CPTIMAP(90647)="HiB3"
 S CPTIMAP(90669)="PCV1 PEDS"
 S CPTIMAP(90669)="PCV2 PEDS"
 S CPTIMAP(90669)="PCV3 PEDS"
 S CPTIMAP(90669)="PCV4 PEDS"
 S CPTIMAP(90669)="PCV5 PEDS"
 S CPTIMAP(90716)="VZV1 INFANT"
 S CPTIMAP(90716)="VZV2 INFANT"
 S CPTIMAP(90744)="HEP B1 INFANT"
 S CPTIMAP(90744)="HEP B2 INFANT"
 S CPTIMAP(90744)="HEP B3 INFANT"
 S CPTIMAP(90744)="HEP B4 INFANT"
 S CPTIMAP(90707)="MMR1"
 S CPTIMAP(90713)="IPV1"
 S CPTIMAP(90713)="IPV2"
 S CPTIMAP(90713)="IPV3"
 S CPTIMAP(90713)="IPV4"
 S CPTIMAP(90700)="DTaP1"
 S CPTIMAP(90700)="DTaP2"
 S CPTIMAP(90700)="DTaP3"
 S CPTIMAP(90700)="DTaP4"
 S CPTIMAP(90700)="DTaP5"
 S CPTIMAP(90634)="HEP A3 PEDS"
 S CPTIMAP(90658)="FLU,3 YRS"
 S CPTIMAP("B","INFLUENZA",90724)=""
 S CPTIMAP("B","HEPB, PED/ADOL-1",90744)=""
 S CPTIMAP("B","HEPB PED/ADOL-2",90744)=""
 S CPTIMAP("B","HEPB PED/ADOL-3",90744)=""
 S CPTIMAP("B","HEPB PED/ADOL-4",90744)=""
 S CPTIMAP("B","DIP.,PERT.,TET. (DPT) PED 1",90701)=""
 S CPTIMAP("B","DIP.,PERT.,TET. (DPT) PED 2",90701)=""
 S CPTIMAP("B","DIP.,PERT.,TET. (DPT) PED 3",90701)=""
 S CPTIMAP("B","DIP.,PERT.,TET. (DPT) PED 4",90701)=""
 S CPTIMAP("B","DIP.,PERT.,TET. (DPT) PED 5",90701)=""
 S CPTIMAP("B","HIB PED 1",90645)=""
 S CPTIMAP("B","HIB PED 2",90645)=""
 S CPTIMAP("B","HIB PED 3",90645)=""
 S CPTIMAP("B","HIB PED 4",90645)=""
 S CPTIMAP("B","MEASLES,MUMPS,RUBELLA PED #1",90707)=""
 S CPTIMAP("B","MEASLES,MUMPS,RUBELLA PED #2",90707)=""
 S CPTIMAP("B","POLIOVIRUS PED #1",90713)=""
 S CPTIMAP("B","POLIOVIRUS PED #2",90713)=""
 S CPTIMAP("B","POLIOVIRUS PED #3",90713)=""
 S CPTIMAP("B","POLIOVIRUS PED #4",90713)=""
 S CPTIMAP("B","PNEUMOCOCCAL PED 1",90670)=""
 S CPTIMAP("B","PNEUMOCOCCAL PED 2",90670)=""
 S CPTIMAP("B","PNEUMOCOCCAL PED 3",90670)=""
 S CPTIMAP("B","PNEUMOCOCCAL PED 4",90670)=""
 S CPTIMAP("B","DIP,PERT,TET (DPT)",90701)=""
 S CPTIMAP("B","DIP,PERT,TET (DPT) PED 1",90701)=""
 S CPTIMAP("B","DIP,PERT,TET (DPT) PED 2",90701)=""
 S CPTIMAP("B","DIP,PERT,TET (DPT) PED 3",90701)=""
 S CPTIMAP("B","DIP,PERT,TET (DPT) PED 4",90701)=""
 S CPTIMAP("B","DIP,PERT,TET (DPT) PED 5",90701)=""
 S CPTIMAP("B","PNEUMOVAX",90732)=""
 S CPTIMAP("B","TETANUS, DIPTHERIA AND PERTUSSIS",90715)=""
 S CPTIMAP("B","HEP B PED/ADOL 3 DOSE",90634)=""
 S CPTIMAP("B","HEP A2 PEDS",90633)=""
 S CPTIMAP("B","HEP A1 PEDS",90633)=""
 S CPTIMAP("B","RV 1 PEDS",90680)=""
 S CPTIMAP("B","RV 2 PEDS",90680)=""
 S CPTIMAP("B","RV 3 PEDS",90680)=""
 S CPTIMAP("B","HiB1",90647)=""
 S CPTIMAP("B","HiB2",90647)=""
 S CPTIMAP("B","HiB3",90647)=""
 S CPTIMAP("B","PCV1 PEDS",90669)=""
 S CPTIMAP("B","PCV2 PEDS",90669)=""
 S CPTIMAP("B","PCV3 PEDS",90669)=""
 S CPTIMAP("B","PCV4 PEDS",90669)=""
 S CPTIMAP("B","PCV5 PEDS",90669)=""
 S CPTIMAP("B","VZV1 INFANT",90716)=""
 S CPTIMAP("B","VZV2 INFANT",90716)=""
 S CPTIMAP("B","HEP B1 INFANT",90744)=""
 S CPTIMAP("B","HEP B2 INFANT",90744)=""
 S CPTIMAP("B","HEP B3 INFANT",90744)=""
 S CPTIMAP("B","HEP B4 INFANT",90744)=""
 S CPTIMAP("B","MMR1",90707)=""
 S CPTIMAP("B","IPV1",90713)=""
 S CPTIMAP("B","IPV2",90713)=""
 S CPTIMAP("B","IPV3",90713)=""
 S CPTIMAP("B","IPV4",90713)=""
 S CPTIMAP("B","DTaP1",90700)=""
 S CPTIMAP("B","DTaP2",90700)=""
 S CPTIMAP("B","DTaP3",90700)=""
 S CPTIMAP("B","DTaP4",90700)=""
 S CPTIMAP("B","DTaP5",90700)=""
 S CPTIMAP("B","HEP A3 PEDS",90634)=""
 S CPTIMAP("B","FLU,3 YRS",90658)=""
 Q
 ;
CVXIMAP 
 S CVXIMAP(75)="SMALLPOX"
 S CVXIMAP(09)="TETANUS DIPTHERIA (TD-ADULT)"
 S CVXIMAP(01)="DIP.,PERT.,TET. (DPT)"
 S CVXIMAP(35)="TETANUS TOXOID"
 S CVXIMAP(91)="TYPHOID"
 S CVXIMAP(02)="ORAL POLIOVIRUS"
 S CVXIMAP(43)="SWINE FLU BIVAL"
 S CVXIMAP(45)="HEPATITIS B"
 S CVXIMAP(05)="MEASLES"
 S CVXIMAP(88)="INFLUENZA"
 S CVXIMAP(26)="CHOLERA"
 S CVXIMAP(06)="RUBELLA"
 S CVXIMAP(07)="MUMPS"
 S CVXIMAP(19)="BCG"
 S CVXIMAP(03)="MEASLES,MUMPS,RUBELLA (MMR)"
 S CVXIMAP(04)="MEASLES,RUBELLA (MR)"
 S CVXIMAP(33)="PNEUMOCOCCAL"
 S CVXIMAP(37)="YELLOW FEVER"
 S CVXIMAP(131)="TYPHUS"
 S CVXIMAP(90)="RABIES"
 S CVXIMAP(28)="DIPTHERIA-TETANUS (DT-PEDS)"
 S CVXIMAP(17)="INFLUENZA B"
 S CVXIMAP(85)="HEPATITIS A"
 S CVXIMAP(32)="MENINGOCOCCAL"
 S CVXIMAP(39)="ENCEPHALITIS"
 S CVXIMAP(21)="CHICKENPOX"
 S CVXIMAP(106)="DIP-TET-a/PERT"
 S CVXIMAP(38)="RUBELLA, MUMPS"
 S CVXIMAP(22)="DTB/HIB"
 S CVXIMAP(94)="MEA-MUMPS-RUB-VARCELLA"
 S CVXIMAP(23)="PLAGUE"
 S CVXIMAP(14)="GAMMA GLOBULIN"
 S CVXIMAP(54)="ADENOVIRUS,TYPE 4"
 S CVXIMAP(55)="ADENOVIRUS,TYPE 7"
 S CVXIMAP(24)="ANTHRAX,SC"
 S CVXIMAP(19)="BCG,PERCUT"
 S CVXIMAP(26)="CHOLERA, ORAL"
 S CVXIMAP(52)="HEPA ADULT"
 S CVXIMAP(83)="HEPA,PED/ADOL-2"
 S CVXIMAP(84)="HEPA,PED/ADOL-3 DOSE"
 S CVXIMAP(104)="HEPA/HEPB ADULT"
 S CVXIMAP(47)="HIB,HBOC"
 S CVXIMAP(46)="HIB,PRP-D"
 S CVXIMAP(49)="HIB,PRP-OMP"
 S CVXIMAP(48)="HIB,PRP-T"
 S CVXIMAP(141)="FLU,3 YRS"
 S CVXIMAP(16)="FLU,WHOLE"
 S CVXIMAP(111)="FLU,NASAL"
 S CVXIMAP(66)="LYME DISEASE"
 S CVXIMAP(100)="PNEUMOCOCCAL,PED"
 S CVXIMAP(18)="RABIES,IM"
 S CVXIMAP(40)="RABIES,ID"
 S CVXIMAP(116)="ROTOVIRUS,ORAL"
 S CVXIMAP(25)="TYPHOID,ORAL"
 S CVXIMAP(101)="TYPHOID"
 S CVXIMAP(41)="TYPHOID,H-P,SC/ID"
 S CVXIMAP(53)="TYPHOID,AKD,SC"
 S CVXIMAP(44)="HEPB, ILL PAT"
 S CVXIMAP(51)="HEPB/HIB"
 S CVXIMAP(08)="HEPB, PED/ADOL-1"
 S CVXIMAP(08)="HEPB PED/ADOL-2"
 S CVXIMAP(08)="HEPB PED/ADOL-3"
 S CVXIMAP(08)="HEPB PED/ADOL-4"
 S CVXIMAP(20)="DIP.,PERT.,TET. (DPT) PED 1"
 S CVXIMAP(20)="DIP.,PERT.,TET. (DPT) PED 2"
 S CVXIMAP(20)="DIP.,PERT.,TET. (DPT) PED 3"
 S CVXIMAP(20)="DIP.,PERT.,TET. (DPT) PED 4"
 S CVXIMAP(20)="DIP.,PERT.,TET. (DPT) PED 5"
 S CVXIMAP(47)="HIB PED 1"
 S CVXIMAP(47)="HIB PED 2"
 S CVXIMAP(47)="HIB PED 3"
 S CVXIMAP(47)="HIB PED 4"
 S CVXIMAP(03)="MEASLES,MUMPS,RUBELLA PED #1"
 S CVXIMAP(03)="MEASLES,MUMPS,RUBELLA PED #2"
 S CVXIMAP(10)="POLIOVIRUS PED #1"
 S CVXIMAP(10)="POLIOVIRUS PED #2"
 S CVXIMAP(10)="POLIOVIRUS PED #3"
 S CVXIMAP(10)="POLIOVIRUS PED #4"
 S CVXIMAP(100)="PNEUMOCOCCAL PED 1"
 S CVXIMAP(100)="PNEUMOCOCCAL PED 2"
 S CVXIMAP(100)="PNEUMOCOCCAL PED 3"
 S CVXIMAP(100)="PNEUMOCOCCAL PED 4"
 S CVXIMAP(01)="DIP,PERT,TET (DPT)"
 S CVXIMAP(106)="DIP,PERT,TET (DPT) PED 1"
 S CVXIMAP(106)="DIP,PERT,TET (DPT) PED 2"
 S CVXIMAP(106)="DIP,PERT,TET (DPT) PED 3"
 S CVXIMAP(106)="DIP,PERT,TET (DPT) PED 4"
 S CVXIMAP(106)="DIP,PERT,TET (DPT) PED 5"
 S CVXIMAP(33)="PNEUMOVAX"
 S CVXIMAP(115)="TETANUS, DIPTHERIA AND PERTUSSIS"
 S CVXIMAP(08)="HEP B PED/ADOL 3 DOSE"
 S CVXIMAP(106)="DTaP1"
 S CVXIMAP(106)="DTaP2"
 S CVXIMAP(106)="DTaP3"
 S CVXIMAP(106)="DTaP4"
 S CVXIMAP(106)="DTaP5"
 S CVXIMAP(83)="HEP A1 PEDS"
 S CVXIMAP(83)="HEP A2 PEDS"
 S CVXIMAP(84)="HEP A3 PEDS"
 S CVXIMAP(42)="HEP B1 INFANT"
 S CVXIMAP(42)="HEP B2 INFANT"
 S CVXIMAP(42)="HEP B3 INFANT"
 S CVXIMAP(42)="HEP B4 INFANT"
 S CVXIMAP(49)="HiB1"
 S CVXIMAP(49)="HiB2"
 S CVXIMAP(49)="HiB3"
 S CVXIMAP(10)="IPV1"
 S CVXIMAP(10)="IPV2"
 S CVXIMAP(10)="IPV3"
 S CVXIMAP(10)="IPV4"
 S CVXIMAP(03)="MMR1"
 S CVXIMAP(133)="PCV1 PEDS"
 S CVXIMAP(133)="PCV2 PEDS"
 S CVXIMAP(133)="PCV3 PEDS"
 S CVXIMAP(133)="PCV4 PEDS"
 S CVXIMAP(133)="PCV5 PEDS"
 S CVXIMAP(116)="RV 1 PEDS"
 S CVXIMAP(116)="RV 2 PEDS"
 S CVXIMAP(116)="RV 3 PEDS"
 S CVXIMAP(116)="RV 4 PEDS"
 S CVXIMAP(21)="VZV1 INFANT"
 S CVXIMAP(21)="VZV2 INFANT"
 S CVXIMAP(141)="FLU,3 YRS"
 S CVXIMAP("B","SMALLPOX",75)=""
 S CVXIMAP("B","TETANUS DIPTHERIA (TD-ADULT)",09)=""
 S CVXIMAP("B","DIP.,PERT.,TET. (DPT)",01)=""
 S CVXIMAP("B","TETANUS TOXOID",35)=""
 S CVXIMAP("B","TYPHOID",91)=""
 S CVXIMAP("B","ORAL POLIOVIRUS",02)=""
 S CVXIMAP("B","SWINE FLU BIVAL",43)=""
 S CVXIMAP("B","HEPATITIS B",45)=""
 S CVXIMAP("B","MEASLES",05)=""
 S CVXIMAP("B","INFLUENZA",88)=""
 S CVXIMAP("B","CHOLERA",26)=""
 S CVXIMAP("B","RUBELLA",06)=""
 S CVXIMAP("B","MUMPS",07)=""
 S CVXIMAP("B","BCG",19)=""
 S CVXIMAP("B","MEASLES,MUMPS,RUBELLA (MMR)",03)=""
 S CVXIMAP("B","MEASLES,RUBELLA (MR)",04)=""
 S CVXIMAP("B","PNEUMOCOCCAL",33)=""
 S CVXIMAP("B","YELLOW FEVER",37)=""
 S CVXIMAP("B","TYPHUS",131)=""
 S CVXIMAP("B","RABIES",90)=""
 S CVXIMAP("B","DIPTHERIA-TETANUS (DT-PEDS)",28)=""
 S CVXIMAP("B","INFLUENZA B",17)=""
 S CVXIMAP("B","HEPATITIS A",85)=""
 S CVXIMAP("B","MENINGOCOCCAL",32)=""
 S CVXIMAP("B","ENCEPHALITIS",39)=""
 S CVXIMAP("B","CHICKENPOX",21)=""
 S CVXIMAP("B","DIP-TET-a/PERT",106)=""
 S CVXIMAP("B","RUBELLA, MUMPS",38)=""
 S CVXIMAP("B","DTB/HIB",22)=""
 S CVXIMAP("B","MEA-MUMPS-RUB-VARCELLA",94)=""
 S CVXIMAP("B","PLAGUE",23)=""
 S CVXIMAP("B","GAMMA GLOBULIN",14)=""
 S CVXIMAP("B","ADENOVIRUS,TYPE 4",54)=""
 S CVXIMAP("B","ADENOVIRUS,TYPE 7",55)=""
 S CVXIMAP("B","ANTHRAX,SC",24)=""
 S CVXIMAP("B","BCG,PERCUT",19)=""
 S CVXIMAP("B","CHOLERA, ORAL",26)=""
 S CVXIMAP("B","HEPA ADULT",52)=""
 S CVXIMAP("B","HEPA,PED/ADOL-2",83)=""
 S CVXIMAP("B","HEPA,PED/ADOL-3 DOSE",84)=""
 S CVXIMAP("B","HEPA/HEPB ADULT",104)=""
 S CVXIMAP("B","HIB,HBOC",47)=""
 S CVXIMAP("B","HIB,PRP-D",46)=""
 S CVXIMAP("B","HIB,PRP-OMP",49)=""
 S CVXIMAP("B","HIB,PRP-T",48)=""
 S CVXIMAP("B","FLU,3 YRS",141)=""
 S CVXIMAP("B","FLU,WHOLE",16)=""
 S CVXIMAP("B","FLU,NASAL",111)=""
 S CVXIMAP("B","LYME DISEASE",66)=""
 S CVXIMAP("B","PNEUMOCOCCAL,PED",100)=""
 S CVXIMAP("B","RABIES,IM",18)=""
 S CVXIMAP("B","RABIES,ID",40)=""
 S CVXIMAP("B","ROTOVIRUS,ORAL",116)=""
 S CVXIMAP("B","TYPHOID,ORAL",25)=""
 S CVXIMAP("B","TYPHOID",101)=""
 S CVXIMAP("B","TYPHOID,H-P,SC/ID",41)=""
 S CVXIMAP("B","TYPHOID,AKD,SC",53)=""
 S CVXIMAP("B","HEPB, ILL PAT",44)=""
 S CVXIMAP("B","HEPB/HIB",51)=""
 S CVXIMAP("B","HEPB, PED/ADOL-1",08)=""
 S CVXIMAP("B","HEPB PED/ADOL-2",08)=""
 S CVXIMAP("B","HEPB PED/ADOL-3",08)=""
 S CVXIMAP("B","HEPB PED/ADOL-4",08)=""
 S CVXIMAP("B","DIP.,PERT.,TET. (DPT) PED 1",20)=""
 S CVXIMAP("B","DIP.,PERT.,TET. (DPT) PED 2",20)=""
 S CVXIMAP("B","DIP.,PERT.,TET. (DPT) PED 3",20)=""
 S CVXIMAP("B","DIP.,PERT.,TET. (DPT) PED 4",20)=""
 S CVXIMAP("B","DIP.,PERT.,TET. (DPT) PED 5",20)=""
 S CVXIMAP("B","HIB PED 1",47)=""
 S CVXIMAP("B","HIB PED 2",47)=""
 S CVXIMAP("B","HIB PED 3",47)=""
 S CVXIMAP("B","HIB PED 4",47)=""
 S CVXIMAP("B","MEASLES,MUMPS,RUBELLA PED #1",03)=""
 S CVXIMAP("B","MEASLES,MUMPS,RUBELLA PED #2",03)=""
 S CVXIMAP("B","POLIOVIRUS PED #1",10)=""
 S CVXIMAP("B","POLIOVIRUS PED #2",10)=""
 S CVXIMAP("B","POLIOVIRUS PED #3",10)=""
 S CVXIMAP("B","POLIOVIRUS PED #4",10)=""
 S CVXIMAP("B","PNEUMOCOCCAL PED 1",100)=""
 S CVXIMAP("B","PNEUMOCOCCAL PED 2",100)=""
 S CVXIMAP("B","PNEUMOCOCCAL PED 3",100)=""
 S CVXIMAP("B","PNEUMOCOCCAL PED 4",100)=""
 S CVXIMAP("B","DIP,PERT,TET (DPT)",01)=""
 S CVXIMAP("B","DIP,PERT,TET (DPT) PED 1",106)=""
 S CVXIMAP("B","DIP,PERT,TET (DPT) PED 2",106)=""
 S CVXIMAP("B","DIP,PERT,TET (DPT) PED 3",106)=""
 S CVXIMAP("B","DIP,PERT,TET (DPT) PED 4",106)=""
 S CVXIMAP("B","DIP,PERT,TET (DPT) PED 5",106)=""
 S CVXIMAP("B","PNEUMOVAX",33)=""
 S CVXIMAP("B","TETANUS, DIPTHERIA AND PERTUSSIS",115)=""
 S CVXIMAP("B","HEP B PED/ADOL 3 DOSE",08)=""
 S CVXIMAP("B","DTaP1",106)=""
 S CVXIMAP("B","DTaP2",106)=""
 S CVXIMAP("B","DTaP3",106)=""
 S CVXIMAP("B","DTaP4",106)=""
 S CVXIMAP("B","DTaP5",106)=""
 S CVXIMAP("B","HEP A1 PEDS",83)=""
 S CVXIMAP("B","HEP A2 PEDS",83)=""
 S CVXIMAP("B","HEP A3 PEDS",84)=""
 S CVXIMAP("B","HEP B1 INFANT",42)=""
 S CVXIMAP("B","HEP B2 INFANT",42)=""
 S CVXIMAP("B","HEP B3 INFANT",42)=""
 S CVXIMAP("B","HEP B4 INFANT",42)=""
 S CVXIMAP("B","HiB1",49)=""
 S CVXIMAP("B","HiB2",49)=""
 S CVXIMAP("B","HiB3",49)=""
 S CVXIMAP("B","IPV1",10)=""
 S CVXIMAP("B","IPV2",10)=""
 S CVXIMAP("B","IPV3",10)=""
 S CVXIMAP("B","IPV4",10)=""
 S CVXIMAP("B","MMR1",03)=""
 S CVXIMAP("B","PCV1 PEDS",133)=""
 S CVXIMAP("B","PCV2 PEDS",133)=""
 S CVXIMAP("B","PCV3 PEDS",133)=""
 S CVXIMAP("B","PCV4 PEDS",133)=""
 S CVXIMAP("B","PCV5 PEDS",133)=""
 S CVXIMAP("B","RV 1 PEDS",116)=""
 S CVXIMAP("B","RV 2 PEDS",116)=""
 S CVXIMAP("B","RV 3 PEDS",116)=""
 S CVXIMAP("B","RV 4 PEDS",116)=""
 S CVXIMAP("B","VZV1 INFANT",21)=""
 S CVXIMAP("B","VZV2 INFANT",21)=""
 S CVXIMAP("B","FLU,3 YRS",141)=""
 Q
 ;
ALLMAP ; 
 ; create a single map out the above maps
 N CVX,MAP
 S CVX=""
 D CPTMAP
 D CVXMAP
 D CPTIMAP
 D CVXIMAP
 S MAP=$NA(^C0CodeMap("immunizations"))
 K @MAP
 F  S CVX=$O(CVXMAP(CVX)) Q:+CVX=0  D  ;
 . S @MAP@(CVX,"preferredName")=CVXMAP(CVX)
 . S @MAP@(CVX,"CVXcode")=CVX
 . S @MAP@("B",CVXMAP(CVX),CVX)=""
 . D:$G(CVXIMAP(CVX))'="" 
 . . S @MAP@(CVX,"altName",1)=CVXIMAP(CVX)
 . . S @MAP@("B",CVXIMAP(CVX),CVX)=""
 N CPT S CPT=""
 F  S CPT=$O(CPTMAP(CPT)) Q:+CPT=0  D  ;
 . S CVX=CPTMAP(CPT)
 . S @MAP@(CVX,"CPT")=CPT
 . S @MAP@("CPT",CPT,CVX)=""
 ; now do all the extra names in the B index of CVXIMAP
 N ZJ S ZJ=""
 F  S ZJ=$O(CVXIMAP("B",ZJ)) Q:ZJ=""  D  ;
 . S CVX=""
 . F  S CVX=$O(CVXIMAP("B",ZJ,CVX)) Q:CVX=""  D  ;
 . . I $D(@MAP@("B",ZJ)) Q  ; already in the map
 . . S @MAP@(CVX,"altName",$O(@MAP@(CVX,"altName",""),-1)+1)=ZJ
 . . S @MAP@("B",ZJ,CVX)=""
 M G=@MAP
 ZWR G
 Q
 ;

KBAIICE
KBAIICE ; GPL - ICE viewing routines ; 4/24/14 6:03pm
 ;;0.1;KBAIICE;nopatch;noreleasedate;
 ;Copyright 2013 George Lilly.  Licensed Apache 2
 ;
 Q
wsICE(OUT,FILTER) ; get from web service call
 I '$D(DT) N DIQUIET S DIQUIET=1 D DT^DICRW
 N MODE 
 I $G(FILTER("root"))="" S MODE=1 ; mode 1 is the outline of the xml
 E  S MODE=FILTER("root") ; mode 2 is the domo mumps array
 S HTTPRSP("mime")="text/html"
 S OUT=$NA(^TMP("VPROUT",$J))
 K @OUT
 S @OUT="<!DOCTYPE HTML><html><head></head><body><pre>"
 I MODE=3 D  Q  ;
 . N ICEOUT S ICEOUT=$NA(^TMP("ICE",$J,"ICEOUT"))
 . D SOAP^C0ISOAP2(ICEOUT)
 . S ROOT=ICEOUT
 . N ORIG,OL S ORIG=ROOT,OL=$QL(ROOT) ; Orig, Orig Length
 . F  S ROOT=$Q(@ROOT) Q:(($G(ROOT)="")!($NA(@ROOT,OL)'=$NA(@ORIG,OL)))  S @OUT@($O(@OUT@(""),-1)+1)=ROOT_"="_$$CLEAN(@ROOT)
 . S @OUT@($O(@OUT@(""),-1)+1)="</pre></body></html>"
 . D ADDCRLF^VPRJRUT(.OUT)
 N GN S GN=$NA(^TMP("KBAIICE","XML"))
 N DOCID
 S DOCID=$$PARSE^KBAIVPR(GN)
 I MODE'=2 D  ; show the outline of the xml
 . D show^KBAIVPR(1,DOCID,OUT)
 I MODE=2 D  ; show the domo mumps array
 . N G,ROOT
 . D domo3("G")
 . S ROOT="G"
 . N ORIG,OL S ORIG=ROOT,OL=$QL(ROOT) ; Orig, Orig Length
 . F  S ROOT=$Q(@ROOT) Q:(($G(ROOT)="")!($NA(@ROOT,OL)'=$NA(@ORIG,OL)))  S @OUT@($O(@OUT@(""),-1)+1)=ROOT_"="_$$CLEAN(@ROOT)
 S @OUT@($O(@OUT@(""),-1)+1)="</pre></body></html>"
 D ADDCRLF^VPRJRUT(.OUT)
 q
 ;
FILEIN ; import the valueset xml file, parse with MXML, and put the dom in ^TMP
 ;
 N FNAME,DIRNAME
 W !,"Please enter the directory and file name for the XML file"
 Q:'$$GETDIR^KBAIOSD3(.DIRNAME,"/home/vista/") ; prompt the user for the directory
 Q:'$$GETFN^KBAIOSD3(.FNAME,"ICE-Incoming-Base64PortionOfMessageOnlyDecoded.txt") ; 
 N GN S GN=$NA(^TMP("KBAIICE")) ; root to store xml and dom
 K @GN ; clear the area
 N GN1 S GN1=$NA(@GN@("XML",1)) ; place to put the xml file
 W !,"Reading in file ",FNAME," from directory ",DIRNAME
 Q:$$FTG^%ZISH(DIRNAME,FNAME,GN1,3)=""
 N KBAIDID
 W !,"Parsing file ",FNAME
 D PARSE^KBAIOSD3($NA(@GN@("DOM")),$NA(@GN@("XML")))
 Q
 ;
domo3(zary,what,where,zdom,lvl) ; stands for "dom out" returns usable mumps array from a dom
 ; zary is the return array
 ; what is the tag to begin with starting at where, a node in the zdom
 ; multiple is the index to be used for a muliple entry 0 is a singleton
 ; 
 i '$d(zdom) s zdom=$na(^TMP("MXMLDOM",$J,$o(^TMP("MXMLDOM",$J,"AAAAA"),-1)))
 i '$d(where) s where=1
 i $g(what)="" s what=@zdom@(where)
 i '$d(lvl) s lvl=0 n znum s znum=0 ; first time
 ;
 n txt s txt=$$CLEAN($$ALLTXT($NA(@zdom@(where))))
 i txt'="" i txt'=" " d  ;
 . s @zary@(@zdom@(where))=txt
 ;
 n zi s zi=""
 f  s zi=$o(@zdom@(where,"A",zi)) q:zi=""  d  ;
 . s @zary@(what_"@"_zi)=@zdom@(where,"A",zi)
 f  s zi=$o(@zdom@(where,"C",zi)) q:zi=""  d  ;
 . n mult s mult=$$ismult(where,zdom)
 . ;i '$d(znum) n znum s znum(where)=0
 . i mult>0 s znum(where)=$g(znum(where))+1
 . i $g(C0DEBUG) i mult>0 D  ;
 . . w !,"where ",where," what ",what," zi ",zi," lvl ",lvl,!
 . . zwr znum
 . i mult=0 d domo3($na(@zary@(what)),@zdom@(where,"C",zi),zi,zdom,lvl+1)
 . i mult>0 d domo3($na(@zary@(what,znum(where))),@zdom@(where,"C",zi),zi,zdom,lvl+1)
 q
 ;
ismult(zidx,zdom) ; extrinsic which returns one if the node contains multiple
 ; children with the same tag
 n ztags,zzi,zj,rtn s zzi="" s rtn=0
 f  s zzi=$o(@zdom@(zidx,"C",zzi)) q:rtn=1  q:zzi=""  d  ;
 . s zj=@zdom@(zidx,"C",zzi)
 . i $d(ztags(zj)) s rtn=1
 . s ztags(zj)=""
 q rtn
 ;
CLEAN(STR)      ; extrinsic function; returns string - gpl borrowed from the CCR package
 ;; Removes all non printable characters from a string.
 ;; STR by Value
 N TR,I
 F I=0:1:31 S TR=$G(TR)_$C(I)
 S TR=TR_$C(127)
 N ZR S ZR=$TR(STR,TR)
 S ZR=$$LDBLNKS(ZR) ; get rid of leading blanks
 QUIT ZR
 ;
LDBLNKS(st)     ; extrinsic which removes leading blanks from a string
 n pos f pos=1:1:$l(st)  q:$e(st,pos)'=" "
 q $e(st,pos,$l(st))
 ;
ALLTXT(where)   ; extrinsic which returns all text lines from the node .. concatinated 
 ; together
 n zti s zti=""
 n ztr s ztr=""
 f  s zti=$o(@where@("T",zti)) q:zti=""  d  ;
 . s ztr=ztr_$g(@where@("T",zti))
 q ztr
 ;
GVTEST   ;Test maximum length of a global variable name.
 N IND,SUB
 S SUB="A"
 F IND=1:1:1000 D
 . W !,"Length=",$L(SUB)
 . S ^TMP("PKR",SUB)=""
 . S SUB=SUB_"A"
 Q
 ;
GVTEST2   ;Test maximum length of a local variable name.
 N IND,SUB
 S SUB="A"
 F IND=1:1:1000 D
 . W !,"Length=",$L(SUB)
 . S G("PKR",SUB)=""
 . S SUB=SUB_"A"
 Q
 ;
                                         ;



